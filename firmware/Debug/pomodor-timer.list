
pomodor-timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000280c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080029a0  080029a0  000039a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029bc  080029bc  00004018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080029bc  080029bc  000039bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029c4  080029c4  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029c4  080029c4  000039c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029c8  080029c8  000039c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080029cc  00004000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000018  080029e4  00004018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080029e4  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097c8  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae3  00000000  00000000  0000d810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0000f2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d4  00000000  00000000  0000fd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166d6  00000000  00000000  000104fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bea4  00000000  00000000  00026bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb08  00000000  00000000  00032a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be57e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029ec  00000000  00000000  000be5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000c0fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002988 	.word	0x08002988

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08002988 	.word	0x08002988

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fa3a 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f826 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8dc 	bl	80006c8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000510:	f000 f88c 	bl	800062c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8000514:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000518:	f000 faa2 	bl	8000a60 <HAL_Delay>

  /* Set LED for warning */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000522:	480b      	ldr	r0, [pc, #44]	@ (8000550 <main+0x50>)
 8000524:	f000 fd6e 	bl	8001004 <HAL_GPIO_WritePin>

  /* Set Buzzer OFF*/
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800052e:	4809      	ldr	r0, [pc, #36]	@ (8000554 <main+0x54>)
 8000530:	f000 fd68 	bl	8001004 <HAL_GPIO_WritePin>

  userMain();
 8000534:	f002 f9ca 	bl	80028cc <userMain>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* The given LED reaches if application functions crashed*/
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000538:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800053c:	4804      	ldr	r0, [pc, #16]	@ (8000550 <main+0x50>)
 800053e:	f000 fd7a 	bl	8001036 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 8000542:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000546:	f000 fa8b 	bl	8000a60 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800054a:	bf00      	nop
 800054c:	e7f4      	b.n	8000538 <main+0x38>
 800054e:	bf00      	nop
 8000550:	40020800 	.word	0x40020800
 8000554:	40020400 	.word	0x40020400

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	@ 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	@ 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f002 f9e2 	bl	8002930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	4a27      	ldr	r2, [pc, #156]	@ (8000624 <SystemClock_Config+0xcc>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	@ 0x40
 800058c:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005a4:	4a20      	ldr	r2, [pc, #128]	@ (8000628 <SystemClock_Config+0xd0>)
 80005a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005cc:	2308      	movs	r3, #8
 80005ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005d0:	2348      	movs	r3, #72	@ 0x48
 80005d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fd43 	bl	800106c <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005ec:	f000 f8e4 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2102      	movs	r1, #2
 800060c:	4618      	mov	r0, r3
 800060e:	f000 ffa5 	bl	800155c <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000618:	f000 f8ce 	bl	80007b8 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	@ 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000648:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <MX_TIM3_Init+0x94>)
 800064a:	4a1e      	ldr	r2, [pc, #120]	@ (80006c4 <MX_TIM3_Init+0x98>)
 800064c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800064e:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_TIM3_Init+0x94>)
 8000650:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000654:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_TIM3_Init+0x94>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800065c:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <MX_TIM3_Init+0x94>)
 800065e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000662:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000664:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <MX_TIM3_Init+0x94>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066a:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <MX_TIM3_Init+0x94>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000670:	4813      	ldr	r0, [pc, #76]	@ (80006c0 <MX_TIM3_Init+0x94>)
 8000672:	f001 f91f 	bl	80018b4 <HAL_TIM_Base_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800067c:	f000 f89c 	bl	80007b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000684:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	4619      	mov	r1, r3
 800068c:	480c      	ldr	r0, [pc, #48]	@ (80006c0 <MX_TIM3_Init+0x94>)
 800068e:	f001 fae2 	bl	8001c56 <HAL_TIM_ConfigClockSource>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000698:	f000 f88e 	bl	80007b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_TIM3_Init+0x94>)
 80006aa:	f001 fced 	bl	8002088 <HAL_TIMEx_MasterConfigSynchronization>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80006b4:	f000 f880 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000034 	.word	0x20000034
 80006c4:	40000400 	.word	0x40000400

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b31      	ldr	r3, [pc, #196]	@ (80007a8 <MX_GPIO_Init+0xe0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a30      	ldr	r2, [pc, #192]	@ (80007a8 <MX_GPIO_Init+0xe0>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b2e      	ldr	r3, [pc, #184]	@ (80007a8 <MX_GPIO_Init+0xe0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b2a      	ldr	r3, [pc, #168]	@ (80007a8 <MX_GPIO_Init+0xe0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a29      	ldr	r2, [pc, #164]	@ (80007a8 <MX_GPIO_Init+0xe0>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b27      	ldr	r3, [pc, #156]	@ (80007a8 <MX_GPIO_Init+0xe0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b23      	ldr	r3, [pc, #140]	@ (80007a8 <MX_GPIO_Init+0xe0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a22      	ldr	r2, [pc, #136]	@ (80007a8 <MX_GPIO_Init+0xe0>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b20      	ldr	r3, [pc, #128]	@ (80007a8 <MX_GPIO_Init+0xe0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000738:	481c      	ldr	r0, [pc, #112]	@ (80007ac <MX_GPIO_Init+0xe4>)
 800073a:	f000 fc63 	bl	8001004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_9, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 5148 	mov.w	r1, #12800	@ 0x3200
 8000744:	481a      	ldr	r0, [pc, #104]	@ (80007b0 <MX_GPIO_Init+0xe8>)
 8000746:	f000 fc5d 	bl	8001004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800074a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800074e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4619      	mov	r1, r3
 8000762:	4812      	ldr	r0, [pc, #72]	@ (80007ac <MX_GPIO_Init+0xe4>)
 8000764:	f000 fab2 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000768:	2303      	movs	r3, #3
 800076a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000770:	2301      	movs	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	480e      	ldr	r0, [pc, #56]	@ (80007b4 <MX_GPIO_Init+0xec>)
 800077c:	f000 faa6 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_9;
 8000780:	f44f 5348 	mov.w	r3, #12800	@ 0x3200
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_GPIO_Init+0xe8>)
 800079a:	f000 fa97 	bl	8000ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800079e:	bf00      	nop
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020800 	.word	0x40020800
 80007b0:	40020400 	.word	0x40020400
 80007b4:	40020000 	.word	0x40020000

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <Error_Handler+0x8>

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000810 <HAL_MspInit+0x4c>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007da:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ee:	4a08      	ldr	r2, [pc, #32]	@ (8000810 <HAL_MspInit+0x4c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0e      	ldr	r2, [pc, #56]	@ (800085c <HAL_TIM_Base_MspInit+0x48>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d115      	bne.n	8000852 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <HAL_TIM_Base_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082e:	4a0c      	ldr	r2, [pc, #48]	@ (8000860 <HAL_TIM_Base_MspInit+0x4c>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6413      	str	r3, [r2, #64]	@ 0x40
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <HAL_TIM_Base_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	201d      	movs	r0, #29
 8000848:	f000 fa09 	bl	8000c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800084c:	201d      	movs	r0, #29
 800084e:	f000 fa22 	bl	8000c96 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40000400 	.word	0x40000400
 8000860:	40023800 	.word	0x40023800

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <NMI_Handler+0x4>

0800086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <MemManage_Handler+0x4>

0800087c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <UsageFault_Handler+0x4>

0800088c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
	...

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	glbSysTicks++;
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <SysTick_Handler+0x20>)
 80008be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008c2:	1c50      	adds	r0, r2, #1
 80008c4:	f143 0100 	adc.w	r1, r3, #0
 80008c8:	4b03      	ldr	r3, [pc, #12]	@ (80008d8 <SysTick_Handler+0x20>)
 80008ca:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ce:	f000 f8a7 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000088 	.word	0x20000088

080008dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	glbSecondCounter++;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <TIM3_IRQHandler+0x20>)
 80008e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008e6:	1c50      	adds	r0, r2, #1
 80008e8:	f143 0100 	adc.w	r1, r3, #0
 80008ec:	4b03      	ldr	r3, [pc, #12]	@ (80008fc <TIM3_IRQHandler+0x20>)
 80008ee:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008f2:	4803      	ldr	r0, [pc, #12]	@ (8000900 <TIM3_IRQHandler+0x24>)
 80008f4:	f001 f8bf 	bl	8001a76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000080 	.word	0x20000080
 8000900:	20000034 	.word	0x20000034

08000904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	@ (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000960 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800092c:	f7ff ffea 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	@ (8000968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	@ (8000974 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000956:	f001 fff3 	bl	8002940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095a:	f7ff fdd1 	bl	8000500 <main>
  bx  lr    
 800095e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000960:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800096c:	080029cc 	.word	0x080029cc
  ldr r2, =_sbss
 8000970:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000974:	200000c4 	.word	0x200000c4

08000978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000980:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0d      	ldr	r2, [pc, #52]	@ (80009bc <HAL_Init+0x40>)
 8000986:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800098a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800098c:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <HAL_Init+0x40>)
 8000992:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	@ (80009bc <HAL_Init+0x40>)
 800099e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 f94f 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	200f      	movs	r0, #15
 80009ac:	f000 f808 	bl	80009c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff ff08 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023c00 	.word	0x40023c00

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_InitTick+0x54>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_InitTick+0x58>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f967 	bl	8000cb2 <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00e      	b.n	8000a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d80a      	bhi.n	8000a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f000 f92f 	bl	8000c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a00:	4a06      	ldr	r2, [pc, #24]	@ (8000a1c <HAL_InitTick+0x5c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000004 	.word	0x20000004

08000a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_IncTick+0x20>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_IncTick+0x24>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a04      	ldr	r2, [pc, #16]	@ (8000a44 <HAL_IncTick+0x24>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000008 	.word	0x20000008
 8000a44:	2000007c 	.word	0x2000007c

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <HAL_GetTick+0x14>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	2000007c 	.word	0x2000007c

08000a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a68:	f7ff ffee 	bl	8000a48 <HAL_GetTick>
 8000a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a78:	d005      	beq.n	8000a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <HAL_Delay+0x44>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a86:	bf00      	nop
 8000a88:	f7ff ffde 	bl	8000a48 <HAL_GetTick>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d8f7      	bhi.n	8000a88 <HAL_Delay+0x28>
  {
  }
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008

08000aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ada:	4a04      	ldr	r2, [pc, #16]	@ (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	60d3      	str	r3, [r2, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af4:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <__NVIC_GetPriorityGrouping+0x18>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	f003 0307 	and.w	r3, r3, #7
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	db0b      	blt.n	8000b36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	f003 021f 	and.w	r2, r3, #31
 8000b24:	4907      	ldr	r1, [pc, #28]	@ (8000b44 <__NVIC_EnableIRQ+0x38>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	095b      	lsrs	r3, r3, #5
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000e100 	.word	0xe000e100

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db0a      	blt.n	8000b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	490c      	ldr	r1, [pc, #48]	@ (8000b94 <__NVIC_SetPriority+0x4c>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b70:	e00a      	b.n	8000b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4908      	ldr	r1, [pc, #32]	@ (8000b98 <__NVIC_SetPriority+0x50>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	@ 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f1c3 0307 	rsb	r3, r3, #7
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf28      	it	cs
 8000bba:	2304      	movcs	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d902      	bls.n	8000bcc <NVIC_EncodePriority+0x30>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	e000      	b.n	8000bce <NVIC_EncodePriority+0x32>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	4313      	orrs	r3, r2
         );
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	@ 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c14:	d301      	bcc.n	8000c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00f      	b.n	8000c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <SysTick_Config+0x40>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c22:	210f      	movs	r1, #15
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f7ff ff8e 	bl	8000b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <SysTick_Config+0x40>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c32:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <SysTick_Config+0x40>)
 8000c34:	2207      	movs	r2, #7
 8000c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	e000e010 	.word	0xe000e010

08000c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff29 	bl	8000aa8 <__NVIC_SetPriorityGrouping>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c70:	f7ff ff3e 	bl	8000af0 <__NVIC_GetPriorityGrouping>
 8000c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	6978      	ldr	r0, [r7, #20]
 8000c7c:	f7ff ff8e 	bl	8000b9c <NVIC_EncodePriority>
 8000c80:	4602      	mov	r2, r0
 8000c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff5d 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff31 	bl	8000b0c <__NVIC_EnableIRQ>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ffa2 	bl	8000c04 <SysTick_Config>
 8000cc0:	4603      	mov	r3, r0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	@ 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
 8000ce6:	e159      	b.n	8000f9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f040 8148 	bne.w	8000f96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d005      	beq.n	8000d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d130      	bne.n	8000d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	2203      	movs	r2, #3
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4013      	ands	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	68da      	ldr	r2, [r3, #12]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d54:	2201      	movs	r2, #1
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	091b      	lsrs	r3, r3, #4
 8000d6a:	f003 0201 	and.w	r2, r3, #1
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d017      	beq.n	8000dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d123      	bne.n	8000e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	08da      	lsrs	r2, r3, #3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3208      	adds	r2, #8
 8000dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	220f      	movs	r2, #15
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	691a      	ldr	r2, [r3, #16]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	08da      	lsrs	r2, r3, #3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3208      	adds	r2, #8
 8000e0a:	69b9      	ldr	r1, [r7, #24]
 8000e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0203 	and.w	r2, r3, #3
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 80a2 	beq.w	8000f96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b57      	ldr	r3, [pc, #348]	@ (8000fb4 <HAL_GPIO_Init+0x2e8>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	4a56      	ldr	r2, [pc, #344]	@ (8000fb4 <HAL_GPIO_Init+0x2e8>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e62:	4b54      	ldr	r3, [pc, #336]	@ (8000fb4 <HAL_GPIO_Init+0x2e8>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e6e:	4a52      	ldr	r2, [pc, #328]	@ (8000fb8 <HAL_GPIO_Init+0x2ec>)
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	220f      	movs	r2, #15
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a49      	ldr	r2, [pc, #292]	@ (8000fbc <HAL_GPIO_Init+0x2f0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d019      	beq.n	8000ece <HAL_GPIO_Init+0x202>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a48      	ldr	r2, [pc, #288]	@ (8000fc0 <HAL_GPIO_Init+0x2f4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d013      	beq.n	8000eca <HAL_GPIO_Init+0x1fe>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a47      	ldr	r2, [pc, #284]	@ (8000fc4 <HAL_GPIO_Init+0x2f8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d00d      	beq.n	8000ec6 <HAL_GPIO_Init+0x1fa>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a46      	ldr	r2, [pc, #280]	@ (8000fc8 <HAL_GPIO_Init+0x2fc>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d007      	beq.n	8000ec2 <HAL_GPIO_Init+0x1f6>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a45      	ldr	r2, [pc, #276]	@ (8000fcc <HAL_GPIO_Init+0x300>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <HAL_GPIO_Init+0x1f2>
 8000eba:	2304      	movs	r3, #4
 8000ebc:	e008      	b.n	8000ed0 <HAL_GPIO_Init+0x204>
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	e006      	b.n	8000ed0 <HAL_GPIO_Init+0x204>
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e004      	b.n	8000ed0 <HAL_GPIO_Init+0x204>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e002      	b.n	8000ed0 <HAL_GPIO_Init+0x204>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e000      	b.n	8000ed0 <HAL_GPIO_Init+0x204>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	69fa      	ldr	r2, [r7, #28]
 8000ed2:	f002 0203 	and.w	r2, r2, #3
 8000ed6:	0092      	lsls	r2, r2, #2
 8000ed8:	4093      	lsls	r3, r2
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ee0:	4935      	ldr	r1, [pc, #212]	@ (8000fb8 <HAL_GPIO_Init+0x2ec>)
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	089b      	lsrs	r3, r3, #2
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eee:	4b38      	ldr	r3, [pc, #224]	@ (8000fd0 <HAL_GPIO_Init+0x304>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f12:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd0 <HAL_GPIO_Init+0x304>)
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f18:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd0 <HAL_GPIO_Init+0x304>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f3c:	4a24      	ldr	r2, [pc, #144]	@ (8000fd0 <HAL_GPIO_Init+0x304>)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f42:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <HAL_GPIO_Init+0x304>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f66:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd0 <HAL_GPIO_Init+0x304>)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <HAL_GPIO_Init+0x304>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f90:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd0 <HAL_GPIO_Init+0x304>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	2b0f      	cmp	r3, #15
 8000fa0:	f67f aea2 	bls.w	8000ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3724      	adds	r7, #36	@ 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40013800 	.word	0x40013800
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40020400 	.word	0x40020400
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020c00 	.word	0x40020c00
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40013c00 	.word	0x40013c00

08000fd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	691a      	ldr	r2, [r3, #16]
 8000fe4:	887b      	ldrh	r3, [r7, #2]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e001      	b.n	8000ff6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
 8001010:	4613      	mov	r3, r2
 8001012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001014:	787b      	ldrb	r3, [r7, #1]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800101a:	887a      	ldrh	r2, [r7, #2]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001020:	e003      	b.n	800102a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	041a      	lsls	r2, r3, #16
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	619a      	str	r2, [r3, #24]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001036:	b480      	push	{r7}
 8001038:	b085      	sub	sp, #20
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	460b      	mov	r3, r1
 8001040:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001048:	887a      	ldrh	r2, [r7, #2]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4013      	ands	r3, r2
 800104e:	041a      	lsls	r2, r3, #16
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	43d9      	mvns	r1, r3
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	400b      	ands	r3, r1
 8001058:	431a      	orrs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e267      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d075      	beq.n	8001176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800108a:	4b88      	ldr	r3, [pc, #544]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b04      	cmp	r3, #4
 8001094:	d00c      	beq.n	80010b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001096:	4b85      	ldr	r3, [pc, #532]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d112      	bne.n	80010c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a2:	4b82      	ldr	r3, [pc, #520]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010ae:	d10b      	bne.n	80010c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b0:	4b7e      	ldr	r3, [pc, #504]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d05b      	beq.n	8001174 <HAL_RCC_OscConfig+0x108>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d157      	bne.n	8001174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e242      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010d0:	d106      	bne.n	80010e0 <HAL_RCC_OscConfig+0x74>
 80010d2:	4b76      	ldr	r3, [pc, #472]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a75      	ldr	r2, [pc, #468]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e01d      	b.n	800111c <HAL_RCC_OscConfig+0xb0>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0x98>
 80010ea:	4b70      	ldr	r3, [pc, #448]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6f      	ldr	r2, [pc, #444]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b6d      	ldr	r3, [pc, #436]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a6c      	ldr	r2, [pc, #432]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e00b      	b.n	800111c <HAL_RCC_OscConfig+0xb0>
 8001104:	4b69      	ldr	r3, [pc, #420]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a68      	ldr	r2, [pc, #416]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 800110a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b66      	ldr	r3, [pc, #408]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a65      	ldr	r2, [pc, #404]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800111a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fc90 	bl	8000a48 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fc8c 	bl	8000a48 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	@ 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e207      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	4b5b      	ldr	r3, [pc, #364]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0xc0>
 800114a:	e014      	b.n	8001176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fc7c 	bl	8000a48 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fc78 	bl	8000a48 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	@ 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e1f3      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	4b51      	ldr	r3, [pc, #324]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0xe8>
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d063      	beq.n	800124a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001182:	4b4a      	ldr	r3, [pc, #296]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00b      	beq.n	80011a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118e:	4b47      	ldr	r3, [pc, #284]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001196:	2b08      	cmp	r3, #8
 8001198:	d11c      	bne.n	80011d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119a:	4b44      	ldr	r3, [pc, #272]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d116      	bne.n	80011d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a6:	4b41      	ldr	r3, [pc, #260]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <HAL_RCC_OscConfig+0x152>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d001      	beq.n	80011be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e1c7      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011be:	4b3b      	ldr	r3, [pc, #236]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4937      	ldr	r1, [pc, #220]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d2:	e03a      	b.n	800124a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d020      	beq.n	800121e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011dc:	4b34      	ldr	r3, [pc, #208]	@ (80012b0 <HAL_RCC_OscConfig+0x244>)
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e2:	f7ff fc31 	bl	8000a48 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ea:	f7ff fc2d 	bl	8000a48 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e1a8      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	4b2b      	ldr	r3, [pc, #172]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f0      	beq.n	80011ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001208:	4b28      	ldr	r3, [pc, #160]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4925      	ldr	r1, [pc, #148]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001218:	4313      	orrs	r3, r2
 800121a:	600b      	str	r3, [r1, #0]
 800121c:	e015      	b.n	800124a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121e:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <HAL_RCC_OscConfig+0x244>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fc10 	bl	8000a48 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122c:	f7ff fc0c 	bl	8000a48 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e187      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d036      	beq.n	80012c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d016      	beq.n	800128c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125e:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_RCC_OscConfig+0x248>)
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001264:	f7ff fbf0 	bl	8000a48 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fbec 	bl	8000a48 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e167      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0x200>
 800128a:	e01b      	b.n	80012c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <HAL_RCC_OscConfig+0x248>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001292:	f7ff fbd9 	bl	8000a48 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001298:	e00e      	b.n	80012b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800129a:	f7ff fbd5 	bl	8000a48 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d907      	bls.n	80012b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e150      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
 80012ac:	40023800 	.word	0x40023800
 80012b0:	42470000 	.word	0x42470000
 80012b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b8:	4b88      	ldr	r3, [pc, #544]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80012ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1ea      	bne.n	800129a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 8097 	beq.w	8001400 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d6:	4b81      	ldr	r3, [pc, #516]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10f      	bne.n	8001302 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b7d      	ldr	r3, [pc, #500]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	4a7c      	ldr	r2, [pc, #496]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f2:	4b7a      	ldr	r3, [pc, #488]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fe:	2301      	movs	r3, #1
 8001300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001302:	4b77      	ldr	r3, [pc, #476]	@ (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800130a:	2b00      	cmp	r3, #0
 800130c:	d118      	bne.n	8001340 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130e:	4b74      	ldr	r3, [pc, #464]	@ (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a73      	ldr	r2, [pc, #460]	@ (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131a:	f7ff fb95 	bl	8000a48 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001322:	f7ff fb91 	bl	8000a48 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e10c      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001334:	4b6a      	ldr	r3, [pc, #424]	@ (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x2ea>
 8001348:	4b64      	ldr	r3, [pc, #400]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800134a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800134c:	4a63      	ldr	r2, [pc, #396]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6713      	str	r3, [r2, #112]	@ 0x70
 8001354:	e01c      	b.n	8001390 <HAL_RCC_OscConfig+0x324>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b05      	cmp	r3, #5
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x30c>
 800135e:	4b5f      	ldr	r3, [pc, #380]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001362:	4a5e      	ldr	r2, [pc, #376]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6713      	str	r3, [r2, #112]	@ 0x70
 800136a:	4b5c      	ldr	r3, [pc, #368]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800136c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800136e:	4a5b      	ldr	r2, [pc, #364]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6713      	str	r3, [r2, #112]	@ 0x70
 8001376:	e00b      	b.n	8001390 <HAL_RCC_OscConfig+0x324>
 8001378:	4b58      	ldr	r3, [pc, #352]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800137c:	4a57      	ldr	r2, [pc, #348]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800137e:	f023 0301 	bic.w	r3, r3, #1
 8001382:	6713      	str	r3, [r2, #112]	@ 0x70
 8001384:	4b55      	ldr	r3, [pc, #340]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001388:	4a54      	ldr	r2, [pc, #336]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800138a:	f023 0304 	bic.w	r3, r3, #4
 800138e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d015      	beq.n	80013c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001398:	f7ff fb56 	bl	8000a48 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139e:	e00a      	b.n	80013b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a0:	f7ff fb52 	bl	8000a48 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e0cb      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b6:	4b49      	ldr	r3, [pc, #292]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80013b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0ee      	beq.n	80013a0 <HAL_RCC_OscConfig+0x334>
 80013c2:	e014      	b.n	80013ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fb40 	bl	8000a48 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013cc:	f7ff fb3c 	bl	8000a48 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e0b5      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e2:	4b3e      	ldr	r3, [pc, #248]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1ee      	bne.n	80013cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d105      	bne.n	8001400 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f4:	4b39      	ldr	r3, [pc, #228]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	4a38      	ldr	r2, [pc, #224]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80013fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80a1 	beq.w	800154c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800140a:	4b34      	ldr	r3, [pc, #208]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b08      	cmp	r3, #8
 8001414:	d05c      	beq.n	80014d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d141      	bne.n	80014a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141e:	4b31      	ldr	r3, [pc, #196]	@ (80014e4 <HAL_RCC_OscConfig+0x478>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fb10 	bl	8000a48 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142c:	f7ff fb0c 	bl	8000a48 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e087      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143e:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69da      	ldr	r2, [r3, #28]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001458:	019b      	lsls	r3, r3, #6
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001460:	085b      	lsrs	r3, r3, #1
 8001462:	3b01      	subs	r3, #1
 8001464:	041b      	lsls	r3, r3, #16
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146c:	061b      	lsls	r3, r3, #24
 800146e:	491b      	ldr	r1, [pc, #108]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <HAL_RCC_OscConfig+0x478>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fae5 	bl	8000a48 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff fae1 	bl	8000a48 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e05c      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x416>
 80014a0:	e054      	b.n	800154c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <HAL_RCC_OscConfig+0x478>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff face 	bl	8000a48 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff faca 	bl	8000a48 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e045      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x444>
 80014ce:	e03d      	b.n	800154c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d107      	bne.n	80014e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e038      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000
 80014e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <HAL_RCC_OscConfig+0x4ec>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d028      	beq.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d121      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150e:	429a      	cmp	r2, r3
 8001510:	d11a      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001518:	4013      	ands	r3, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800151e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001520:	4293      	cmp	r3, r2
 8001522:	d111      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152e:	085b      	lsrs	r3, r3, #1
 8001530:	3b01      	subs	r3, #1
 8001532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d107      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0cc      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001570:	4b68      	ldr	r3, [pc, #416]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d90c      	bls.n	8001598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b65      	ldr	r3, [pc, #404]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b63      	ldr	r3, [pc, #396]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0b8      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b0:	4b59      	ldr	r3, [pc, #356]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a58      	ldr	r2, [pc, #352]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c8:	4b53      	ldr	r3, [pc, #332]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a52      	ldr	r2, [pc, #328]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	4b50      	ldr	r3, [pc, #320]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	494d      	ldr	r1, [pc, #308]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d044      	beq.n	800167c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b47      	ldr	r3, [pc, #284]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d119      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e07f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d003      	beq.n	800161a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001616:	2b03      	cmp	r3, #3
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161a:	4b3f      	ldr	r3, [pc, #252]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162a:	4b3b      	ldr	r3, [pc, #236]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e067      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163a:	4b37      	ldr	r3, [pc, #220]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f023 0203 	bic.w	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4934      	ldr	r1, [pc, #208]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	4313      	orrs	r3, r2
 800164a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800164c:	f7ff f9fc 	bl	8000a48 <HAL_GetTick>
 8001650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	e00a      	b.n	800166a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001654:	f7ff f9f8 	bl	8000a48 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e04f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	4b2b      	ldr	r3, [pc, #172]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 020c 	and.w	r2, r3, #12
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	429a      	cmp	r2, r3
 800167a:	d1eb      	bne.n	8001654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800167c:	4b25      	ldr	r3, [pc, #148]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d20c      	bcs.n	80016a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e032      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4916      	ldr	r1, [pc, #88]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ce:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	490e      	ldr	r1, [pc, #56]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016e2:	f000 f821 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 80016e6:	4602      	mov	r2, r0
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	490a      	ldr	r1, [pc, #40]	@ (800171c <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	5ccb      	ldrb	r3, [r1, r3]
 80016f6:	fa22 f303 	lsr.w	r3, r2, r3
 80016fa:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_RCC_ClockConfig+0x1c8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f95c 	bl	80009c0 <HAL_InitTick>

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023c00 	.word	0x40023c00
 8001718:	40023800 	.word	0x40023800
 800171c:	080029a0 	.word	0x080029a0
 8001720:	20000000 	.word	0x20000000
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800172c:	b090      	sub	sp, #64	@ 0x40
 800172e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001740:	4b59      	ldr	r3, [pc, #356]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d00d      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x40>
 800174c:	2b08      	cmp	r3, #8
 800174e:	f200 80a1 	bhi.w	8001894 <HAL_RCC_GetSysClockFreq+0x16c>
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x34>
 8001756:	2b04      	cmp	r3, #4
 8001758:	d003      	beq.n	8001762 <HAL_RCC_GetSysClockFreq+0x3a>
 800175a:	e09b      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800175c:	4b53      	ldr	r3, [pc, #332]	@ (80018ac <HAL_RCC_GetSysClockFreq+0x184>)
 800175e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001760:	e09b      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001762:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001764:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001766:	e098      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001768:	4b4f      	ldr	r3, [pc, #316]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001770:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001772:	4b4d      	ldr	r3, [pc, #308]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d028      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177e:	4b4a      	ldr	r3, [pc, #296]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	099b      	lsrs	r3, r3, #6
 8001784:	2200      	movs	r2, #0
 8001786:	623b      	str	r3, [r7, #32]
 8001788:	627a      	str	r2, [r7, #36]	@ 0x24
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001790:	2100      	movs	r1, #0
 8001792:	4b47      	ldr	r3, [pc, #284]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001794:	fb03 f201 	mul.w	r2, r3, r1
 8001798:	2300      	movs	r3, #0
 800179a:	fb00 f303 	mul.w	r3, r0, r3
 800179e:	4413      	add	r3, r2
 80017a0:	4a43      	ldr	r2, [pc, #268]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80017a2:	fba0 1202 	umull	r1, r2, r0, r2
 80017a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017a8:	460a      	mov	r2, r1
 80017aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80017ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ae:	4413      	add	r3, r2
 80017b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017b4:	2200      	movs	r2, #0
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	61fa      	str	r2, [r7, #28]
 80017ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017c2:	f7fe fd07 	bl	80001d4 <__aeabi_uldivmod>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4613      	mov	r3, r2
 80017cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017ce:	e053      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d0:	4b35      	ldr	r3, [pc, #212]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	099b      	lsrs	r3, r3, #6
 80017d6:	2200      	movs	r2, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	617a      	str	r2, [r7, #20]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017e2:	f04f 0b00 	mov.w	fp, #0
 80017e6:	4652      	mov	r2, sl
 80017e8:	465b      	mov	r3, fp
 80017ea:	f04f 0000 	mov.w	r0, #0
 80017ee:	f04f 0100 	mov.w	r1, #0
 80017f2:	0159      	lsls	r1, r3, #5
 80017f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f8:	0150      	lsls	r0, r2, #5
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	ebb2 080a 	subs.w	r8, r2, sl
 8001802:	eb63 090b 	sbc.w	r9, r3, fp
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001812:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001816:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800181a:	ebb2 0408 	subs.w	r4, r2, r8
 800181e:	eb63 0509 	sbc.w	r5, r3, r9
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	00eb      	lsls	r3, r5, #3
 800182c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001830:	00e2      	lsls	r2, r4, #3
 8001832:	4614      	mov	r4, r2
 8001834:	461d      	mov	r5, r3
 8001836:	eb14 030a 	adds.w	r3, r4, sl
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	eb45 030b 	adc.w	r3, r5, fp
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800184e:	4629      	mov	r1, r5
 8001850:	028b      	lsls	r3, r1, #10
 8001852:	4621      	mov	r1, r4
 8001854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001858:	4621      	mov	r1, r4
 800185a:	028a      	lsls	r2, r1, #10
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001862:	2200      	movs	r2, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	60fa      	str	r2, [r7, #12]
 8001868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800186c:	f7fe fcb2 	bl	80001d4 <__aeabi_uldivmod>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4613      	mov	r3, r2
 8001876:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001878:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	0c1b      	lsrs	r3, r3, #16
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	3301      	adds	r3, #1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001888:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800188a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001890:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001892:	e002      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001894:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_RCC_GetSysClockFreq+0x184>)
 8001896:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800189c:	4618      	mov	r0, r3
 800189e:	3740      	adds	r7, #64	@ 0x40
 80018a0:	46bd      	mov	sp, r7
 80018a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	00f42400 	.word	0x00f42400
 80018b0:	017d7840 	.word	0x017d7840

080018b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e041      	b.n	800194a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7fe ff9a 	bl	8000814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4610      	mov	r0, r2
 80018f4:	f000 faa8 	bl	8001e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d001      	beq.n	800196c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e044      	b.n	80019f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1e      	ldr	r2, [pc, #120]	@ (8001a04 <HAL_TIM_Base_Start_IT+0xb0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d018      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x6c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001996:	d013      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x6c>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1a      	ldr	r2, [pc, #104]	@ (8001a08 <HAL_TIM_Base_Start_IT+0xb4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00e      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x6c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a19      	ldr	r2, [pc, #100]	@ (8001a0c <HAL_TIM_Base_Start_IT+0xb8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d009      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x6c>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a17      	ldr	r2, [pc, #92]	@ (8001a10 <HAL_TIM_Base_Start_IT+0xbc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d004      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x6c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a16      	ldr	r2, [pc, #88]	@ (8001a14 <HAL_TIM_Base_Start_IT+0xc0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d111      	bne.n	80019e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d010      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0201 	orr.w	r2, r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019e2:	e007      	b.n	80019f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0201 	orr.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40010000 	.word	0x40010000
 8001a08:	40000400 	.word	0x40000400
 8001a0c:	40000800 	.word	0x40000800
 8001a10:	40000c00 	.word	0x40000c00
 8001a14:	40014000 	.word	0x40014000

08001a18 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0201 	bic.w	r2, r2, #1
 8001a2e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6a1a      	ldr	r2, [r3, #32]
 8001a36:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10f      	bne.n	8001a60 <HAL_TIM_Base_Stop_IT+0x48>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6a1a      	ldr	r2, [r3, #32]
 8001a46:	f240 4344 	movw	r3, #1092	@ 0x444
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d107      	bne.n	8001a60 <HAL_TIM_Base_Stop_IT+0x48>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b084      	sub	sp, #16
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d020      	beq.n	8001ada <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01b      	beq.n	8001ada <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f06f 0202 	mvn.w	r2, #2
 8001aaa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f9a3 	bl	8001e0c <HAL_TIM_IC_CaptureCallback>
 8001ac6:	e005      	b.n	8001ad4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f995 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f9a6 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d020      	beq.n	8001b26 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d01b      	beq.n	8001b26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f06f 0204 	mvn.w	r2, #4
 8001af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f97d 	bl	8001e0c <HAL_TIM_IC_CaptureCallback>
 8001b12:	e005      	b.n	8001b20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f96f 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f980 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d01b      	beq.n	8001b72 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f06f 0208 	mvn.w	r2, #8
 8001b42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2204      	movs	r2, #4
 8001b48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f957 	bl	8001e0c <HAL_TIM_IC_CaptureCallback>
 8001b5e:	e005      	b.n	8001b6c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f949 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f95a 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01b      	beq.n	8001bbe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f06f 0210 	mvn.w	r2, #16
 8001b8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2208      	movs	r2, #8
 8001b94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f931 	bl	8001e0c <HAL_TIM_IC_CaptureCallback>
 8001baa:	e005      	b.n	8001bb8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f923 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f934 	bl	8001e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00c      	beq.n	8001be2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f06f 0201 	mvn.w	r2, #1
 8001bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f901 	bl	8001de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00c      	beq.n	8001c06 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fab9 	bl	8002178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00c      	beq.n	8001c2a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f905 	bl	8001e34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f003 0320 	and.w	r3, r3, #32
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00c      	beq.n	8001c4e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f06f 0220 	mvn.w	r2, #32
 8001c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fa8b 	bl	8002164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_TIM_ConfigClockSource+0x1c>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e0b4      	b.n	8001ddc <HAL_TIM_ConfigClockSource+0x186>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001c90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001c98:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001caa:	d03e      	beq.n	8001d2a <HAL_TIM_ConfigClockSource+0xd4>
 8001cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cb0:	f200 8087 	bhi.w	8001dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8001cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cb8:	f000 8086 	beq.w	8001dc8 <HAL_TIM_ConfigClockSource+0x172>
 8001cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cc0:	d87f      	bhi.n	8001dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8001cc2:	2b70      	cmp	r3, #112	@ 0x70
 8001cc4:	d01a      	beq.n	8001cfc <HAL_TIM_ConfigClockSource+0xa6>
 8001cc6:	2b70      	cmp	r3, #112	@ 0x70
 8001cc8:	d87b      	bhi.n	8001dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8001cca:	2b60      	cmp	r3, #96	@ 0x60
 8001ccc:	d050      	beq.n	8001d70 <HAL_TIM_ConfigClockSource+0x11a>
 8001cce:	2b60      	cmp	r3, #96	@ 0x60
 8001cd0:	d877      	bhi.n	8001dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8001cd2:	2b50      	cmp	r3, #80	@ 0x50
 8001cd4:	d03c      	beq.n	8001d50 <HAL_TIM_ConfigClockSource+0xfa>
 8001cd6:	2b50      	cmp	r3, #80	@ 0x50
 8001cd8:	d873      	bhi.n	8001dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8001cda:	2b40      	cmp	r3, #64	@ 0x40
 8001cdc:	d058      	beq.n	8001d90 <HAL_TIM_ConfigClockSource+0x13a>
 8001cde:	2b40      	cmp	r3, #64	@ 0x40
 8001ce0:	d86f      	bhi.n	8001dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8001ce2:	2b30      	cmp	r3, #48	@ 0x30
 8001ce4:	d064      	beq.n	8001db0 <HAL_TIM_ConfigClockSource+0x15a>
 8001ce6:	2b30      	cmp	r3, #48	@ 0x30
 8001ce8:	d86b      	bhi.n	8001dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	d060      	beq.n	8001db0 <HAL_TIM_ConfigClockSource+0x15a>
 8001cee:	2b20      	cmp	r3, #32
 8001cf0:	d867      	bhi.n	8001dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d05c      	beq.n	8001db0 <HAL_TIM_ConfigClockSource+0x15a>
 8001cf6:	2b10      	cmp	r3, #16
 8001cf8:	d05a      	beq.n	8001db0 <HAL_TIM_ConfigClockSource+0x15a>
 8001cfa:	e062      	b.n	8001dc2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d0c:	f000 f99c 	bl	8002048 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001d1e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	609a      	str	r2, [r3, #8]
      break;
 8001d28:	e04f      	b.n	8001dca <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d3a:	f000 f985 	bl	8002048 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d4c:	609a      	str	r2, [r3, #8]
      break;
 8001d4e:	e03c      	b.n	8001dca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f000 f8f9 	bl	8001f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2150      	movs	r1, #80	@ 0x50
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 f952 	bl	8002012 <TIM_ITRx_SetConfig>
      break;
 8001d6e:	e02c      	b.n	8001dca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f000 f918 	bl	8001fb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2160      	movs	r1, #96	@ 0x60
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 f942 	bl	8002012 <TIM_ITRx_SetConfig>
      break;
 8001d8e:	e01c      	b.n	8001dca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f000 f8d9 	bl	8001f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2140      	movs	r1, #64	@ 0x40
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 f932 	bl	8002012 <TIM_ITRx_SetConfig>
      break;
 8001dae:	e00c      	b.n	8001dca <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4619      	mov	r1, r3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f000 f929 	bl	8002012 <TIM_ITRx_SetConfig>
      break;
 8001dc0:	e003      	b.n	8001dca <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc6:	e000      	b.n	8001dca <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001dc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a37      	ldr	r2, [pc, #220]	@ (8001f38 <TIM_Base_SetConfig+0xf0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00f      	beq.n	8001e80 <TIM_Base_SetConfig+0x38>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e66:	d00b      	beq.n	8001e80 <TIM_Base_SetConfig+0x38>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a34      	ldr	r2, [pc, #208]	@ (8001f3c <TIM_Base_SetConfig+0xf4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d007      	beq.n	8001e80 <TIM_Base_SetConfig+0x38>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a33      	ldr	r2, [pc, #204]	@ (8001f40 <TIM_Base_SetConfig+0xf8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d003      	beq.n	8001e80 <TIM_Base_SetConfig+0x38>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a32      	ldr	r2, [pc, #200]	@ (8001f44 <TIM_Base_SetConfig+0xfc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d108      	bne.n	8001e92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a28      	ldr	r2, [pc, #160]	@ (8001f38 <TIM_Base_SetConfig+0xf0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01b      	beq.n	8001ed2 <TIM_Base_SetConfig+0x8a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea0:	d017      	beq.n	8001ed2 <TIM_Base_SetConfig+0x8a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a25      	ldr	r2, [pc, #148]	@ (8001f3c <TIM_Base_SetConfig+0xf4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <TIM_Base_SetConfig+0x8a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a24      	ldr	r2, [pc, #144]	@ (8001f40 <TIM_Base_SetConfig+0xf8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00f      	beq.n	8001ed2 <TIM_Base_SetConfig+0x8a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a23      	ldr	r2, [pc, #140]	@ (8001f44 <TIM_Base_SetConfig+0xfc>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00b      	beq.n	8001ed2 <TIM_Base_SetConfig+0x8a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a22      	ldr	r2, [pc, #136]	@ (8001f48 <TIM_Base_SetConfig+0x100>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <TIM_Base_SetConfig+0x8a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a21      	ldr	r2, [pc, #132]	@ (8001f4c <TIM_Base_SetConfig+0x104>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d003      	beq.n	8001ed2 <TIM_Base_SetConfig+0x8a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a20      	ldr	r2, [pc, #128]	@ (8001f50 <TIM_Base_SetConfig+0x108>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d108      	bne.n	8001ee4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a0c      	ldr	r2, [pc, #48]	@ (8001f38 <TIM_Base_SetConfig+0xf0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d103      	bne.n	8001f12 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f043 0204 	orr.w	r2, r3, #4
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	601a      	str	r2, [r3, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40010000 	.word	0x40010000
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40000800 	.word	0x40000800
 8001f44:	40000c00 	.word	0x40000c00
 8001f48:	40014000 	.word	0x40014000
 8001f4c:	40014400 	.word	0x40014400
 8001f50:	40014800 	.word	0x40014800

08001f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b087      	sub	sp, #28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	f023 0201 	bic.w	r2, r3, #1
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f023 030a 	bic.w	r3, r3, #10
 8001f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	621a      	str	r2, [r3, #32]
}
 8001fa6:	bf00      	nop
 8001fa8:	371c      	adds	r7, #28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b087      	sub	sp, #28
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f023 0210 	bic.w	r2, r3, #16
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001fdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	031b      	lsls	r3, r3, #12
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001fee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	621a      	str	r2, [r3, #32]
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	f043 0307 	orr.w	r3, r3, #7
 8002034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	609a      	str	r2, [r3, #8]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	021a      	lsls	r2, r3, #8
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	431a      	orrs	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	4313      	orrs	r3, r2
 8002074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	609a      	str	r2, [r3, #8]
}
 800207c:	bf00      	nop
 800207e:	371c      	adds	r7, #28
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800209c:	2302      	movs	r3, #2
 800209e:	e050      	b.n	8002142 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1c      	ldr	r2, [pc, #112]	@ (8002150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d018      	beq.n	8002116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ec:	d013      	beq.n	8002116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a18      	ldr	r2, [pc, #96]	@ (8002154 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00e      	beq.n	8002116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a16      	ldr	r2, [pc, #88]	@ (8002158 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d009      	beq.n	8002116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a15      	ldr	r2, [pc, #84]	@ (800215c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d004      	beq.n	8002116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a13      	ldr	r2, [pc, #76]	@ (8002160 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d10c      	bne.n	8002130 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800211c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	4313      	orrs	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40010000 	.word	0x40010000
 8002154:	40000400 	.word	0x40000400
 8002158:	40000800 	.word	0x40000800
 800215c:	40000c00 	.word	0x40000c00
 8002160:	40014000 	.word	0x40014000

08002164 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <delay_Us>:
 *       for precise timing.
 *
 * @warning Delay accuracy is affected by compiler optimization and CPU speed.
 *****************************************************************************/
void delay_Us(int time)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < time; i++)
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e00c      	b.n	80021b4 <delay_Us+0x28>
		{
			for(int j = 0; j < 3; j++)
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	e003      	b.n	80021a8 <delay_Us+0x1c>
				__asm__("nop");
 80021a0:	bf00      	nop
			for(int j = 0; j < 3; j++)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3301      	adds	r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	ddf8      	ble.n	80021a0 <delay_Us+0x14>
	for(int i = 0; i < time; i++)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3301      	adds	r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	dbee      	blt.n	800219a <delay_Us+0xe>
		}
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <TM1637_Start>:
 * @note Must be called before sending data to TM1637.
 *
 * @see TM1637_Stop(), TM1637_WriteByte()
 *****************************************************************************/
void TM1637_Start (void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0

	CLK_HIGH();
 80021d0:	2201      	movs	r2, #1
 80021d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021d6:	480a      	ldr	r0, [pc, #40]	@ (8002200 <TM1637_Start+0x34>)
 80021d8:	f7fe ff14 	bl	8001004 <HAL_GPIO_WritePin>
	DATA_HIGH();
 80021dc:	2201      	movs	r2, #1
 80021de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021e2:	4807      	ldr	r0, [pc, #28]	@ (8002200 <TM1637_Start+0x34>)
 80021e4:	f7fe ff0e 	bl	8001004 <HAL_GPIO_WritePin>
	delay_Us(2);
 80021e8:	2002      	movs	r0, #2
 80021ea:	f7ff ffcf 	bl	800218c <delay_Us>
	DATA_LOW();
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021f4:	4802      	ldr	r0, [pc, #8]	@ (8002200 <TM1637_Start+0x34>)
 80021f6:	f7fe ff05 	bl	8001004 <HAL_GPIO_WritePin>
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40020400 	.word	0x40020400

08002204 <TM1637_Stop>:
 * @note Must be called after completing any TM1637 data transmission.
 *
 * @see TM1637_Start(), TM1637_WriteByte()
 *****************************************************************************/
void TM1637_Stop (void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	CLK_LOW();
 8002208:	2200      	movs	r2, #0
 800220a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800220e:	4810      	ldr	r0, [pc, #64]	@ (8002250 <TM1637_Stop+0x4c>)
 8002210:	f7fe fef8 	bl	8001004 <HAL_GPIO_WritePin>
	delay_Us(2);
 8002214:	2002      	movs	r0, #2
 8002216:	f7ff ffb9 	bl	800218c <delay_Us>
	DATA_LOW();
 800221a:	2200      	movs	r2, #0
 800221c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002220:	480b      	ldr	r0, [pc, #44]	@ (8002250 <TM1637_Stop+0x4c>)
 8002222:	f7fe feef 	bl	8001004 <HAL_GPIO_WritePin>
	delay_Us(2);
 8002226:	2002      	movs	r0, #2
 8002228:	f7ff ffb0 	bl	800218c <delay_Us>
	CLK_HIGH();
 800222c:	2201      	movs	r2, #1
 800222e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002232:	4807      	ldr	r0, [pc, #28]	@ (8002250 <TM1637_Stop+0x4c>)
 8002234:	f7fe fee6 	bl	8001004 <HAL_GPIO_WritePin>
	delay_Us(2);
 8002238:	2002      	movs	r0, #2
 800223a:	f7ff ffa7 	bl	800218c <delay_Us>
	DATA_HIGH();
 800223e:	2201      	movs	r2, #1
 8002240:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002244:	4802      	ldr	r0, [pc, #8]	@ (8002250 <TM1637_Stop+0x4c>)
 8002246:	f7fe fedd 	bl	8001004 <HAL_GPIO_WritePin>
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40020400 	.word	0x40020400

08002254 <TM1637_WaitForAck>:
 * @warning TM1637 does not return a readable ACK signal on all boards.
 *
 * @see TM1637_WriteByte()
 *****************************************************************************/
void TM1637_WaitForAck (void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
	CLK_LOW();
 8002258:	2200      	movs	r2, #0
 800225a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800225e:	480b      	ldr	r0, [pc, #44]	@ (800228c <TM1637_WaitForAck+0x38>)
 8002260:	f7fe fed0 	bl	8001004 <HAL_GPIO_WritePin>
	delay_Us(5); // After the falling edge of the eighth clock delay 5us
 8002264:	2005      	movs	r0, #5
 8002266:	f7ff ff91 	bl	800218c <delay_Us>
	              // ACK signals the beginning of judgment
	CLK_HIGH();
 800226a:	2201      	movs	r2, #1
 800226c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002270:	4806      	ldr	r0, [pc, #24]	@ (800228c <TM1637_WaitForAck+0x38>)
 8002272:	f7fe fec7 	bl	8001004 <HAL_GPIO_WritePin>
	delay_Us(2);
 8002276:	2002      	movs	r0, #2
 8002278:	f7ff ff88 	bl	800218c <delay_Us>
	CLK_LOW();
 800227c:	2200      	movs	r2, #0
 800227e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002282:	4802      	ldr	r0, [pc, #8]	@ (800228c <TM1637_WaitForAck+0x38>)
 8002284:	f7fe febe 	bl	8001004 <HAL_GPIO_WritePin>
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40020400 	.word	0x40020400

08002290 <TM1637_WriteByte>:
 * @note Called in sequences to send data or commands to TM1637.
 *
 * @see TM1637_Start(), TM1637_WaitForAck()
 *****************************************************************************/
void TM1637_WriteByte (uint8_t byte)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
	int i;
	for (i = 0; i<8; i++)
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	e029      	b.n	80022f4 <TM1637_WriteByte+0x64>
	{
		CLK_LOW();
 80022a0:	2200      	movs	r2, #0
 80022a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022a6:	4817      	ldr	r0, [pc, #92]	@ (8002304 <TM1637_WriteByte+0x74>)
 80022a8:	f7fe feac 	bl	8001004 <HAL_GPIO_WritePin>
		if (byte & 0x01) // low front
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <TM1637_WriteByte+0x34>
		{
			DATA_HIGH();
 80022b6:	2201      	movs	r2, #1
 80022b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022bc:	4811      	ldr	r0, [pc, #68]	@ (8002304 <TM1637_WriteByte+0x74>)
 80022be:	f7fe fea1 	bl	8001004 <HAL_GPIO_WritePin>
 80022c2:	e005      	b.n	80022d0 <TM1637_WriteByte+0x40>
		}
		else
		{
			DATA_LOW();
 80022c4:	2200      	movs	r2, #0
 80022c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022ca:	480e      	ldr	r0, [pc, #56]	@ (8002304 <TM1637_WriteByte+0x74>)
 80022cc:	f7fe fe9a 	bl	8001004 <HAL_GPIO_WritePin>
		}
		delay_Us(3);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f7ff ff5b 	bl	800218c <delay_Us>
		byte = byte >> 1;
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	085b      	lsrs	r3, r3, #1
 80022da:	71fb      	strb	r3, [r7, #7]
		CLK_HIGH();
 80022dc:	2201      	movs	r2, #1
 80022de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022e2:	4808      	ldr	r0, [pc, #32]	@ (8002304 <TM1637_WriteByte+0x74>)
 80022e4:	f7fe fe8e 	bl	8001004 <HAL_GPIO_WritePin>
		delay_Us(3);
 80022e8:	2003      	movs	r0, #3
 80022ea:	f7ff ff4f 	bl	800218c <delay_Us>
	for (i = 0; i<8; i++)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3301      	adds	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b07      	cmp	r3, #7
 80022f8:	ddd2      	ble.n	80022a0 <TM1637_WriteByte+0x10>
	}
}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40020400 	.word	0x40020400

08002308 <TM1637_Convert_To_Digits>:
 * @note Used before sending data to TM1637 to prepare digit format.
 *
 * @see TM1637_WriteData()
 *****************************************************************************/
void TM1637_Convert_To_Digits(uint32_t values, uint8_t digits[4])
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
    uint32_t minutes = values / 60;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a21      	ldr	r2, [pc, #132]	@ (800239c <TM1637_Convert_To_Digits+0x94>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	60fb      	str	r3, [r7, #12]
    uint32_t seconds = values % 60;
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <TM1637_Convert_To_Digits+0x94>)
 8002322:	fba3 1302 	umull	r1, r3, r3, r2
 8002326:	0959      	lsrs	r1, r3, #5
 8002328:	460b      	mov	r3, r1
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	1a5b      	subs	r3, r3, r1
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	60bb      	str	r3, [r7, #8]

    digits[0] = minutes / 10;        /* Tens place of minutes*/
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a1a      	ldr	r2, [pc, #104]	@ (80023a0 <TM1637_Convert_To_Digits+0x98>)
 8002338:	fba2 2303 	umull	r2, r3, r2, r3
 800233c:	08db      	lsrs	r3, r3, #3
 800233e:	b2da      	uxtb	r2, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	701a      	strb	r2, [r3, #0]
    digits[1] = minutes % 10;        /* Ones place of minutes*/
 8002344:	68f9      	ldr	r1, [r7, #12]
 8002346:	4b16      	ldr	r3, [pc, #88]	@ (80023a0 <TM1637_Convert_To_Digits+0x98>)
 8002348:	fba3 2301 	umull	r2, r3, r3, r1
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	1aca      	subs	r2, r1, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	3301      	adds	r3, #1
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]
    digits[2] = seconds / 10;        /* Tens place of seconds*/
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4a0f      	ldr	r2, [pc, #60]	@ (80023a0 <TM1637_Convert_To_Digits+0x98>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	08da      	lsrs	r2, r3, #3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	3302      	adds	r3, #2
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]
    digits[3] = seconds % 10;        /* Ones place of seconds*/
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <TM1637_Convert_To_Digits+0x98>)
 8002376:	fba3 2301 	umull	r2, r3, r3, r1
 800237a:	08da      	lsrs	r2, r3, #3
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	1aca      	subs	r2, r1, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	3303      	adds	r3, #3
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	88888889 	.word	0x88888889
 80023a0:	cccccccd 	.word	0xcccccccd

080023a4 <TM1637_Update_Data_Dots>:
 * @see TM1637_Write(), TM1637_WriteDisplayCommand()
 *****************************************************************************/
void TM1637_Update_Data_Dots(uint8_t *displayvalue, uint8_t status);

void TM1637_Update_Data_Dots(uint8_t *displayvalue, uint8_t status)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	70fb      	strb	r3, [r7, #3]
	TM1637_Start();
 80023b0:	f7ff ff0c 	bl	80021cc <TM1637_Start>
	TM1637_WriteByte((DATA_COMMAND|WRITE_DATA_TO_DISPLAY|AUTOMATIC_ADDRESS_ADD|NORMAL_MODE));
 80023b4:	2040      	movs	r0, #64	@ 0x40
 80023b6:	f7ff ff6b 	bl	8002290 <TM1637_WriteByte>
	TM1637_WaitForAck();
 80023ba:	f7ff ff4b 	bl	8002254 <TM1637_WaitForAck>
	TM1637_Stop();
 80023be:	f7ff ff21 	bl	8002204 <TM1637_Stop>

	if(status)
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d021      	beq.n	800240c <TM1637_Update_Data_Dots+0x68>
	{
		TM1637_Start();
 80023c8:	f7ff ff00 	bl	80021cc <TM1637_Start>
		TM1637_WriteByte(DISPLAY_1_REGISTER_ADDRESS);
 80023cc:	20c0      	movs	r0, #192	@ 0xc0
 80023ce:	f7ff ff5f 	bl	8002290 <TM1637_WriteByte>
		TM1637_WaitForAck();
 80023d2:	f7ff ff3f 	bl	8002254 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e011      	b.n	8002400 <TM1637_Update_Data_Dots+0x5c>
		{
			TM1637_WriteByte((tm1637digitpattern[displayvalue[i]] | tm1637digitpattern[11]));
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002464 <TM1637_Update_Data_Dots+0xc0>)
 80023e8:	5c9b      	ldrb	r3, [r3, r2]
 80023ea:	2280      	movs	r2, #128	@ 0x80
 80023ec:	4313      	orrs	r3, r2
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff4d 	bl	8002290 <TM1637_WriteByte>
			TM1637_WaitForAck();
 80023f6:	f7ff ff2d 	bl	8002254 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	3301      	adds	r3, #1
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b05      	cmp	r3, #5
 8002404:	ddea      	ble.n	80023dc <TM1637_Update_Data_Dots+0x38>
		}
		TM1637_Stop();
 8002406:	f7ff fefd 	bl	8002204 <TM1637_Stop>
 800240a:	e01d      	b.n	8002448 <TM1637_Update_Data_Dots+0xa4>
	}
	else
	{
		TM1637_Start();
 800240c:	f7ff fede 	bl	80021cc <TM1637_Start>
		TM1637_WriteByte(DISPLAY_1_REGISTER_ADDRESS);
 8002410:	20c0      	movs	r0, #192	@ 0xc0
 8002412:	f7ff ff3d 	bl	8002290 <TM1637_WriteByte>
		TM1637_WaitForAck();
 8002416:	f7ff ff1d 	bl	8002254 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	e00e      	b.n	800243e <TM1637_Update_Data_Dots+0x9a>
		{
			TM1637_WriteByte(tm1637digitpattern[displayvalue[i]]);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <TM1637_Update_Data_Dots+0xc0>)
 800242c:	5c9b      	ldrb	r3, [r3, r2]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff2e 	bl	8002290 <TM1637_WriteByte>
			TM1637_WaitForAck();
 8002434:	f7ff ff0e 	bl	8002254 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	3301      	adds	r3, #1
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b05      	cmp	r3, #5
 8002442:	dded      	ble.n	8002420 <TM1637_Update_Data_Dots+0x7c>
		}
		TM1637_Stop();
 8002444:	f7ff fede 	bl	8002204 <TM1637_Stop>
	}

	TM1637_Start();
 8002448:	f7ff fec0 	bl	80021cc <TM1637_Start>
	TM1637_WriteByte((DISPLAY_COMMAND|PULSE_WIDTH_SET_04_16|DISPLAY_ON));
 800244c:	208a      	movs	r0, #138	@ 0x8a
 800244e:	f7ff ff1f 	bl	8002290 <TM1637_WriteByte>
	TM1637_WaitForAck();
 8002452:	f7ff feff 	bl	8002254 <TM1637_WaitForAck>
	TM1637_Stop();
 8002456:	f7ff fed5 	bl	8002204 <TM1637_Stop>
}
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	080029b0 	.word	0x080029b0

08002468 <buttonControlDebounce>:
 *          handle timer errors through Error_Handler().
 *
 * @see HAL_GPIO_ReadPin(), HAL_TIM_Base_Start_IT(), HAL_TIM_Base_Stop_IT()
 *****************************************************************************/
void buttonControlDebounce(void)
{
 8002468:	b5b0      	push	{r4, r5, r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
	static uintmax_t glbLastDebounceTime = 0;  /* The Last Time The Output Pin Was Toggled */
	static uint8_t glbButtonState;            /* The Current Reading From The Input Pin */
	static uint8_t glbLastButtonState = 0;    /* The previous reading from The Input Pin */

	uint8_t tempButtonReading = CONTROLBUTTON_READ(); /* read the state of the switch into a local variable */
 800246e:	2101      	movs	r1, #1
 8002470:	483c      	ldr	r0, [pc, #240]	@ (8002564 <buttonControlDebounce+0xfc>)
 8002472:	f7fe fdaf 	bl	8000fd4 <HAL_GPIO_ReadPin>
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
	/** GPIO_PIN_0 is the control button used to start/stop the Pomodoro timer **/

    if(tempButtonReading != glbLastButtonState) /* If the switch changed, due to noise or pressing */
 800247a:	4b3b      	ldr	r3, [pc, #236]	@ (8002568 <buttonControlDebounce+0x100>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	79fa      	ldrb	r2, [r7, #7]
 8002480:	429a      	cmp	r2, r3
 8002482:	d005      	beq.n	8002490 <buttonControlDebounce+0x28>
    {
        glbLastDebounceTime = glbSysTicks; /* reset the debouncing timer */
 8002484:	4b39      	ldr	r3, [pc, #228]	@ (800256c <buttonControlDebounce+0x104>)
 8002486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248a:	4939      	ldr	r1, [pc, #228]	@ (8002570 <buttonControlDebounce+0x108>)
 800248c:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if((glbSysTicks - glbLastDebounceTime) > DEBOUNCEDELAY)
 8002490:	4b36      	ldr	r3, [pc, #216]	@ (800256c <buttonControlDebounce+0x104>)
 8002492:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002496:	4b36      	ldr	r3, [pc, #216]	@ (8002570 <buttonControlDebounce+0x108>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	1a84      	subs	r4, r0, r2
 800249e:	eb61 0503 	sbc.w	r5, r1, r3
 80024a2:	2c15      	cmp	r4, #21
 80024a4:	f175 0300 	sbcs.w	r3, r5, #0
 80024a8:	d355      	bcc.n	8002556 <buttonControlDebounce+0xee>
    {
        if(tempButtonReading != glbButtonState)
 80024aa:	4b32      	ldr	r3, [pc, #200]	@ (8002574 <buttonControlDebounce+0x10c>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	79fa      	ldrb	r2, [r7, #7]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d050      	beq.n	8002556 <buttonControlDebounce+0xee>
        {
            glbButtonState = tempButtonReading;
 80024b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002574 <buttonControlDebounce+0x10c>)
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	7013      	strb	r3, [r2, #0]
            if(glbButtonState == GPIO_PIN_RESET) /** Button is pressed **/
 80024ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002574 <buttonControlDebounce+0x10c>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d149      	bne.n	8002556 <buttonControlDebounce+0xee>
            {
            	if(glbTimerState == false)
 80024c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002578 <buttonControlDebounce+0x110>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	f083 0301 	eor.w	r3, r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01f      	beq.n	8002510 <buttonControlDebounce+0xa8>
            	{
            		/* Start counting seconds*/
                    glbSecondCounter = 0;
 80024d0:	492a      	ldr	r1, [pc, #168]	@ (800257c <buttonControlDebounce+0x114>)
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	e9c1 2300 	strd	r2, r3, [r1]

                    /*Reset Mode counter*/
                    glbModeSelection = PomodoroFunctions_PomodoroMode;
 80024de:	4b28      	ldr	r3, [pc, #160]	@ (8002580 <buttonControlDebounce+0x118>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]

                    /* Reset Time selection*/
                    glbCurrentModeTime = POMODOROMODE_TIME;
 80024e4:	4927      	ldr	r1, [pc, #156]	@ (8002584 <buttonControlDebounce+0x11c>)
 80024e6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	e9c1 2300 	strd	r2, r3, [r1]

                    /*Reset Pomodoro Cycles*/
                    glbPomodoroCycles = 0;
 80024f2:	4b25      	ldr	r3, [pc, #148]	@ (8002588 <buttonControlDebounce+0x120>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]

            		glbTimerState = true;
 80024f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002578 <buttonControlDebounce+0x110>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
            		/* Start The timer */
            	    if (TIMER_ON() != HAL_OK)
 80024fe:	4823      	ldr	r0, [pc, #140]	@ (800258c <buttonControlDebounce+0x124>)
 8002500:	f7ff fa28 	bl	8001954 <HAL_TIM_Base_Start_IT>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d025      	beq.n	8002556 <buttonControlDebounce+0xee>
            		{
            		  /* Starting Error */
            		  Error_Handler();
 800250a:	f7fe f955 	bl	80007b8 <Error_Handler>
 800250e:	e022      	b.n	8002556 <buttonControlDebounce+0xee>
            		}
            	}
            	else if(glbTimerState == true)
 8002510:	4b19      	ldr	r3, [pc, #100]	@ (8002578 <buttonControlDebounce+0x110>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01e      	beq.n	8002556 <buttonControlDebounce+0xee>
				{
            		/* Start counting seconds*/
                    glbSecondCounter = 0;
 8002518:	4918      	ldr	r1, [pc, #96]	@ (800257c <buttonControlDebounce+0x114>)
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9c1 2300 	strd	r2, r3, [r1]

                    /*Reset Mode counter*/
                    glbModeSelection = PomodoroFunctions_PomodoroMode;
 8002526:	4b16      	ldr	r3, [pc, #88]	@ (8002580 <buttonControlDebounce+0x118>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]

                    /* Reset Time selection*/
                    glbCurrentModeTime = POMODOROMODE_TIME;
 800252c:	4915      	ldr	r1, [pc, #84]	@ (8002584 <buttonControlDebounce+0x11c>)
 800252e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9c1 2300 	strd	r2, r3, [r1]

                    /*Reset Pomodoro Cycles*/
                    glbPomodoroCycles = 0;
 800253a:	4b13      	ldr	r3, [pc, #76]	@ (8002588 <buttonControlDebounce+0x120>)
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]

            		glbTimerState = false;
 8002540:	4b0d      	ldr	r3, [pc, #52]	@ (8002578 <buttonControlDebounce+0x110>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
                	/* Stop The timer */
                   if (TIMER_OFF() != HAL_OK)
 8002546:	4811      	ldr	r0, [pc, #68]	@ (800258c <buttonControlDebounce+0x124>)
 8002548:	f7ff fa66 	bl	8001a18 <HAL_TIM_Base_Stop_IT>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <buttonControlDebounce+0xee>
                   {
                	   /* Stopping Error */
                	   Error_Handler();
 8002552:	f7fe f931 	bl	80007b8 <Error_Handler>
                   }
				}
            }
        }
    }
    glbLastButtonState = tempButtonReading; /** Store current reading for comparison in next cycle **/
 8002556:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <buttonControlDebounce+0x100>)
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	7013      	strb	r3, [r2, #0]
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bdb0      	pop	{r4, r5, r7, pc}
 8002564:	40020000 	.word	0x40020000
 8002568:	200000a0 	.word	0x200000a0
 800256c:	20000088 	.word	0x20000088
 8002570:	200000a8 	.word	0x200000a8
 8002574:	200000b0 	.word	0x200000b0
 8002578:	2000009d 	.word	0x2000009d
 800257c:	20000080 	.word	0x20000080
 8002580:	2000009e 	.word	0x2000009e
 8002584:	20000010 	.word	0x20000010
 8002588:	2000009f 	.word	0x2000009f
 800258c:	20000034 	.word	0x20000034

08002590 <buttonFunctionDebounce>:
 *          and switches to a Long Break automatically.
 *
 * @see HAL_GPIO_ReadPin()
 *****************************************************************************/
void buttonFunctionDebounce(void)
{
 8002590:	b5b0      	push	{r4, r5, r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
	static uintmax_t glbLastDebounceTime = 0;  /* The Last Time The Output Pin Was Toggled */
	static uint8_t glbButtonState;            /* The Current Reading From The Input Pin */
	static uint8_t glbLastButtonState = 0;    /* The previous reading from The Input Pin */

	uint8_t tempButtonReading = FUNCTIONBUTTON_READ(); /* read the state of the switch into a local variable */
 8002596:	2102      	movs	r1, #2
 8002598:	4840      	ldr	r0, [pc, #256]	@ (800269c <buttonFunctionDebounce+0x10c>)
 800259a:	f7fe fd1b 	bl	8000fd4 <HAL_GPIO_ReadPin>
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
	/** GPIO_PIN_1 is the function button used to switch between Pomodoro modes **/

    if(tempButtonReading != glbLastButtonState) /* If the switch changed, due to noise or pressing */
 80025a2:	4b3f      	ldr	r3, [pc, #252]	@ (80026a0 <buttonFunctionDebounce+0x110>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	79fa      	ldrb	r2, [r7, #7]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d005      	beq.n	80025b8 <buttonFunctionDebounce+0x28>
    {
        glbLastDebounceTime = glbSysTicks; /* reset the debouncing timer */
 80025ac:	4b3d      	ldr	r3, [pc, #244]	@ (80026a4 <buttonFunctionDebounce+0x114>)
 80025ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b2:	493d      	ldr	r1, [pc, #244]	@ (80026a8 <buttonFunctionDebounce+0x118>)
 80025b4:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if((glbSysTicks - glbLastDebounceTime) > DEBOUNCEDELAY)
 80025b8:	4b3a      	ldr	r3, [pc, #232]	@ (80026a4 <buttonFunctionDebounce+0x114>)
 80025ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025be:	4b3a      	ldr	r3, [pc, #232]	@ (80026a8 <buttonFunctionDebounce+0x118>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	1a84      	subs	r4, r0, r2
 80025c6:	eb61 0503 	sbc.w	r5, r1, r3
 80025ca:	2c15      	cmp	r4, #21
 80025cc:	f175 0300 	sbcs.w	r3, r5, #0
 80025d0:	d35c      	bcc.n	800268c <buttonFunctionDebounce+0xfc>
    {
        if(tempButtonReading != glbButtonState)
 80025d2:	4b36      	ldr	r3, [pc, #216]	@ (80026ac <buttonFunctionDebounce+0x11c>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	79fa      	ldrb	r2, [r7, #7]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d057      	beq.n	800268c <buttonFunctionDebounce+0xfc>
        {
            glbButtonState = tempButtonReading;
 80025dc:	4a33      	ldr	r2, [pc, #204]	@ (80026ac <buttonFunctionDebounce+0x11c>)
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	7013      	strb	r3, [r2, #0]
            if(glbButtonState == GPIO_PIN_RESET) /** Button is pressed **/
 80025e2:	4b32      	ldr	r3, [pc, #200]	@ (80026ac <buttonFunctionDebounce+0x11c>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d150      	bne.n	800268c <buttonFunctionDebounce+0xfc>
            {
            	glbSecondCounter = 0;
 80025ea:	4931      	ldr	r1, [pc, #196]	@ (80026b0 <buttonFunctionDebounce+0x120>)
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	e9c1 2300 	strd	r2, r3, [r1]
            	if(glbModeSelection == PomodoroFunctions_PomodoroMode)
 80025f8:	4b2e      	ldr	r3, [pc, #184]	@ (80026b4 <buttonFunctionDebounce+0x124>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d110      	bne.n	8002622 <buttonFunctionDebounce+0x92>
            	{
            		glbModeSelection = PomodoroFunctions_ShortBreak;
 8002600:	4b2c      	ldr	r3, [pc, #176]	@ (80026b4 <buttonFunctionDebounce+0x124>)
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
            		glbCurrentModeTime = SHORTBREAK_TIME;
 8002606:	492c      	ldr	r1, [pc, #176]	@ (80026b8 <buttonFunctionDebounce+0x128>)
 8002608:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	e9c1 2300 	strd	r2, r3, [r1]
            		glbPomodoroCycles++;
 8002614:	4b29      	ldr	r3, [pc, #164]	@ (80026bc <buttonFunctionDebounce+0x12c>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	b2da      	uxtb	r2, r3
 800261c:	4b27      	ldr	r3, [pc, #156]	@ (80026bc <buttonFunctionDebounce+0x12c>)
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	e034      	b.n	800268c <buttonFunctionDebounce+0xfc>
            	}
            	else if(glbModeSelection == PomodoroFunctions_ShortBreak)
 8002622:	4b24      	ldr	r3, [pc, #144]	@ (80026b4 <buttonFunctionDebounce+0x124>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d122      	bne.n	8002670 <buttonFunctionDebounce+0xe0>
            	{
            		glbPomodoroCycles++;
 800262a:	4b24      	ldr	r3, [pc, #144]	@ (80026bc <buttonFunctionDebounce+0x12c>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	3301      	adds	r3, #1
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4b22      	ldr	r3, [pc, #136]	@ (80026bc <buttonFunctionDebounce+0x12c>)
 8002634:	701a      	strb	r2, [r3, #0]
            		if(glbPomodoroCycles >= NO_OF_CYCLES)
 8002636:	4b21      	ldr	r3, [pc, #132]	@ (80026bc <buttonFunctionDebounce+0x12c>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b04      	cmp	r3, #4
 800263c:	d90d      	bls.n	800265a <buttonFunctionDebounce+0xca>
            		{
            			glbModeSelection = PomodoroFunctions_LongBreak;
 800263e:	4b1d      	ldr	r3, [pc, #116]	@ (80026b4 <buttonFunctionDebounce+0x124>)
 8002640:	2202      	movs	r2, #2
 8002642:	701a      	strb	r2, [r3, #0]
            			glbCurrentModeTime = LONGBREAK_TIME;
 8002644:	491c      	ldr	r1, [pc, #112]	@ (80026b8 <buttonFunctionDebounce+0x128>)
 8002646:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	e9c1 2300 	strd	r2, r3, [r1]
            			glbPomodoroCycles = 0;
 8002652:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <buttonFunctionDebounce+0x12c>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e018      	b.n	800268c <buttonFunctionDebounce+0xfc>
            		}
            		else
            		{
            			glbModeSelection = PomodoroFunctions_PomodoroMode;
 800265a:	4b16      	ldr	r3, [pc, #88]	@ (80026b4 <buttonFunctionDebounce+0x124>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
            			glbCurrentModeTime = POMODOROMODE_TIME;
 8002660:	4915      	ldr	r1, [pc, #84]	@ (80026b8 <buttonFunctionDebounce+0x128>)
 8002662:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9c1 2300 	strd	r2, r3, [r1]
 800266e:	e00d      	b.n	800268c <buttonFunctionDebounce+0xfc>
            		}
            	}
            	else if(glbModeSelection == PomodoroFunctions_LongBreak)
 8002670:	4b10      	ldr	r3, [pc, #64]	@ (80026b4 <buttonFunctionDebounce+0x124>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d109      	bne.n	800268c <buttonFunctionDebounce+0xfc>
            	{
            		glbModeSelection = PomodoroFunctions_PomodoroMode;
 8002678:	4b0e      	ldr	r3, [pc, #56]	@ (80026b4 <buttonFunctionDebounce+0x124>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
            		glbCurrentModeTime = POMODOROMODE_TIME;
 800267e:	490e      	ldr	r1, [pc, #56]	@ (80026b8 <buttonFunctionDebounce+0x128>)
 8002680:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	e9c1 2300 	strd	r2, r3, [r1]
            	}
            }
        }
    }
    glbLastButtonState = tempButtonReading; /** Store current reading for comparison in next cycle **/
 800268c:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <buttonFunctionDebounce+0x110>)
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	7013      	strb	r3, [r2, #0]
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bdb0      	pop	{r4, r5, r7, pc}
 800269a:	bf00      	nop
 800269c:	40020000 	.word	0x40020000
 80026a0:	200000b1 	.word	0x200000b1
 80026a4:	20000088 	.word	0x20000088
 80026a8:	200000b8 	.word	0x200000b8
 80026ac:	200000c0 	.word	0x200000c0
 80026b0:	20000080 	.word	0x20000080
 80026b4:	2000009e 	.word	0x2000009e
 80026b8:	20000010 	.word	0x20000010
 80026bc:	2000009f 	.word	0x2000009f

080026c0 <updateDisplay>:
 * @warning Be sure that the display is initialized before calling this.
 *
 * @see TM1637_Convert_To_Digits(), TM1637_Update_Data_Dots()
 *****************************************************************************/
void updateDisplay(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	if(glbLastSecondsCount != glbSecondCounter)
 80026c4:	4b79      	ldr	r3, [pc, #484]	@ (80028ac <updateDisplay+0x1ec>)
 80026c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ca:	4b79      	ldr	r3, [pc, #484]	@ (80028b0 <updateDisplay+0x1f0>)
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	4299      	cmp	r1, r3
 80026d2:	bf08      	it	eq
 80026d4:	4290      	cmpeq	r0, r2
 80026d6:	f000 80e7 	beq.w	80028a8 <updateDisplay+0x1e8>
	{
		/** Time has changed, so update the display **/
		if(glbSecondCounter == glbCurrentModeTime)
 80026da:	4b75      	ldr	r3, [pc, #468]	@ (80028b0 <updateDisplay+0x1f0>)
 80026dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026e0:	4b74      	ldr	r3, [pc, #464]	@ (80028b4 <updateDisplay+0x1f4>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	4299      	cmp	r1, r3
 80026e8:	bf08      	it	eq
 80026ea:	4290      	cmpeq	r0, r2
 80026ec:	f040 80b4 	bne.w	8002858 <updateDisplay+0x198>
		{
        	glbSecondCounter = 0;
 80026f0:	496f      	ldr	r1, [pc, #444]	@ (80028b0 <updateDisplay+0x1f0>)
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	e9c1 2300 	strd	r2, r3, [r1]
        	if(glbModeSelection == PomodoroFunctions_PomodoroMode)
 80026fe:	4b6e      	ldr	r3, [pc, #440]	@ (80028b8 <updateDisplay+0x1f8>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d11f      	bne.n	8002746 <updateDisplay+0x86>
        	{
        		glbModeSelection = PomodoroFunctions_ShortBreak;
 8002706:	4b6c      	ldr	r3, [pc, #432]	@ (80028b8 <updateDisplay+0x1f8>)
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]
        		glbCurrentModeTime = SHORTBREAK_TIME;
 800270c:	4969      	ldr	r1, [pc, #420]	@ (80028b4 <updateDisplay+0x1f4>)
 800270e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	e9c1 2300 	strd	r2, r3, [r1]
        		glbPomodoroCycles++;
 800271a:	4b68      	ldr	r3, [pc, #416]	@ (80028bc <updateDisplay+0x1fc>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	3301      	adds	r3, #1
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4b66      	ldr	r3, [pc, #408]	@ (80028bc <updateDisplay+0x1fc>)
 8002724:	701a      	strb	r2, [r3, #0]
        		BUZZER_ON();
 8002726:	2200      	movs	r2, #0
 8002728:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800272c:	4864      	ldr	r0, [pc, #400]	@ (80028c0 <updateDisplay+0x200>)
 800272e:	f7fe fc69 	bl	8001004 <HAL_GPIO_WritePin>
        		APP_DELAY(50);
 8002732:	2032      	movs	r0, #50	@ 0x32
 8002734:	f7fe f994 	bl	8000a60 <HAL_Delay>
        		BUZZER_OFF();
 8002738:	2201      	movs	r2, #1
 800273a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800273e:	4860      	ldr	r0, [pc, #384]	@ (80028c0 <updateDisplay+0x200>)
 8002740:	f7fe fc60 	bl	8001004 <HAL_GPIO_WritePin>
 8002744:	e088      	b.n	8002858 <updateDisplay+0x198>
        	}
        	else if(glbModeSelection == PomodoroFunctions_ShortBreak)
 8002746:	4b5c      	ldr	r3, [pc, #368]	@ (80028b8 <updateDisplay+0x1f8>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d143      	bne.n	80027d6 <updateDisplay+0x116>
        	{
        		glbPomodoroCycles++;
 800274e:	4b5b      	ldr	r3, [pc, #364]	@ (80028bc <updateDisplay+0x1fc>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	3301      	adds	r3, #1
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4b59      	ldr	r3, [pc, #356]	@ (80028bc <updateDisplay+0x1fc>)
 8002758:	701a      	strb	r2, [r3, #0]
        		if(glbPomodoroCycles >= NO_OF_CYCLES)
 800275a:	4b58      	ldr	r3, [pc, #352]	@ (80028bc <updateDisplay+0x1fc>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b04      	cmp	r3, #4
 8002760:	d90d      	bls.n	800277e <updateDisplay+0xbe>
        		{
        			glbModeSelection = PomodoroFunctions_LongBreak;
 8002762:	4b55      	ldr	r3, [pc, #340]	@ (80028b8 <updateDisplay+0x1f8>)
 8002764:	2202      	movs	r2, #2
 8002766:	701a      	strb	r2, [r3, #0]
        			glbCurrentModeTime = LONGBREAK_TIME;
 8002768:	4952      	ldr	r1, [pc, #328]	@ (80028b4 <updateDisplay+0x1f4>)
 800276a:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	e9c1 2300 	strd	r2, r3, [r1]
        			glbPomodoroCycles = 0;
 8002776:	4b51      	ldr	r3, [pc, #324]	@ (80028bc <updateDisplay+0x1fc>)
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
 800277c:	e009      	b.n	8002792 <updateDisplay+0xd2>
        		}
        		else
        		{
        			glbModeSelection = PomodoroFunctions_PomodoroMode;
 800277e:	4b4e      	ldr	r3, [pc, #312]	@ (80028b8 <updateDisplay+0x1f8>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
        			glbCurrentModeTime = POMODOROMODE_TIME;
 8002784:	494b      	ldr	r1, [pc, #300]	@ (80028b4 <updateDisplay+0x1f4>)
 8002786:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	e9c1 2300 	strd	r2, r3, [r1]
        		}
        		BUZZER_ON();
 8002792:	2200      	movs	r2, #0
 8002794:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002798:	4849      	ldr	r0, [pc, #292]	@ (80028c0 <updateDisplay+0x200>)
 800279a:	f7fe fc33 	bl	8001004 <HAL_GPIO_WritePin>
        		APP_DELAY(50);
 800279e:	2032      	movs	r0, #50	@ 0x32
 80027a0:	f7fe f95e 	bl	8000a60 <HAL_Delay>
        		BUZZER_OFF();
 80027a4:	2201      	movs	r2, #1
 80027a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027aa:	4845      	ldr	r0, [pc, #276]	@ (80028c0 <updateDisplay+0x200>)
 80027ac:	f7fe fc2a 	bl	8001004 <HAL_GPIO_WritePin>
        		APP_DELAY(50);
 80027b0:	2032      	movs	r0, #50	@ 0x32
 80027b2:	f7fe f955 	bl	8000a60 <HAL_Delay>
        		BUZZER_ON();
 80027b6:	2200      	movs	r2, #0
 80027b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027bc:	4840      	ldr	r0, [pc, #256]	@ (80028c0 <updateDisplay+0x200>)
 80027be:	f7fe fc21 	bl	8001004 <HAL_GPIO_WritePin>
        		APP_DELAY(50);
 80027c2:	2032      	movs	r0, #50	@ 0x32
 80027c4:	f7fe f94c 	bl	8000a60 <HAL_Delay>
        		BUZZER_OFF();
 80027c8:	2201      	movs	r2, #1
 80027ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027ce:	483c      	ldr	r0, [pc, #240]	@ (80028c0 <updateDisplay+0x200>)
 80027d0:	f7fe fc18 	bl	8001004 <HAL_GPIO_WritePin>
 80027d4:	e040      	b.n	8002858 <updateDisplay+0x198>
        	}
        	else if(glbModeSelection == PomodoroFunctions_LongBreak)
 80027d6:	4b38      	ldr	r3, [pc, #224]	@ (80028b8 <updateDisplay+0x1f8>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d13c      	bne.n	8002858 <updateDisplay+0x198>
        	{
        		glbModeSelection = PomodoroFunctions_PomodoroMode;
 80027de:	4b36      	ldr	r3, [pc, #216]	@ (80028b8 <updateDisplay+0x1f8>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
        		glbCurrentModeTime = POMODOROMODE_TIME;
 80027e4:	4933      	ldr	r1, [pc, #204]	@ (80028b4 <updateDisplay+0x1f4>)
 80027e6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9c1 2300 	strd	r2, r3, [r1]

        		BUZZER_ON();
 80027f2:	2200      	movs	r2, #0
 80027f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027f8:	4831      	ldr	r0, [pc, #196]	@ (80028c0 <updateDisplay+0x200>)
 80027fa:	f7fe fc03 	bl	8001004 <HAL_GPIO_WritePin>
        		APP_DELAY(50);
 80027fe:	2032      	movs	r0, #50	@ 0x32
 8002800:	f7fe f92e 	bl	8000a60 <HAL_Delay>
        		BUZZER_OFF();
 8002804:	2201      	movs	r2, #1
 8002806:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800280a:	482d      	ldr	r0, [pc, #180]	@ (80028c0 <updateDisplay+0x200>)
 800280c:	f7fe fbfa 	bl	8001004 <HAL_GPIO_WritePin>
        		APP_DELAY(50);
 8002810:	2032      	movs	r0, #50	@ 0x32
 8002812:	f7fe f925 	bl	8000a60 <HAL_Delay>
        		BUZZER_ON();
 8002816:	2200      	movs	r2, #0
 8002818:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800281c:	4828      	ldr	r0, [pc, #160]	@ (80028c0 <updateDisplay+0x200>)
 800281e:	f7fe fbf1 	bl	8001004 <HAL_GPIO_WritePin>
        		APP_DELAY(50);
 8002822:	2032      	movs	r0, #50	@ 0x32
 8002824:	f7fe f91c 	bl	8000a60 <HAL_Delay>
        		BUZZER_OFF();
 8002828:	2201      	movs	r2, #1
 800282a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800282e:	4824      	ldr	r0, [pc, #144]	@ (80028c0 <updateDisplay+0x200>)
 8002830:	f7fe fbe8 	bl	8001004 <HAL_GPIO_WritePin>
        		APP_DELAY(50);
 8002834:	2032      	movs	r0, #50	@ 0x32
 8002836:	f7fe f913 	bl	8000a60 <HAL_Delay>
        		BUZZER_ON();
 800283a:	2200      	movs	r2, #0
 800283c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002840:	481f      	ldr	r0, [pc, #124]	@ (80028c0 <updateDisplay+0x200>)
 8002842:	f7fe fbdf 	bl	8001004 <HAL_GPIO_WritePin>
        		APP_DELAY(50);
 8002846:	2032      	movs	r0, #50	@ 0x32
 8002848:	f7fe f90a 	bl	8000a60 <HAL_Delay>
        		BUZZER_OFF();
 800284c:	2201      	movs	r2, #1
 800284e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002852:	481b      	ldr	r0, [pc, #108]	@ (80028c0 <updateDisplay+0x200>)
 8002854:	f7fe fbd6 	bl	8001004 <HAL_GPIO_WritePin>
        	}
		}

		glbLastSecondsCount = glbSecondCounter; /** Update the stored count for future comparison **/
 8002858:	4b15      	ldr	r3, [pc, #84]	@ (80028b0 <updateDisplay+0x1f0>)
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	4913      	ldr	r1, [pc, #76]	@ (80028ac <updateDisplay+0x1ec>)
 8002860:	e9c1 2300 	strd	r2, r3, [r1]
		TM1637_Convert_To_Digits(glbSecondCounter,&displayData[0]); /** Convert seconds to digit format **/
 8002864:	4b12      	ldr	r3, [pc, #72]	@ (80028b0 <updateDisplay+0x1f0>)
 8002866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286a:	4613      	mov	r3, r2
 800286c:	4915      	ldr	r1, [pc, #84]	@ (80028c4 <updateDisplay+0x204>)
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fd4a 	bl	8002308 <TM1637_Convert_To_Digits>

		if(glbLastDotState == true)
 8002874:	4b14      	ldr	r3, [pc, #80]	@ (80028c8 <updateDisplay+0x208>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d007      	beq.n	800288c <updateDisplay+0x1cc>
		{
			glbLastDotState = false;
 800287c:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <updateDisplay+0x208>)
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
			TM1637_Update_Data_Dots(displayData,true); /** Toggle dot ON **/
 8002882:	2101      	movs	r1, #1
 8002884:	480f      	ldr	r0, [pc, #60]	@ (80028c4 <updateDisplay+0x204>)
 8002886:	f7ff fd8d 	bl	80023a4 <TM1637_Update_Data_Dots>
		{
			glbLastDotState = true;
			TM1637_Update_Data_Dots(displayData,false); /** Toggle dot OFF **/
		}
	}
}
 800288a:	e00d      	b.n	80028a8 <updateDisplay+0x1e8>
		else if(glbLastDotState == false)
 800288c:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <updateDisplay+0x208>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	f083 0301 	eor.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <updateDisplay+0x1e8>
			glbLastDotState = true;
 800289a:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <updateDisplay+0x208>)
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
			TM1637_Update_Data_Dots(displayData,false); /** Toggle dot OFF **/
 80028a0:	2100      	movs	r1, #0
 80028a2:	4808      	ldr	r0, [pc, #32]	@ (80028c4 <updateDisplay+0x204>)
 80028a4:	f7ff fd7e 	bl	80023a4 <TM1637_Update_Data_Dots>
}
 80028a8:	bf00      	nop
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000090 	.word	0x20000090
 80028b0:	20000080 	.word	0x20000080
 80028b4:	20000010 	.word	0x20000010
 80028b8:	2000009e 	.word	0x2000009e
 80028bc:	2000009f 	.word	0x2000009f
 80028c0:	40020400 	.word	0x40020400
 80028c4:	20000098 	.word	0x20000098
 80028c8:	2000009c 	.word	0x2000009c

080028cc <userMain>:
 *          initialization is done before calling it.
 *
 * @see buttonControlDebounce(), buttonFunctionDebounce(), updateDisplay()
 *****************************************************************************/
void userMain(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	/* Start counting seconds*/
	glbSecondCounter = 0;
 80028d0:	4911      	ldr	r1, [pc, #68]	@ (8002918 <userMain+0x4c>)
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	e9c1 2300 	strd	r2, r3, [r1]

	/*Reset Mode counter*/
	glbModeSelection = PomodoroFunctions_PomodoroMode;
 80028de:	4b0f      	ldr	r3, [pc, #60]	@ (800291c <userMain+0x50>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]

    /* Reset Time selection*/
    glbCurrentModeTime = POMODOROMODE_TIME;
 80028e4:	490e      	ldr	r1, [pc, #56]	@ (8002920 <userMain+0x54>)
 80028e6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	e9c1 2300 	strd	r2, r3, [r1]

    /*Reset Pomodoro Cycles*/
    glbPomodoroCycles = 0;
 80028f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002924 <userMain+0x58>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]

	glbTimerState = false;
 80028f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <userMain+0x5c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]

	/* Initialize data on display */
    TM1637_Update_Data_Dots(displayData,false); /** Set initial colon/dot state on display **/
 80028fe:	2100      	movs	r1, #0
 8002900:	480a      	ldr	r0, [pc, #40]	@ (800292c <userMain+0x60>)
 8002902:	f7ff fd4f 	bl	80023a4 <TM1637_Update_Data_Dots>

	while(1)
	{
		buttonControlDebounce(); /** Handle control button with debounce **/
 8002906:	f7ff fdaf 	bl	8002468 <buttonControlDebounce>
		buttonFunctionDebounce(); /** Handle mode change button with debounce **/
 800290a:	f7ff fe41 	bl	8002590 <buttonFunctionDebounce>
		updateDisplay(); /** Refresh display based on timer count **/
 800290e:	f7ff fed7 	bl	80026c0 <updateDisplay>
		buttonControlDebounce(); /** Handle control button with debounce **/
 8002912:	bf00      	nop
 8002914:	e7f7      	b.n	8002906 <userMain+0x3a>
 8002916:	bf00      	nop
 8002918:	20000080 	.word	0x20000080
 800291c:	2000009e 	.word	0x2000009e
 8002920:	20000010 	.word	0x20000010
 8002924:	2000009f 	.word	0x2000009f
 8002928:	2000009d 	.word	0x2000009d
 800292c:	20000098 	.word	0x20000098

08002930 <memset>:
 8002930:	4402      	add	r2, r0
 8002932:	4603      	mov	r3, r0
 8002934:	4293      	cmp	r3, r2
 8002936:	d100      	bne.n	800293a <memset+0xa>
 8002938:	4770      	bx	lr
 800293a:	f803 1b01 	strb.w	r1, [r3], #1
 800293e:	e7f9      	b.n	8002934 <memset+0x4>

08002940 <__libc_init_array>:
 8002940:	b570      	push	{r4, r5, r6, lr}
 8002942:	4d0d      	ldr	r5, [pc, #52]	@ (8002978 <__libc_init_array+0x38>)
 8002944:	4c0d      	ldr	r4, [pc, #52]	@ (800297c <__libc_init_array+0x3c>)
 8002946:	1b64      	subs	r4, r4, r5
 8002948:	10a4      	asrs	r4, r4, #2
 800294a:	2600      	movs	r6, #0
 800294c:	42a6      	cmp	r6, r4
 800294e:	d109      	bne.n	8002964 <__libc_init_array+0x24>
 8002950:	4d0b      	ldr	r5, [pc, #44]	@ (8002980 <__libc_init_array+0x40>)
 8002952:	4c0c      	ldr	r4, [pc, #48]	@ (8002984 <__libc_init_array+0x44>)
 8002954:	f000 f818 	bl	8002988 <_init>
 8002958:	1b64      	subs	r4, r4, r5
 800295a:	10a4      	asrs	r4, r4, #2
 800295c:	2600      	movs	r6, #0
 800295e:	42a6      	cmp	r6, r4
 8002960:	d105      	bne.n	800296e <__libc_init_array+0x2e>
 8002962:	bd70      	pop	{r4, r5, r6, pc}
 8002964:	f855 3b04 	ldr.w	r3, [r5], #4
 8002968:	4798      	blx	r3
 800296a:	3601      	adds	r6, #1
 800296c:	e7ee      	b.n	800294c <__libc_init_array+0xc>
 800296e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002972:	4798      	blx	r3
 8002974:	3601      	adds	r6, #1
 8002976:	e7f2      	b.n	800295e <__libc_init_array+0x1e>
 8002978:	080029c4 	.word	0x080029c4
 800297c:	080029c4 	.word	0x080029c4
 8002980:	080029c4 	.word	0x080029c4
 8002984:	080029c8 	.word	0x080029c8

08002988 <_init>:
 8002988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298a:	bf00      	nop
 800298c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800298e:	bc08      	pop	{r3}
 8002990:	469e      	mov	lr, r3
 8002992:	4770      	bx	lr

08002994 <_fini>:
 8002994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002996:	bf00      	nop
 8002998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800299a:	bc08      	pop	{r3}
 800299c:	469e      	mov	lr, r3
 800299e:	4770      	bx	lr
