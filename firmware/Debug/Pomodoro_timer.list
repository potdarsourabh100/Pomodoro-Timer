
Pomodoro_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c50  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002de4  08002de4  00003de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dfc  08002dfc  00004020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002dfc  08002dfc  00003dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e04  08002e04  00004020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e04  08002e04  00003e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e08  08002e08  00003e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08002e0c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000020  08002e2c  00004020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002e2c  000040dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c86b  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c0c  00000000  00000000  000108bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  000124c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097d  00000000  00000000  000130e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016498  00000000  00000000  00013a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d37e  00000000  00000000  00029ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008df0e  00000000  00000000  00037273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5181  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003318  00000000  00000000  000c51c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000c84dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002dcc 	.word	0x08002dcc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	08002dcc 	.word	0x08002dcc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <Delay_us>:
									};

static uint8_t tm1637currentdisplayvalue[MAX_NO_OF_CHARACTERS] = { };

void Delay_us(int time)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < time; i++)
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	e00c      	b.n	8000528 <Delay_us+0x28>
		{
			for(int j = 0; j < 3; j++)
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	e003      	b.n	800051c <Delay_us+0x1c>
				__asm__("nop");
 8000514:	bf00      	nop
			for(int j = 0; j < 3; j++)
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	3301      	adds	r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	2b02      	cmp	r3, #2
 8000520:	ddf8      	ble.n	8000514 <Delay_us+0x14>
	for(int i = 0; i < time; i++)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	429a      	cmp	r2, r3
 800052e:	dbee      	blt.n	800050e <Delay_us+0xe>
		}
}
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
	...

08000540 <TM1637_Start>:
void TM1637_Start (void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0

	CLK_HIGH();
 8000544:	2201      	movs	r2, #1
 8000546:	2110      	movs	r1, #16
 8000548:	4808      	ldr	r0, [pc, #32]	@ (800056c <TM1637_Start+0x2c>)
 800054a:	f001 f813 	bl	8001574 <HAL_GPIO_WritePin>
	DATA_HIGH();
 800054e:	2201      	movs	r2, #1
 8000550:	2120      	movs	r1, #32
 8000552:	4806      	ldr	r0, [pc, #24]	@ (800056c <TM1637_Start+0x2c>)
 8000554:	f001 f80e 	bl	8001574 <HAL_GPIO_WritePin>
	Delay_us (2);
 8000558:	2002      	movs	r0, #2
 800055a:	f7ff ffd1 	bl	8000500 <Delay_us>
	DATA_LOW();
 800055e:	2200      	movs	r2, #0
 8000560:	2120      	movs	r1, #32
 8000562:	4802      	ldr	r0, [pc, #8]	@ (800056c <TM1637_Start+0x2c>)
 8000564:	f001 f806 	bl	8001574 <HAL_GPIO_WritePin>
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40020400 	.word	0x40020400

08000570 <TM1637_Stop>:

void TM1637_Stop (void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	CLK_LOW();
 8000574:	2200      	movs	r2, #0
 8000576:	2110      	movs	r1, #16
 8000578:	480e      	ldr	r0, [pc, #56]	@ (80005b4 <TM1637_Stop+0x44>)
 800057a:	f000 fffb 	bl	8001574 <HAL_GPIO_WritePin>
	Delay_us (2);
 800057e:	2002      	movs	r0, #2
 8000580:	f7ff ffbe 	bl	8000500 <Delay_us>
	DATA_LOW();
 8000584:	2200      	movs	r2, #0
 8000586:	2120      	movs	r1, #32
 8000588:	480a      	ldr	r0, [pc, #40]	@ (80005b4 <TM1637_Stop+0x44>)
 800058a:	f000 fff3 	bl	8001574 <HAL_GPIO_WritePin>
	Delay_us (2);
 800058e:	2002      	movs	r0, #2
 8000590:	f7ff ffb6 	bl	8000500 <Delay_us>
	CLK_HIGH();
 8000594:	2201      	movs	r2, #1
 8000596:	2110      	movs	r1, #16
 8000598:	4806      	ldr	r0, [pc, #24]	@ (80005b4 <TM1637_Stop+0x44>)
 800059a:	f000 ffeb 	bl	8001574 <HAL_GPIO_WritePin>
	Delay_us (2);
 800059e:	2002      	movs	r0, #2
 80005a0:	f7ff ffae 	bl	8000500 <Delay_us>
	DATA_HIGH();
 80005a4:	2201      	movs	r2, #1
 80005a6:	2120      	movs	r1, #32
 80005a8:	4802      	ldr	r0, [pc, #8]	@ (80005b4 <TM1637_Stop+0x44>)
 80005aa:	f000 ffe3 	bl	8001574 <HAL_GPIO_WritePin>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40020400 	.word	0x40020400

080005b8 <TM1637_WaitForAck>:

void TM1637_WaitForAck (void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	CLK_LOW();
 80005bc:	2200      	movs	r2, #0
 80005be:	2110      	movs	r1, #16
 80005c0:	480a      	ldr	r0, [pc, #40]	@ (80005ec <TM1637_WaitForAck+0x34>)
 80005c2:	f000 ffd7 	bl	8001574 <HAL_GPIO_WritePin>
	Delay_us (5); // After the falling edge of the eighth clock delay 5us
 80005c6:	2005      	movs	r0, #5
 80005c8:	f7ff ff9a 	bl	8000500 <Delay_us>
	              // ACK signals the beginning of judgment
	CLK_HIGH();
 80005cc:	2201      	movs	r2, #1
 80005ce:	2110      	movs	r1, #16
 80005d0:	4806      	ldr	r0, [pc, #24]	@ (80005ec <TM1637_WaitForAck+0x34>)
 80005d2:	f000 ffcf 	bl	8001574 <HAL_GPIO_WritePin>
	Delay_us (2);
 80005d6:	2002      	movs	r0, #2
 80005d8:	f7ff ff92 	bl	8000500 <Delay_us>
	CLK_LOW();
 80005dc:	2200      	movs	r2, #0
 80005de:	2110      	movs	r1, #16
 80005e0:	4802      	ldr	r0, [pc, #8]	@ (80005ec <TM1637_WaitForAck+0x34>)
 80005e2:	f000 ffc7 	bl	8001574 <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40020400 	.word	0x40020400

080005f0 <TM1637_WriteByte>:

void TM1637_WriteByte (uint8_t byte)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	int i;
	for (i = 0; i<8; i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	e025      	b.n	800064c <TM1637_WriteByte+0x5c>
	{
		CLK_LOW();
 8000600:	2200      	movs	r2, #0
 8000602:	2110      	movs	r1, #16
 8000604:	4815      	ldr	r0, [pc, #84]	@ (800065c <TM1637_WriteByte+0x6c>)
 8000606:	f000 ffb5 	bl	8001574 <HAL_GPIO_WritePin>
		if (byte & 0x01) // low front
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	2b00      	cmp	r3, #0
 8000612:	d005      	beq.n	8000620 <TM1637_WriteByte+0x30>
		{
			DATA_HIGH();
 8000614:	2201      	movs	r2, #1
 8000616:	2120      	movs	r1, #32
 8000618:	4810      	ldr	r0, [pc, #64]	@ (800065c <TM1637_WriteByte+0x6c>)
 800061a:	f000 ffab 	bl	8001574 <HAL_GPIO_WritePin>
 800061e:	e004      	b.n	800062a <TM1637_WriteByte+0x3a>
		}
		else
		{
			DATA_LOW();
 8000620:	2200      	movs	r2, #0
 8000622:	2120      	movs	r1, #32
 8000624:	480d      	ldr	r0, [pc, #52]	@ (800065c <TM1637_WriteByte+0x6c>)
 8000626:	f000 ffa5 	bl	8001574 <HAL_GPIO_WritePin>
		}
		Delay_us (3);
 800062a:	2003      	movs	r0, #3
 800062c:	f7ff ff68 	bl	8000500 <Delay_us>
		byte = byte >> 1;
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	085b      	lsrs	r3, r3, #1
 8000634:	71fb      	strb	r3, [r7, #7]
		CLK_HIGH();
 8000636:	2201      	movs	r2, #1
 8000638:	2110      	movs	r1, #16
 800063a:	4808      	ldr	r0, [pc, #32]	@ (800065c <TM1637_WriteByte+0x6c>)
 800063c:	f000 ff9a 	bl	8001574 <HAL_GPIO_WritePin>
		Delay_us (3);
 8000640:	2003      	movs	r0, #3
 8000642:	f7ff ff5d 	bl	8000500 <Delay_us>
	for (i = 0; i<8; i++)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	3301      	adds	r3, #1
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2b07      	cmp	r3, #7
 8000650:	ddd6      	ble.n	8000600 <TM1637_WriteByte+0x10>
	}
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020400 	.word	0x40020400

08000660 <TM1637_Write>:
	TM1637_WaitForAck();
	TM1637_Stop();
}

void TM1637_Write(uint8_t datacommand,uint8_t address,uint8_t *data,uint8_t displaycommand)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	603a      	str	r2, [r7, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	460b      	mov	r3, r1
 8000670:	71bb      	strb	r3, [r7, #6]
 8000672:	4613      	mov	r3, r2
 8000674:	717b      	strb	r3, [r7, #5]
		TM1637_Start();
 8000676:	f7ff ff63 	bl	8000540 <TM1637_Start>
		TM1637_WriteByte(datacommand);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ffb7 	bl	80005f0 <TM1637_WriteByte>
		TM1637_WaitForAck();
 8000682:	f7ff ff99 	bl	80005b8 <TM1637_WaitForAck>
		TM1637_Stop();
 8000686:	f7ff ff73 	bl	8000570 <TM1637_Stop>

		TM1637_Start();
 800068a:	f7ff ff59 	bl	8000540 <TM1637_Start>
		TM1637_WriteByte(address);
 800068e:	79bb      	ldrb	r3, [r7, #6]
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ffad 	bl	80005f0 <TM1637_WriteByte>
		TM1637_WaitForAck();
 8000696:	f7ff ff8f 	bl	80005b8 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e01a      	b.n	80006d6 <TM1637_Write+0x76>
		{
			tm1637currentdisplayvalue[i] = tm1637digitpattern[data[i]];
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <TM1637_Write+0x9c>)
 80006ac:	5c99      	ldrb	r1, [r3, r2]
 80006ae:	4a14      	ldr	r2, [pc, #80]	@ (8000700 <TM1637_Write+0xa0>)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	460a      	mov	r2, r1
 80006b6:	701a      	strb	r2, [r3, #0]
			TM1637_WriteByte(tm1637digitpattern[data[i]]);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <TM1637_Write+0x9c>)
 80006c4:	5c9b      	ldrb	r3, [r3, r2]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff92 	bl	80005f0 <TM1637_WriteByte>
			TM1637_WaitForAck();
 80006cc:	f7ff ff74 	bl	80005b8 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3301      	adds	r3, #1
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b05      	cmp	r3, #5
 80006da:	dde1      	ble.n	80006a0 <TM1637_Write+0x40>
		}
		TM1637_Stop();
 80006dc:	f7ff ff48 	bl	8000570 <TM1637_Stop>

		TM1637_Start();
 80006e0:	f7ff ff2e 	bl	8000540 <TM1637_Start>
		TM1637_WriteByte(displaycommand);
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff82 	bl	80005f0 <TM1637_WriteByte>
		TM1637_WaitForAck();
 80006ec:	f7ff ff64 	bl	80005b8 <TM1637_WaitForAck>
		TM1637_Stop();
 80006f0:	f7ff ff3e 	bl	8000570 <TM1637_Stop>
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000000 	.word	0x20000000
 8000700:	2000003c 	.word	0x2000003c

08000704 <TM1637_Update_Data_Dots>:
			tm1637currentdisplayvalue[i] = tm1637digitpattern[dataupdate[i]];
		}
}

void TM1637_Update_Data_Dots(uint8_t *displayvalue, uint8_t status)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
	TM1637_Start();
 8000710:	f7ff ff16 	bl	8000540 <TM1637_Start>
	TM1637_WriteByte((DATA_COMMAND|WRITE_DATA_TO_DISPLAY|AUTOMATIC_ADDRESS_ADD|NORMAL_MODE));
 8000714:	2040      	movs	r0, #64	@ 0x40
 8000716:	f7ff ff6b 	bl	80005f0 <TM1637_WriteByte>
	TM1637_WaitForAck();
 800071a:	f7ff ff4d 	bl	80005b8 <TM1637_WaitForAck>
	TM1637_Stop();
 800071e:	f7ff ff27 	bl	8000570 <TM1637_Stop>

	if(status)
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d022      	beq.n	800076e <TM1637_Update_Data_Dots+0x6a>
	{
		TM1637_Start();
 8000728:	f7ff ff0a 	bl	8000540 <TM1637_Start>
		TM1637_WriteByte(DISPLAY_1_REGISTER_ADDRESS);
 800072c:	20c0      	movs	r0, #192	@ 0xc0
 800072e:	f7ff ff5f 	bl	80005f0 <TM1637_WriteByte>
		TM1637_WaitForAck();
 8000732:	f7ff ff41 	bl	80005b8 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	e012      	b.n	8000762 <TM1637_Update_Data_Dots+0x5e>
		{
			TM1637_WriteByte((tm1637digitpattern[displayvalue[i]] | tm1637digitpattern[11]));
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <TM1637_Update_Data_Dots+0xc0>)
 8000748:	5c9a      	ldrb	r2, [r3, r2]
 800074a:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <TM1637_Update_Data_Dots+0xc0>)
 800074c:	7adb      	ldrb	r3, [r3, #11]
 800074e:	4313      	orrs	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff4c 	bl	80005f0 <TM1637_WriteByte>
			TM1637_WaitForAck();
 8000758:	f7ff ff2e 	bl	80005b8 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	3301      	adds	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	2b05      	cmp	r3, #5
 8000766:	dde9      	ble.n	800073c <TM1637_Update_Data_Dots+0x38>
		}
		TM1637_Stop();
 8000768:	f7ff ff02 	bl	8000570 <TM1637_Stop>
 800076c:	e01d      	b.n	80007aa <TM1637_Update_Data_Dots+0xa6>
	}
	else
	{
		TM1637_Start();
 800076e:	f7ff fee7 	bl	8000540 <TM1637_Start>
		TM1637_WriteByte(DISPLAY_1_REGISTER_ADDRESS);
 8000772:	20c0      	movs	r0, #192	@ 0xc0
 8000774:	f7ff ff3c 	bl	80005f0 <TM1637_WriteByte>
		TM1637_WaitForAck();
 8000778:	f7ff ff1e 	bl	80005b8 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	e00e      	b.n	80007a0 <TM1637_Update_Data_Dots+0x9c>
		{
			TM1637_WriteByte(tm1637digitpattern[displayvalue[i]]);
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	4413      	add	r3, r2
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	461a      	mov	r2, r3
 800078c:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <TM1637_Update_Data_Dots+0xc0>)
 800078e:	5c9b      	ldrb	r3, [r3, r2]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff2d 	bl	80005f0 <TM1637_WriteByte>
			TM1637_WaitForAck();
 8000796:	f7ff ff0f 	bl	80005b8 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	3301      	adds	r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	2b05      	cmp	r3, #5
 80007a4:	dded      	ble.n	8000782 <TM1637_Update_Data_Dots+0x7e>
		}
		TM1637_Stop();
 80007a6:	f7ff fee3 	bl	8000570 <TM1637_Stop>
	}

	TM1637_Start();
 80007aa:	f7ff fec9 	bl	8000540 <TM1637_Start>
	TM1637_WriteByte((DISPLAY_COMMAND|PulSe_WIDTH_SET_04_16|DISPLAY_ON));
 80007ae:	208a      	movs	r0, #138	@ 0x8a
 80007b0:	f7ff ff1e 	bl	80005f0 <TM1637_WriteByte>
	TM1637_WaitForAck();
 80007b4:	f7ff ff00 	bl	80005b8 <TM1637_WaitForAck>
	TM1637_Stop();
 80007b8:	f7ff feda 	bl	8000570 <TM1637_Stop>
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000000 	.word	0x20000000

080007c8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(50);
 80007d2:	2032      	movs	r0, #50	@ 0x32
 80007d4:	f000 fbfc 	bl	8000fd0 <HAL_Delay>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_RESET)
 80007d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007dc:	480b      	ldr	r0, [pc, #44]	@ (800080c <HAL_GPIO_EXTI_Callback+0x44>)
 80007de:	f000 feb1 	bl	8001544 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d103      	bne.n	80007f0 <HAL_GPIO_EXTI_Callback+0x28>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 80007e8:	4809      	ldr	r0, [pc, #36]	@ (8000810 <HAL_GPIO_EXTI_Callback+0x48>)
 80007ea:	f001 fbdd 	bl	8001fa8 <HAL_TIM_Base_Start_IT>
	}
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET)
	{
		HAL_TIM_Base_Stop_IT(&htim3);
	}
}
 80007ee:	e009      	b.n	8000804 <HAL_GPIO_EXTI_Callback+0x3c>
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET)
 80007f0:	2110      	movs	r1, #16
 80007f2:	4808      	ldr	r0, [pc, #32]	@ (8000814 <HAL_GPIO_EXTI_Callback+0x4c>)
 80007f4:	f000 fea6 	bl	8001544 <HAL_GPIO_ReadPin>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d102      	bne.n	8000804 <HAL_GPIO_EXTI_Callback+0x3c>
		HAL_TIM_Base_Stop_IT(&htim3);
 80007fe:	4804      	ldr	r0, [pc, #16]	@ (8000810 <HAL_GPIO_EXTI_Callback+0x48>)
 8000800:	f001 fc34 	bl	800206c <HAL_TIM_Base_Stop_IT>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40020000 	.word	0x40020000
 8000810:	20000044 	.word	0x20000044
 8000814:	40020400 	.word	0x40020400

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f000 fb65 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f883 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 f963 	bl	8000af0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800082a:	f000 f937 	bl	8000a9c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800082e:	f000 f8e7 	bl	8000a00 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  uint8_t startvalue[] = {10,10,10,10};
 8000832:	f04f 330a 	mov.w	r3, #168430090	@ 0xa0a0a0a
 8000836:	607b      	str	r3, [r7, #4]
  TM1637_Write((DATA_COMMAND|WRITE_DATA_TO_DISPLAY|AUTOMATIC_ADDRESS_ADD|NORMAL_MODE),
 8000838:	1d3a      	adds	r2, r7, #4
 800083a:	238a      	movs	r3, #138	@ 0x8a
 800083c:	21c0      	movs	r1, #192	@ 0xc0
 800083e:	2040      	movs	r0, #64	@ 0x40
 8000840:	f7ff ff0e 	bl	8000660 <TM1637_Write>
		  DISPLAY_1_REGISTER_ADDRESS,
		  startvalue,
		  (DISPLAY_COMMAND|PulSe_WIDTH_SET_04_16|DISPLAY_ON));
  HAL_Delay(1000);
 8000844:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000848:	f000 fbc2 	bl	8000fd0 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(updatestatus == 1)
 800084c:	4b31      	ldr	r3, [pc, #196]	@ (8000914 <main+0xfc>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d1fb      	bne.n	800084c <main+0x34>
	{
		updatestatus = 0;
 8000854:	4b2f      	ldr	r3, [pc, #188]	@ (8000914 <main+0xfc>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
		bitstatus ^= 1;
 800085a:	4b2f      	ldr	r3, [pc, #188]	@ (8000918 <main+0x100>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	f083 0301 	eor.w	r3, r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b2c      	ldr	r3, [pc, #176]	@ (8000918 <main+0x100>)
 8000866:	701a      	strb	r2, [r3, #0]
		displayvalue[0] = minutes / 10;
 8000868:	4b2c      	ldr	r3, [pc, #176]	@ (800091c <main+0x104>)
 800086a:	f993 3000 	ldrsb.w	r3, [r3]
 800086e:	4a2c      	ldr	r2, [pc, #176]	@ (8000920 <main+0x108>)
 8000870:	fb82 1203 	smull	r1, r2, r2, r3
 8000874:	1092      	asrs	r2, r2, #2
 8000876:	17db      	asrs	r3, r3, #31
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	b25b      	sxtb	r3, r3
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <main+0x10c>)
 8000880:	701a      	strb	r2, [r3, #0]
		displayvalue[1] = minutes - (minutes / 10) * 10;
 8000882:	4b26      	ldr	r3, [pc, #152]	@ (800091c <main+0x104>)
 8000884:	f993 3000 	ldrsb.w	r3, [r3]
 8000888:	4a25      	ldr	r2, [pc, #148]	@ (8000920 <main+0x108>)
 800088a:	fb82 1203 	smull	r1, r2, r2, r3
 800088e:	1092      	asrs	r2, r2, #2
 8000890:	17db      	asrs	r3, r3, #31
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	b25b      	sxtb	r3, r3
 8000896:	b2db      	uxtb	r3, r3
 8000898:	461a      	mov	r2, r3
 800089a:	0152      	lsls	r2, r2, #5
 800089c:	1ad2      	subs	r2, r2, r3
 800089e:	0092      	lsls	r2, r2, #2
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <main+0x104>)
 80008a8:	f993 3000 	ldrsb.w	r3, [r3]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4413      	add	r3, r2
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <main+0x10c>)
 80008b4:	705a      	strb	r2, [r3, #1]
		displayvalue[2] = seconds / 10;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <main+0x110>)
 80008b8:	f993 3000 	ldrsb.w	r3, [r3]
 80008bc:	4a18      	ldr	r2, [pc, #96]	@ (8000920 <main+0x108>)
 80008be:	fb82 1203 	smull	r1, r2, r2, r3
 80008c2:	1092      	asrs	r2, r2, #2
 80008c4:	17db      	asrs	r3, r3, #31
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	b25b      	sxtb	r3, r3
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <main+0x10c>)
 80008ce:	709a      	strb	r2, [r3, #2]
		displayvalue[3] = seconds - (seconds / 10) * 10;
 80008d0:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <main+0x110>)
 80008d2:	f993 3000 	ldrsb.w	r3, [r3]
 80008d6:	4a12      	ldr	r2, [pc, #72]	@ (8000920 <main+0x108>)
 80008d8:	fb82 1203 	smull	r1, r2, r2, r3
 80008dc:	1092      	asrs	r2, r2, #2
 80008de:	17db      	asrs	r3, r3, #31
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	461a      	mov	r2, r3
 80008e8:	0152      	lsls	r2, r2, #5
 80008ea:	1ad2      	subs	r2, r2, r3
 80008ec:	0092      	lsls	r2, r2, #2
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <main+0x110>)
 80008f6:	f993 3000 	ldrsb.w	r3, [r3]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	4413      	add	r3, r2
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <main+0x10c>)
 8000902:	70da      	strb	r2, [r3, #3]
		TM1637_Update_Data_Dots(displayvalue, bitstatus);
 8000904:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <main+0x100>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	4806      	ldr	r0, [pc, #24]	@ (8000924 <main+0x10c>)
 800090c:	f7ff fefa 	bl	8000704 <TM1637_Update_Data_Dots>
	if(updatestatus == 1)
 8000910:	e79c      	b.n	800084c <main+0x34>
 8000912:	bf00      	nop
 8000914:	200000d6 	.word	0x200000d6
 8000918:	200000d5 	.word	0x200000d5
 800091c:	2000000c 	.word	0x2000000c
 8000920:	66666667 	.word	0x66666667
 8000924:	20000010 	.word	0x20000010
 8000928:	200000d4 	.word	0x200000d4

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	@ 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2230      	movs	r2, #48	@ 0x30
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f002 fa1a 	bl	8002d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	4b28      	ldr	r3, [pc, #160]	@ (80009f8 <SystemClock_Config+0xcc>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000958:	4a27      	ldr	r2, [pc, #156]	@ (80009f8 <SystemClock_Config+0xcc>)
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000960:	4b25      	ldr	r3, [pc, #148]	@ (80009f8 <SystemClock_Config+0xcc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b22      	ldr	r3, [pc, #136]	@ (80009fc <SystemClock_Config+0xd0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000978:	4a20      	ldr	r2, [pc, #128]	@ (80009fc <SystemClock_Config+0xd0>)
 800097a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <SystemClock_Config+0xd0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000990:	2301      	movs	r3, #1
 8000992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000994:	2310      	movs	r3, #16
 8000996:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000998:	2302      	movs	r3, #2
 800099a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800099c:	2300      	movs	r3, #0
 800099e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009a0:	2308      	movs	r3, #8
 80009a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80009a4:	2340      	movs	r3, #64	@ 0x40
 80009a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009ac:	2307      	movs	r3, #7
 80009ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0320 	add.w	r3, r7, #32
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fe0f 	bl	80015d8 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009c0:	f000 f93c 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	230f      	movs	r3, #15
 80009c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c8:	2302      	movs	r3, #2
 80009ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	2102      	movs	r1, #2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 f871 	bl	8001ac8 <HAL_RCC_ClockConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009ec:	f000 f926 	bl	8000c3c <Error_Handler>
  }
}
 80009f0:	bf00      	nop
 80009f2:	3750      	adds	r7, #80	@ 0x50
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000

08000a00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	463b      	mov	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a94 <MX_TIM3_Init+0x94>)
 8000a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000a98 <MX_TIM3_Init+0x98>)
 8000a20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400 - 1;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <MX_TIM3_Init+0x94>)
 8000a24:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000a28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <MX_TIM3_Init+0x94>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000 - 1;
 8000a30:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <MX_TIM3_Init+0x94>)
 8000a32:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a38:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <MX_TIM3_Init+0x94>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <MX_TIM3_Init+0x94>)
 8000a40:	2280      	movs	r2, #128	@ 0x80
 8000a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a44:	4813      	ldr	r0, [pc, #76]	@ (8000a94 <MX_TIM3_Init+0x94>)
 8000a46:	f001 fa5f 	bl	8001f08 <HAL_TIM_Base_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a50:	f000 f8f4 	bl	8000c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <MX_TIM3_Init+0x94>)
 8000a62:	f001 fc22 	bl	80022aa <HAL_TIM_ConfigClockSource>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a6c:	f000 f8e6 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_TIM3_Init+0x94>)
 8000a7e:	f001 fe33 	bl	80026e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a88:	f000 f8d8 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000044 	.word	0x20000044
 8000a98:	40000400 	.word	0x40000400

08000a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <MX_USART2_UART_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	f001 fe8a 	bl	80027ec <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ade:	f000 f8ad 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000008c 	.word	0x2000008c
 8000aec:	40004400 	.word	0x40004400

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	@ 0x28
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b48      	ldr	r3, [pc, #288]	@ (8000c2c <MX_GPIO_Init+0x13c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a47      	ldr	r2, [pc, #284]	@ (8000c2c <MX_GPIO_Init+0x13c>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b45      	ldr	r3, [pc, #276]	@ (8000c2c <MX_GPIO_Init+0x13c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b41      	ldr	r3, [pc, #260]	@ (8000c2c <MX_GPIO_Init+0x13c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a40      	ldr	r2, [pc, #256]	@ (8000c2c <MX_GPIO_Init+0x13c>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b3e      	ldr	r3, [pc, #248]	@ (8000c2c <MX_GPIO_Init+0x13c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b3a      	ldr	r3, [pc, #232]	@ (8000c2c <MX_GPIO_Init+0x13c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a39      	ldr	r2, [pc, #228]	@ (8000c2c <MX_GPIO_Init+0x13c>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b37      	ldr	r3, [pc, #220]	@ (8000c2c <MX_GPIO_Init+0x13c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b33      	ldr	r3, [pc, #204]	@ (8000c2c <MX_GPIO_Init+0x13c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a32      	ldr	r2, [pc, #200]	@ (8000c2c <MX_GPIO_Init+0x13c>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b30      	ldr	r3, [pc, #192]	@ (8000c2c <MX_GPIO_Init+0x13c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2120      	movs	r1, #32
 8000b7a:	482d      	ldr	r0, [pc, #180]	@ (8000c30 <MX_GPIO_Init+0x140>)
 8000b7c:	f000 fcfa 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_Pin|DATA_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2130      	movs	r1, #48	@ 0x30
 8000b84:	482b      	ldr	r0, [pc, #172]	@ (8000c34 <MX_GPIO_Init+0x144>)
 8000b86:	f000 fcf5 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b90:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4825      	ldr	r0, [pc, #148]	@ (8000c38 <MX_GPIO_Init+0x148>)
 8000ba2:	f000 fb4b 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ba6:	2320      	movs	r3, #32
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	481c      	ldr	r0, [pc, #112]	@ (8000c30 <MX_GPIO_Init+0x140>)
 8000bbe:	f000 fb3d 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4815      	ldr	r0, [pc, #84]	@ (8000c30 <MX_GPIO_Init+0x140>)
 8000bda:	f000 fb2f 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bde:	2308      	movs	r3, #8
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4810      	ldr	r0, [pc, #64]	@ (8000c34 <MX_GPIO_Init+0x144>)
 8000bf4:	f000 fb22 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DATA_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 8000bf8:	2330      	movs	r3, #48	@ 0x30
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c04:	2302      	movs	r3, #2
 8000c06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4809      	ldr	r0, [pc, #36]	@ (8000c34 <MX_GPIO_Init+0x144>)
 8000c10:	f000 fb14 	bl	800123c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	2028      	movs	r0, #40	@ 0x28
 8000c1a:	f000 fad8 	bl	80011ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c1e:	2028      	movs	r0, #40	@ 0x28
 8000c20:	f000 faf1 	bl	8001206 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	@ 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000
 8000c34:	40020400 	.word	0x40020400
 8000c38:	40020800 	.word	0x40020800

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <Error_Handler+0x8>

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	4a0f      	ldr	r2, [pc, #60]	@ (8000c94 <HAL_MspInit+0x4c>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <HAL_MspInit+0x4c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	4a08      	ldr	r2, [pc, #32]	@ (8000c94 <HAL_MspInit+0x4c>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_MspInit+0x4c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x48>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d115      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <HAL_TIM_Base_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce4 <HAL_TIM_Base_MspInit+0x4c>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <HAL_TIM_Base_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	201d      	movs	r0, #29
 8000ccc:	f000 fa7f 	bl	80011ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cd0:	201d      	movs	r0, #29
 8000cd2:	f000 fa98 	bl	8001206 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40000400 	.word	0x40000400
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a19      	ldr	r2, [pc, #100]	@ (8000d6c <HAL_UART_MspInit+0x84>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12b      	bne.n	8000d62 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <HAL_UART_MspInit+0x88>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	4a17      	ldr	r2, [pc, #92]	@ (8000d70 <HAL_UART_MspInit+0x88>)
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <HAL_UART_MspInit+0x88>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <HAL_UART_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a10      	ldr	r2, [pc, #64]	@ (8000d70 <HAL_UART_MspInit+0x88>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <HAL_UART_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d42:	230c      	movs	r3, #12
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d52:	2307      	movs	r3, #7
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <HAL_UART_MspInit+0x8c>)
 8000d5e:	f000 fa6d 	bl	800123c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	@ 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40004400 	.word	0x40004400
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <NMI_Handler+0x4>

08000d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <MemManage_Handler+0x4>

08000d90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <UsageFault_Handler+0x4>

08000da0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dce:	f000 f8df 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	seconds--;
 8000dde:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <TIM3_IRQHandler+0x74>)
 8000de0:	f993 3000 	ldrsb.w	r3, [r3]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	3b01      	subs	r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	b25a      	sxtb	r2, r3
 8000dec:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <TIM3_IRQHandler+0x74>)
 8000dee:	701a      	strb	r2, [r3, #0]
		if(seconds == -1)
 8000df0:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <TIM3_IRQHandler+0x74>)
 8000df2:	f993 3000 	ldrsb.w	r3, [r3]
 8000df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfa:	d11c      	bne.n	8000e36 <TIM3_IRQHandler+0x5e>
		{
			seconds = 59;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <TIM3_IRQHandler+0x74>)
 8000dfe:	223b      	movs	r2, #59	@ 0x3b
 8000e00:	701a      	strb	r2, [r3, #0]
			minutes--;
 8000e02:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <TIM3_IRQHandler+0x78>)
 8000e04:	f993 3000 	ldrsb.w	r3, [r3]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	b25a      	sxtb	r2, r3
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <TIM3_IRQHandler+0x78>)
 8000e12:	701a      	strb	r2, [r3, #0]
			if(minutes == 0)
 8000e14:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <TIM3_IRQHandler+0x78>)
 8000e16:	f993 3000 	ldrsb.w	r3, [r3]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10b      	bne.n	8000e36 <TIM3_IRQHandler+0x5e>
			{
				HAL_TIM_Base_Stop_IT(&htim3);
 8000e1e:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <TIM3_IRQHandler+0x7c>)
 8000e20:	f001 f924 	bl	800206c <HAL_TIM_Base_Stop_IT>
				uint8_t startvalue[] = {11,11,11,11};
 8000e24:	f04f 330b 	mov.w	r3, #185273099	@ 0xb0b0b0b
 8000e28:	607b      	str	r3, [r7, #4]
				TM1637_Write((DATA_COMMAND|WRITE_DATA_TO_DISPLAY|AUTOMATIC_ADDRESS_ADD|NORMAL_MODE),
 8000e2a:	1d3a      	adds	r2, r7, #4
 8000e2c:	238a      	movs	r3, #138	@ 0x8a
 8000e2e:	21c0      	movs	r1, #192	@ 0xc0
 8000e30:	2040      	movs	r0, #64	@ 0x40
 8000e32:	f7ff fc15 	bl	8000660 <TM1637_Write>
						  DISPLAY_1_REGISTER_ADDRESS,
						  startvalue,
						  (DISPLAY_COMMAND|PulSe_WIDTH_SET_04_16|DISPLAY_ON));
			}
		}
		updatestatus = 1;
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <TIM3_IRQHandler+0x80>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e3c:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <TIM3_IRQHandler+0x7c>)
 8000e3e:	f001 f944 	bl	80020ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200000d4 	.word	0x200000d4
 8000e50:	2000000c 	.word	0x2000000c
 8000e54:	20000044 	.word	0x20000044
 8000e58:	200000d6 	.word	0x200000d6

08000e5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000e60:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000e64:	f000 fba0 	bl	80015a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e68:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e6c:	f000 fb9c 	bl	80015a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <SystemInit+0x20>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e7e:	4a05      	ldr	r2, [pc, #20]	@ (8000e94 <SystemInit+0x20>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ed0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e9c:	f7ff ffea 	bl	8000e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea0:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ea2:	490d      	ldr	r1, [pc, #52]	@ (8000ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f001 ff5d 	bl	8002d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fca5 	bl	8000818 <main>
  bx  lr    
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000edc:	08002e0c 	.word	0x08002e0c
  ldr r2, =_sbss
 8000ee0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000ee4:	200000dc 	.word	0x200000dc

08000ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f2c <HAL_Init+0x40>)
 8000ef6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000efc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0a      	ldr	r2, [pc, #40]	@ (8000f2c <HAL_Init+0x40>)
 8000f02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	@ (8000f2c <HAL_Init+0x40>)
 8000f0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 f94f 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f000 f808 	bl	8000f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f20:	f7ff fe92 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023c00 	.word	0x40023c00

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f38:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <HAL_InitTick+0x54>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <HAL_InitTick+0x58>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f967 	bl	8001222 <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00e      	b.n	8000f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d80a      	bhi.n	8000f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 f92f 	bl	80011ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4a06      	ldr	r2, [pc, #24]	@ (8000f8c <HAL_InitTick+0x5c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000014 	.word	0x20000014
 8000f88:	2000001c 	.word	0x2000001c
 8000f8c:	20000018 	.word	0x20000018

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000001c 	.word	0x2000001c
 8000fb4:	200000d8 	.word	0x200000d8

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200000d8 	.word	0x200000d8

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff ffee 	bl	8000fb8 <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fea:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <HAL_Delay+0x44>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffde 	bl	8000fb8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000001c 	.word	0x2000001c

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	@ (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4907      	ldr	r1, [pc, #28]	@ (80010b4 <__NVIC_EnableIRQ+0x38>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	@ (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	@ (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	@ 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	@ 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001184:	d301      	bcc.n	800118a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e00f      	b.n	80011aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <SysTick_Config+0x40>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	210f      	movs	r1, #15
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f7ff ff8e 	bl	80010b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <SysTick_Config+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <SysTick_Config+0x40>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff29 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e0:	f7ff ff3e 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff8e 	bl	800110c <NVIC_EncodePriority>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff5d 	bl	80010b8 <__NVIC_SetPriority>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff31 	bl	800107c <__NVIC_EnableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffa2 	bl	8001174 <SysTick_Config>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	e159      	b.n	800150c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	429a      	cmp	r2, r3
 8001272:	f040 8148 	bne.w	8001506 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d005      	beq.n	800128e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128a:	2b02      	cmp	r3, #2
 800128c:	d130      	bne.n	80012f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c4:	2201      	movs	r2, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	f003 0201 	and.w	r2, r3, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d017      	beq.n	800132c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d123      	bne.n	8001380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	08da      	lsrs	r2, r3, #3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3208      	adds	r2, #8
 8001340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	08da      	lsrs	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3208      	adds	r2, #8
 800137a:	69b9      	ldr	r1, [r7, #24]
 800137c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0203 	and.w	r2, r3, #3
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80a2 	beq.w	8001506 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b57      	ldr	r3, [pc, #348]	@ (8001524 <HAL_GPIO_Init+0x2e8>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	4a56      	ldr	r2, [pc, #344]	@ (8001524 <HAL_GPIO_Init+0x2e8>)
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d2:	4b54      	ldr	r3, [pc, #336]	@ (8001524 <HAL_GPIO_Init+0x2e8>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013de:	4a52      	ldr	r2, [pc, #328]	@ (8001528 <HAL_GPIO_Init+0x2ec>)
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a49      	ldr	r2, [pc, #292]	@ (800152c <HAL_GPIO_Init+0x2f0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d019      	beq.n	800143e <HAL_GPIO_Init+0x202>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a48      	ldr	r2, [pc, #288]	@ (8001530 <HAL_GPIO_Init+0x2f4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0x1fe>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a47      	ldr	r2, [pc, #284]	@ (8001534 <HAL_GPIO_Init+0x2f8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00d      	beq.n	8001436 <HAL_GPIO_Init+0x1fa>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a46      	ldr	r2, [pc, #280]	@ (8001538 <HAL_GPIO_Init+0x2fc>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x1f6>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a45      	ldr	r2, [pc, #276]	@ (800153c <HAL_GPIO_Init+0x300>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_GPIO_Init+0x1f2>
 800142a:	2304      	movs	r3, #4
 800142c:	e008      	b.n	8001440 <HAL_GPIO_Init+0x204>
 800142e:	2307      	movs	r3, #7
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x204>
 8001432:	2303      	movs	r3, #3
 8001434:	e004      	b.n	8001440 <HAL_GPIO_Init+0x204>
 8001436:	2302      	movs	r3, #2
 8001438:	e002      	b.n	8001440 <HAL_GPIO_Init+0x204>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_GPIO_Init+0x204>
 800143e:	2300      	movs	r3, #0
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	f002 0203 	and.w	r2, r2, #3
 8001446:	0092      	lsls	r2, r2, #2
 8001448:	4093      	lsls	r3, r2
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001450:	4935      	ldr	r1, [pc, #212]	@ (8001528 <HAL_GPIO_Init+0x2ec>)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145e:	4b38      	ldr	r3, [pc, #224]	@ (8001540 <HAL_GPIO_Init+0x304>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001482:	4a2f      	ldr	r2, [pc, #188]	@ (8001540 <HAL_GPIO_Init+0x304>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001488:	4b2d      	ldr	r3, [pc, #180]	@ (8001540 <HAL_GPIO_Init+0x304>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ac:	4a24      	ldr	r2, [pc, #144]	@ (8001540 <HAL_GPIO_Init+0x304>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b2:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <HAL_GPIO_Init+0x304>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001540 <HAL_GPIO_Init+0x304>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014dc:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <HAL_GPIO_Init+0x304>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001500:	4a0f      	ldr	r2, [pc, #60]	@ (8001540 <HAL_GPIO_Init+0x304>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	f67f aea2 	bls.w	8001258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3724      	adds	r7, #36	@ 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40013800 	.word	0x40013800
 800152c:	40020000 	.word	0x40020000
 8001530:	40020400 	.word	0x40020400
 8001534:	40020800 	.word	0x40020800
 8001538:	40020c00 	.word	0x40020c00
 800153c:	40021000 	.word	0x40021000
 8001540:	40013c00 	.word	0x40013c00

08001544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff f8fe 	bl	80007c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40013c00 	.word	0x40013c00

080015d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e267      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d075      	beq.n	80016e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015f6:	4b88      	ldr	r3, [pc, #544]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d00c      	beq.n	800161c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001602:	4b85      	ldr	r3, [pc, #532]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800160a:	2b08      	cmp	r3, #8
 800160c:	d112      	bne.n	8001634 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160e:	4b82      	ldr	r3, [pc, #520]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001616:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800161a:	d10b      	bne.n	8001634 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	4b7e      	ldr	r3, [pc, #504]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d05b      	beq.n	80016e0 <HAL_RCC_OscConfig+0x108>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d157      	bne.n	80016e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e242      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800163c:	d106      	bne.n	800164c <HAL_RCC_OscConfig+0x74>
 800163e:	4b76      	ldr	r3, [pc, #472]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a75      	ldr	r2, [pc, #468]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e01d      	b.n	8001688 <HAL_RCC_OscConfig+0xb0>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x98>
 8001656:	4b70      	ldr	r3, [pc, #448]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6f      	ldr	r2, [pc, #444]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 800165c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b6d      	ldr	r3, [pc, #436]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a6c      	ldr	r2, [pc, #432]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e00b      	b.n	8001688 <HAL_RCC_OscConfig+0xb0>
 8001670:	4b69      	ldr	r3, [pc, #420]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a68      	ldr	r2, [pc, #416]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b66      	ldr	r3, [pc, #408]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a65      	ldr	r2, [pc, #404]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fc92 	bl	8000fb8 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fc8e 	bl	8000fb8 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	@ 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e207      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0xc0>
 80016b6:	e014      	b.n	80016e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fc7e 	bl	8000fb8 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fc7a 	bl	8000fb8 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	@ 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e1f3      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	4b51      	ldr	r3, [pc, #324]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0xe8>
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d063      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00b      	beq.n	8001712 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fa:	4b47      	ldr	r3, [pc, #284]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001702:	2b08      	cmp	r3, #8
 8001704:	d11c      	bne.n	8001740 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001706:	4b44      	ldr	r3, [pc, #272]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d116      	bne.n	8001740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	4b41      	ldr	r3, [pc, #260]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_RCC_OscConfig+0x152>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e1c7      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b3b      	ldr	r3, [pc, #236]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4937      	ldr	r1, [pc, #220]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	e03a      	b.n	80017b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d020      	beq.n	800178a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001748:	4b34      	ldr	r3, [pc, #208]	@ (800181c <HAL_RCC_OscConfig+0x244>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff fc33 	bl	8000fb8 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff fc2f 	bl	8000fb8 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1a8      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	4b2b      	ldr	r3, [pc, #172]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001774:	4b28      	ldr	r3, [pc, #160]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4925      	ldr	r1, [pc, #148]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178a:	4b24      	ldr	r3, [pc, #144]	@ (800181c <HAL_RCC_OscConfig+0x244>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fc12 	bl	8000fb8 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001798:	f7ff fc0e 	bl	8000fb8 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e187      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d036      	beq.n	8001830 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d016      	beq.n	80017f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_RCC_OscConfig+0x248>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fbf2 	bl	8000fb8 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff fbee 	bl	8000fb8 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e167      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 80017ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x200>
 80017f6:	e01b      	b.n	8001830 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f8:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <HAL_RCC_OscConfig+0x248>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fbdb 	bl	8000fb8 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001804:	e00e      	b.n	8001824 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001806:	f7ff fbd7 	bl	8000fb8 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d907      	bls.n	8001824 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e150      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
 8001818:	40023800 	.word	0x40023800
 800181c:	42470000 	.word	0x42470000
 8001820:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001824:	4b88      	ldr	r3, [pc, #544]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ea      	bne.n	8001806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8097 	beq.w	800196c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001842:	4b81      	ldr	r3, [pc, #516]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10f      	bne.n	800186e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b7d      	ldr	r3, [pc, #500]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	4a7c      	ldr	r2, [pc, #496]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	@ 0x40
 800185e:	4b7a      	ldr	r3, [pc, #488]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186a:	2301      	movs	r3, #1
 800186c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186e:	4b77      	ldr	r3, [pc, #476]	@ (8001a4c <HAL_RCC_OscConfig+0x474>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d118      	bne.n	80018ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187a:	4b74      	ldr	r3, [pc, #464]	@ (8001a4c <HAL_RCC_OscConfig+0x474>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a73      	ldr	r2, [pc, #460]	@ (8001a4c <HAL_RCC_OscConfig+0x474>)
 8001880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001886:	f7ff fb97 	bl	8000fb8 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188e:	f7ff fb93 	bl	8000fb8 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e10c      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	4b6a      	ldr	r3, [pc, #424]	@ (8001a4c <HAL_RCC_OscConfig+0x474>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d106      	bne.n	80018c2 <HAL_RCC_OscConfig+0x2ea>
 80018b4:	4b64      	ldr	r3, [pc, #400]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b8:	4a63      	ldr	r2, [pc, #396]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c0:	e01c      	b.n	80018fc <HAL_RCC_OscConfig+0x324>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x30c>
 80018ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018da:	4a5b      	ldr	r2, [pc, #364]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0x324>
 80018e4:	4b58      	ldr	r3, [pc, #352]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e8:	4a57      	ldr	r2, [pc, #348]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f0:	4b55      	ldr	r3, [pc, #340]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f4:	4a54      	ldr	r2, [pc, #336]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018f6:	f023 0304 	bic.w	r3, r3, #4
 80018fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d015      	beq.n	8001930 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff fb58 	bl	8000fb8 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190a:	e00a      	b.n	8001922 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190c:	f7ff fb54 	bl	8000fb8 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0cb      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001922:	4b49      	ldr	r3, [pc, #292]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0ee      	beq.n	800190c <HAL_RCC_OscConfig+0x334>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001930:	f7ff fb42 	bl	8000fb8 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001936:	e00a      	b.n	800194e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001938:	f7ff fb3e 	bl	8000fb8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e0b5      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1ee      	bne.n	8001938 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d105      	bne.n	800196c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001960:	4b39      	ldr	r3, [pc, #228]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001964:	4a38      	ldr	r2, [pc, #224]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800196a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80a1 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001976:	4b34      	ldr	r3, [pc, #208]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b08      	cmp	r3, #8
 8001980:	d05c      	beq.n	8001a3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d141      	bne.n	8001a0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <HAL_RCC_OscConfig+0x478>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fb12 	bl	8000fb8 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff fb0e 	bl	8000fb8 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e087      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	019b      	lsls	r3, r3, #6
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	3b01      	subs	r3, #1
 80019d0:	041b      	lsls	r3, r3, #16
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d8:	061b      	lsls	r3, r3, #24
 80019da:	491b      	ldr	r1, [pc, #108]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <HAL_RCC_OscConfig+0x478>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7ff fae7 	bl	8000fb8 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff fae3 	bl	8000fb8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e05c      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x416>
 8001a0c:	e054      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_RCC_OscConfig+0x478>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff fad0 	bl	8000fb8 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff facc 	bl	8000fb8 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e045      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x444>
 8001a3a:	e03d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e038      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <HAL_RCC_OscConfig+0x4ec>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d028      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d121      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d11a      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a84:	4013      	ands	r3, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d111      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9a:	085b      	lsrs	r3, r3, #1
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d107      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0cc      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b68      	ldr	r3, [pc, #416]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d90c      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b65      	ldr	r3, [pc, #404]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b63      	ldr	r3, [pc, #396]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b8      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b1c:	4b59      	ldr	r3, [pc, #356]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a58      	ldr	r2, [pc, #352]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b34:	4b53      	ldr	r3, [pc, #332]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a52      	ldr	r2, [pc, #328]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b50      	ldr	r3, [pc, #320]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	494d      	ldr	r1, [pc, #308]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d044      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b47      	ldr	r3, [pc, #284]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d119      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d003      	beq.n	8001b86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	4b3f      	ldr	r3, [pc, #252]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e06f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	4b3b      	ldr	r3, [pc, #236]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e067      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba6:	4b37      	ldr	r3, [pc, #220]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f023 0203 	bic.w	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4934      	ldr	r1, [pc, #208]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb8:	f7ff f9fe 	bl	8000fb8 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7ff f9fa 	bl	8000fb8 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e04f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 020c 	and.w	r2, r3, #12
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d1eb      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be8:	4b25      	ldr	r3, [pc, #148]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d20c      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e032      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4916      	ldr	r1, [pc, #88]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	490e      	ldr	r1, [pc, #56]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4e:	f000 f821 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	490a      	ldr	r1, [pc, #40]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a09      	ldr	r2, [pc, #36]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f95e 	bl	8000f30 <HAL_InitTick>

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023c00 	.word	0x40023c00
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08002de4 	.word	0x08002de4
 8001c8c:	20000014 	.word	0x20000014
 8001c90:	20000018 	.word	0x20000018

08001c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c98:	b094      	sub	sp, #80	@ 0x50
 8001c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cac:	4b79      	ldr	r3, [pc, #484]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	f200 80e1 	bhi.w	8001e80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d003      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0x3a>
 8001cc6:	e0db      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc8:	4b73      	ldr	r3, [pc, #460]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ccc:	e0db      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cce:	4b73      	ldr	r3, [pc, #460]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x208>)
 8001cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cd2:	e0d8      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd4:	4b6f      	ldr	r3, [pc, #444]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cdc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cde:	4b6d      	ldr	r3, [pc, #436]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d063      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cea:	4b6a      	ldr	r3, [pc, #424]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	099b      	lsrs	r3, r3, #6
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cf4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cfe:	2300      	movs	r3, #0
 8001d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d06:	4622      	mov	r2, r4
 8001d08:	462b      	mov	r3, r5
 8001d0a:	f04f 0000 	mov.w	r0, #0
 8001d0e:	f04f 0100 	mov.w	r1, #0
 8001d12:	0159      	lsls	r1, r3, #5
 8001d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d18:	0150      	lsls	r0, r2, #5
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4621      	mov	r1, r4
 8001d20:	1a51      	subs	r1, r2, r1
 8001d22:	6139      	str	r1, [r7, #16]
 8001d24:	4629      	mov	r1, r5
 8001d26:	eb63 0301 	sbc.w	r3, r3, r1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d38:	4659      	mov	r1, fp
 8001d3a:	018b      	lsls	r3, r1, #6
 8001d3c:	4651      	mov	r1, sl
 8001d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d42:	4651      	mov	r1, sl
 8001d44:	018a      	lsls	r2, r1, #6
 8001d46:	4651      	mov	r1, sl
 8001d48:	ebb2 0801 	subs.w	r8, r2, r1
 8001d4c:	4659      	mov	r1, fp
 8001d4e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d66:	4690      	mov	r8, r2
 8001d68:	4699      	mov	r9, r3
 8001d6a:	4623      	mov	r3, r4
 8001d6c:	eb18 0303 	adds.w	r3, r8, r3
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	462b      	mov	r3, r5
 8001d74:	eb49 0303 	adc.w	r3, r9, r3
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d86:	4629      	mov	r1, r5
 8001d88:	024b      	lsls	r3, r1, #9
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d90:	4621      	mov	r1, r4
 8001d92:	024a      	lsls	r2, r1, #9
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001da0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001da4:	f7fe fa16 	bl	80001d4 <__aeabi_uldivmod>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4613      	mov	r3, r2
 8001dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001db0:	e058      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db2:	4b38      	ldr	r3, [pc, #224]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	099b      	lsrs	r3, r3, #6
 8001db8:	2200      	movs	r2, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dc2:	623b      	str	r3, [r7, #32]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dcc:	4642      	mov	r2, r8
 8001dce:	464b      	mov	r3, r9
 8001dd0:	f04f 0000 	mov.w	r0, #0
 8001dd4:	f04f 0100 	mov.w	r1, #0
 8001dd8:	0159      	lsls	r1, r3, #5
 8001dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dde:	0150      	lsls	r0, r2, #5
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4641      	mov	r1, r8
 8001de6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dea:	4649      	mov	r1, r9
 8001dec:	eb63 0b01 	sbc.w	fp, r3, r1
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e04:	ebb2 040a 	subs.w	r4, r2, sl
 8001e08:	eb63 050b 	sbc.w	r5, r3, fp
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	00eb      	lsls	r3, r5, #3
 8001e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e1a:	00e2      	lsls	r2, r4, #3
 8001e1c:	4614      	mov	r4, r2
 8001e1e:	461d      	mov	r5, r3
 8001e20:	4643      	mov	r3, r8
 8001e22:	18e3      	adds	r3, r4, r3
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	464b      	mov	r3, r9
 8001e28:	eb45 0303 	adc.w	r3, r5, r3
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	028b      	lsls	r3, r1, #10
 8001e3e:	4621      	mov	r1, r4
 8001e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e44:	4621      	mov	r1, r4
 8001e46:	028a      	lsls	r2, r1, #10
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	61fa      	str	r2, [r7, #28]
 8001e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e58:	f7fe f9bc 	bl	80001d4 <__aeabi_uldivmod>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4613      	mov	r3, r2
 8001e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e64:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e7e:	e002      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e80:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3750      	adds	r7, #80	@ 0x50
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	00f42400 	.word	0x00f42400
 8001e9c:	007a1200 	.word	0x007a1200

08001ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	@ (8001eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000014 	.word	0x20000014

08001eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ebc:	f7ff fff0 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0a9b      	lsrs	r3, r3, #10
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4903      	ldr	r1, [pc, #12]	@ (8001edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	08002df4 	.word	0x08002df4

08001ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ee4:	f7ff ffdc 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	0b5b      	lsrs	r3, r3, #13
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	4903      	ldr	r1, [pc, #12]	@ (8001f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	08002df4 	.word	0x08002df4

08001f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e041      	b.n	8001f9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe feb2 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3304      	adds	r3, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f000 faa8 	bl	800249c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d001      	beq.n	8001fc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e044      	b.n	800204a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8002058 <HAL_TIM_Base_Start_IT+0xb0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d018      	beq.n	8002014 <HAL_TIM_Base_Start_IT+0x6c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fea:	d013      	beq.n	8002014 <HAL_TIM_Base_Start_IT+0x6c>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800205c <HAL_TIM_Base_Start_IT+0xb4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00e      	beq.n	8002014 <HAL_TIM_Base_Start_IT+0x6c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a19      	ldr	r2, [pc, #100]	@ (8002060 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d009      	beq.n	8002014 <HAL_TIM_Base_Start_IT+0x6c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a17      	ldr	r2, [pc, #92]	@ (8002064 <HAL_TIM_Base_Start_IT+0xbc>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d004      	beq.n	8002014 <HAL_TIM_Base_Start_IT+0x6c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a16      	ldr	r2, [pc, #88]	@ (8002068 <HAL_TIM_Base_Start_IT+0xc0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d111      	bne.n	8002038 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b06      	cmp	r3, #6
 8002024:	d010      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002036:	e007      	b.n	8002048 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40010000 	.word	0x40010000
 800205c:	40000400 	.word	0x40000400
 8002060:	40000800 	.word	0x40000800
 8002064:	40000c00 	.word	0x40000c00
 8002068:	40014000 	.word	0x40014000

0800206c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6a1a      	ldr	r2, [r3, #32]
 800208a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10f      	bne.n	80020b4 <HAL_TIM_Base_Stop_IT+0x48>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6a1a      	ldr	r2, [r3, #32]
 800209a:	f240 4344 	movw	r3, #1092	@ 0x444
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d107      	bne.n	80020b4 <HAL_TIM_Base_Stop_IT+0x48>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0201 	bic.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d020      	beq.n	800212e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d01b      	beq.n	800212e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f06f 0202 	mvn.w	r2, #2
 80020fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f9a3 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 800211a:	e005      	b.n	8002128 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f995 	bl	800244c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f9a6 	bl	8002474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d020      	beq.n	800217a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d01b      	beq.n	800217a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f06f 0204 	mvn.w	r2, #4
 800214a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f97d 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 8002166:	e005      	b.n	8002174 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f96f 	bl	800244c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f980 	bl	8002474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d01b      	beq.n	80021c6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f06f 0208 	mvn.w	r2, #8
 8002196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2204      	movs	r2, #4
 800219c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f957 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 80021b2:	e005      	b.n	80021c0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f949 	bl	800244c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f95a 	bl	8002474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d020      	beq.n	8002212 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01b      	beq.n	8002212 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f06f 0210 	mvn.w	r2, #16
 80021e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2208      	movs	r2, #8
 80021e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f931 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 80021fe:	e005      	b.n	800220c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f923 	bl	800244c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f934 	bl	8002474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00c      	beq.n	8002236 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f06f 0201 	mvn.w	r2, #1
 800222e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f901 	bl	8002438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00c      	beq.n	800225a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fabf 	bl	80027d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00c      	beq.n	800227e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d007      	beq.n	800227e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f905 	bl	8002488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00c      	beq.n	80022a2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f06f 0220 	mvn.w	r2, #32
 800229a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fa91 	bl	80027c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_TIM_ConfigClockSource+0x1c>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e0b4      	b.n	8002430 <HAL_TIM_ConfigClockSource+0x186>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80022e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022fe:	d03e      	beq.n	800237e <HAL_TIM_ConfigClockSource+0xd4>
 8002300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002304:	f200 8087 	bhi.w	8002416 <HAL_TIM_ConfigClockSource+0x16c>
 8002308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800230c:	f000 8086 	beq.w	800241c <HAL_TIM_ConfigClockSource+0x172>
 8002310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002314:	d87f      	bhi.n	8002416 <HAL_TIM_ConfigClockSource+0x16c>
 8002316:	2b70      	cmp	r3, #112	@ 0x70
 8002318:	d01a      	beq.n	8002350 <HAL_TIM_ConfigClockSource+0xa6>
 800231a:	2b70      	cmp	r3, #112	@ 0x70
 800231c:	d87b      	bhi.n	8002416 <HAL_TIM_ConfigClockSource+0x16c>
 800231e:	2b60      	cmp	r3, #96	@ 0x60
 8002320:	d050      	beq.n	80023c4 <HAL_TIM_ConfigClockSource+0x11a>
 8002322:	2b60      	cmp	r3, #96	@ 0x60
 8002324:	d877      	bhi.n	8002416 <HAL_TIM_ConfigClockSource+0x16c>
 8002326:	2b50      	cmp	r3, #80	@ 0x50
 8002328:	d03c      	beq.n	80023a4 <HAL_TIM_ConfigClockSource+0xfa>
 800232a:	2b50      	cmp	r3, #80	@ 0x50
 800232c:	d873      	bhi.n	8002416 <HAL_TIM_ConfigClockSource+0x16c>
 800232e:	2b40      	cmp	r3, #64	@ 0x40
 8002330:	d058      	beq.n	80023e4 <HAL_TIM_ConfigClockSource+0x13a>
 8002332:	2b40      	cmp	r3, #64	@ 0x40
 8002334:	d86f      	bhi.n	8002416 <HAL_TIM_ConfigClockSource+0x16c>
 8002336:	2b30      	cmp	r3, #48	@ 0x30
 8002338:	d064      	beq.n	8002404 <HAL_TIM_ConfigClockSource+0x15a>
 800233a:	2b30      	cmp	r3, #48	@ 0x30
 800233c:	d86b      	bhi.n	8002416 <HAL_TIM_ConfigClockSource+0x16c>
 800233e:	2b20      	cmp	r3, #32
 8002340:	d060      	beq.n	8002404 <HAL_TIM_ConfigClockSource+0x15a>
 8002342:	2b20      	cmp	r3, #32
 8002344:	d867      	bhi.n	8002416 <HAL_TIM_ConfigClockSource+0x16c>
 8002346:	2b00      	cmp	r3, #0
 8002348:	d05c      	beq.n	8002404 <HAL_TIM_ConfigClockSource+0x15a>
 800234a:	2b10      	cmp	r3, #16
 800234c:	d05a      	beq.n	8002404 <HAL_TIM_ConfigClockSource+0x15a>
 800234e:	e062      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002360:	f000 f9a2 	bl	80026a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002372:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	609a      	str	r2, [r3, #8]
      break;
 800237c:	e04f      	b.n	800241e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800238e:	f000 f98b 	bl	80026a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023a0:	609a      	str	r2, [r3, #8]
      break;
 80023a2:	e03c      	b.n	800241e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023b0:	461a      	mov	r2, r3
 80023b2:	f000 f8ff 	bl	80025b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2150      	movs	r1, #80	@ 0x50
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 f958 	bl	8002672 <TIM_ITRx_SetConfig>
      break;
 80023c2:	e02c      	b.n	800241e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023d0:	461a      	mov	r2, r3
 80023d2:	f000 f91e 	bl	8002612 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2160      	movs	r1, #96	@ 0x60
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f948 	bl	8002672 <TIM_ITRx_SetConfig>
      break;
 80023e2:	e01c      	b.n	800241e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023f0:	461a      	mov	r2, r3
 80023f2:	f000 f8df 	bl	80025b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2140      	movs	r1, #64	@ 0x40
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f938 	bl	8002672 <TIM_ITRx_SetConfig>
      break;
 8002402:	e00c      	b.n	800241e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f000 f92f 	bl	8002672 <TIM_ITRx_SetConfig>
      break;
 8002414:	e003      	b.n	800241e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
      break;
 800241a:	e000      	b.n	800241e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800241c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a3a      	ldr	r2, [pc, #232]	@ (8002598 <TIM_Base_SetConfig+0xfc>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00f      	beq.n	80024d4 <TIM_Base_SetConfig+0x38>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ba:	d00b      	beq.n	80024d4 <TIM_Base_SetConfig+0x38>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a37      	ldr	r2, [pc, #220]	@ (800259c <TIM_Base_SetConfig+0x100>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d007      	beq.n	80024d4 <TIM_Base_SetConfig+0x38>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a36      	ldr	r2, [pc, #216]	@ (80025a0 <TIM_Base_SetConfig+0x104>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d003      	beq.n	80024d4 <TIM_Base_SetConfig+0x38>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a35      	ldr	r2, [pc, #212]	@ (80025a4 <TIM_Base_SetConfig+0x108>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d108      	bne.n	80024e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002598 <TIM_Base_SetConfig+0xfc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d01b      	beq.n	8002526 <TIM_Base_SetConfig+0x8a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024f4:	d017      	beq.n	8002526 <TIM_Base_SetConfig+0x8a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a28      	ldr	r2, [pc, #160]	@ (800259c <TIM_Base_SetConfig+0x100>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d013      	beq.n	8002526 <TIM_Base_SetConfig+0x8a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a27      	ldr	r2, [pc, #156]	@ (80025a0 <TIM_Base_SetConfig+0x104>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00f      	beq.n	8002526 <TIM_Base_SetConfig+0x8a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a26      	ldr	r2, [pc, #152]	@ (80025a4 <TIM_Base_SetConfig+0x108>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00b      	beq.n	8002526 <TIM_Base_SetConfig+0x8a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a25      	ldr	r2, [pc, #148]	@ (80025a8 <TIM_Base_SetConfig+0x10c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d007      	beq.n	8002526 <TIM_Base_SetConfig+0x8a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a24      	ldr	r2, [pc, #144]	@ (80025ac <TIM_Base_SetConfig+0x110>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d003      	beq.n	8002526 <TIM_Base_SetConfig+0x8a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a23      	ldr	r2, [pc, #140]	@ (80025b0 <TIM_Base_SetConfig+0x114>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d108      	bne.n	8002538 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800252c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a0e      	ldr	r2, [pc, #56]	@ (8002598 <TIM_Base_SetConfig+0xfc>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d103      	bne.n	800256c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b01      	cmp	r3, #1
 800257c:	d105      	bne.n	800258a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f023 0201 	bic.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	611a      	str	r2, [r3, #16]
  }
}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40010000 	.word	0x40010000
 800259c:	40000400 	.word	0x40000400
 80025a0:	40000800 	.word	0x40000800
 80025a4:	40000c00 	.word	0x40000c00
 80025a8:	40014000 	.word	0x40014000
 80025ac:	40014400 	.word	0x40014400
 80025b0:	40014800 	.word	0x40014800

080025b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f023 0201 	bic.w	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f023 030a 	bic.w	r3, r3, #10
 80025f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	621a      	str	r2, [r3, #32]
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002612:	b480      	push	{r7}
 8002614:	b087      	sub	sp, #28
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f023 0210 	bic.w	r2, r3, #16
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800263c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	031b      	lsls	r3, r3, #12
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800264e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	621a      	str	r2, [r3, #32]
}
 8002666:	bf00      	nop
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002672:	b480      	push	{r7}
 8002674:	b085      	sub	sp, #20
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	f043 0307 	orr.w	r3, r3, #7
 8002694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	609a      	str	r2, [r3, #8]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	021a      	lsls	r2, r3, #8
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	609a      	str	r2, [r3, #8]
}
 80026dc:	bf00      	nop
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e050      	b.n	80027a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1c      	ldr	r2, [pc, #112]	@ (80027b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d018      	beq.n	8002776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800274c:	d013      	beq.n	8002776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a18      	ldr	r2, [pc, #96]	@ (80027b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d00e      	beq.n	8002776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a16      	ldr	r2, [pc, #88]	@ (80027b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d009      	beq.n	8002776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a15      	ldr	r2, [pc, #84]	@ (80027bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d004      	beq.n	8002776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a13      	ldr	r2, [pc, #76]	@ (80027c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10c      	bne.n	8002790 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800277c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	4313      	orrs	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40010000 	.word	0x40010000
 80027b4:	40000400 	.word	0x40000400
 80027b8:	40000800 	.word	0x40000800
 80027bc:	40000c00 	.word	0x40000c00
 80027c0:	40014000 	.word	0x40014000

080027c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e042      	b.n	8002884 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe fa68 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2224      	movs	r2, #36	@ 0x24
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800282e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f82b 	bl	800288c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800288c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002890:	b0c0      	sub	sp, #256	@ 0x100
 8002892:	af00      	add	r7, sp, #0
 8002894:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a8:	68d9      	ldr	r1, [r3, #12]
 80028aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	ea40 0301 	orr.w	r3, r0, r1
 80028b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028e4:	f021 010c 	bic.w	r1, r1, #12
 80028e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028f2:	430b      	orrs	r3, r1
 80028f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002906:	6999      	ldr	r1, [r3, #24]
 8002908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	ea40 0301 	orr.w	r3, r0, r1
 8002912:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4b8f      	ldr	r3, [pc, #572]	@ (8002b58 <UART_SetConfig+0x2cc>)
 800291c:	429a      	cmp	r2, r3
 800291e:	d005      	beq.n	800292c <UART_SetConfig+0xa0>
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b8d      	ldr	r3, [pc, #564]	@ (8002b5c <UART_SetConfig+0x2d0>)
 8002928:	429a      	cmp	r2, r3
 800292a:	d104      	bne.n	8002936 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800292c:	f7ff fad8 	bl	8001ee0 <HAL_RCC_GetPCLK2Freq>
 8002930:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002934:	e003      	b.n	800293e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002936:	f7ff fabf 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 800293a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800293e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002948:	f040 810c 	bne.w	8002b64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800294c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002950:	2200      	movs	r2, #0
 8002952:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002956:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800295a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800295e:	4622      	mov	r2, r4
 8002960:	462b      	mov	r3, r5
 8002962:	1891      	adds	r1, r2, r2
 8002964:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002966:	415b      	adcs	r3, r3
 8002968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800296a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800296e:	4621      	mov	r1, r4
 8002970:	eb12 0801 	adds.w	r8, r2, r1
 8002974:	4629      	mov	r1, r5
 8002976:	eb43 0901 	adc.w	r9, r3, r1
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800298a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800298e:	4690      	mov	r8, r2
 8002990:	4699      	mov	r9, r3
 8002992:	4623      	mov	r3, r4
 8002994:	eb18 0303 	adds.w	r3, r8, r3
 8002998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800299c:	462b      	mov	r3, r5
 800299e:	eb49 0303 	adc.w	r3, r9, r3
 80029a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80029b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029ba:	460b      	mov	r3, r1
 80029bc:	18db      	adds	r3, r3, r3
 80029be:	653b      	str	r3, [r7, #80]	@ 0x50
 80029c0:	4613      	mov	r3, r2
 80029c2:	eb42 0303 	adc.w	r3, r2, r3
 80029c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80029c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029d0:	f7fd fc00 	bl	80001d4 <__aeabi_uldivmod>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4b61      	ldr	r3, [pc, #388]	@ (8002b60 <UART_SetConfig+0x2d4>)
 80029da:	fba3 2302 	umull	r2, r3, r3, r2
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	011c      	lsls	r4, r3, #4
 80029e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029f4:	4642      	mov	r2, r8
 80029f6:	464b      	mov	r3, r9
 80029f8:	1891      	adds	r1, r2, r2
 80029fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029fc:	415b      	adcs	r3, r3
 80029fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a04:	4641      	mov	r1, r8
 8002a06:	eb12 0a01 	adds.w	sl, r2, r1
 8002a0a:	4649      	mov	r1, r9
 8002a0c:	eb43 0b01 	adc.w	fp, r3, r1
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a24:	4692      	mov	sl, r2
 8002a26:	469b      	mov	fp, r3
 8002a28:	4643      	mov	r3, r8
 8002a2a:	eb1a 0303 	adds.w	r3, sl, r3
 8002a2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a32:	464b      	mov	r3, r9
 8002a34:	eb4b 0303 	adc.w	r3, fp, r3
 8002a38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a50:	460b      	mov	r3, r1
 8002a52:	18db      	adds	r3, r3, r3
 8002a54:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a56:	4613      	mov	r3, r2
 8002a58:	eb42 0303 	adc.w	r3, r2, r3
 8002a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a66:	f7fd fbb5 	bl	80001d4 <__aeabi_uldivmod>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4b3b      	ldr	r3, [pc, #236]	@ (8002b60 <UART_SetConfig+0x2d4>)
 8002a72:	fba3 2301 	umull	r2, r3, r3, r1
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2264      	movs	r2, #100	@ 0x64
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	1acb      	subs	r3, r1, r3
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a86:	4b36      	ldr	r3, [pc, #216]	@ (8002b60 <UART_SetConfig+0x2d4>)
 8002a88:	fba3 2302 	umull	r2, r3, r3, r2
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a94:	441c      	add	r4, r3
 8002a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002aa0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002aa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	464b      	mov	r3, r9
 8002aac:	1891      	adds	r1, r2, r2
 8002aae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ab0:	415b      	adcs	r3, r3
 8002ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ab4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ab8:	4641      	mov	r1, r8
 8002aba:	1851      	adds	r1, r2, r1
 8002abc:	6339      	str	r1, [r7, #48]	@ 0x30
 8002abe:	4649      	mov	r1, r9
 8002ac0:	414b      	adcs	r3, r1
 8002ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ad0:	4659      	mov	r1, fp
 8002ad2:	00cb      	lsls	r3, r1, #3
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ada:	4651      	mov	r1, sl
 8002adc:	00ca      	lsls	r2, r1, #3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4642      	mov	r2, r8
 8002ae6:	189b      	adds	r3, r3, r2
 8002ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002aec:	464b      	mov	r3, r9
 8002aee:	460a      	mov	r2, r1
 8002af0:	eb42 0303 	adc.w	r3, r2, r3
 8002af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	18db      	adds	r3, r3, r3
 8002b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b12:	4613      	mov	r3, r2
 8002b14:	eb42 0303 	adc.w	r3, r2, r3
 8002b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b22:	f7fd fb57 	bl	80001d4 <__aeabi_uldivmod>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b60 <UART_SetConfig+0x2d4>)
 8002b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	2164      	movs	r1, #100	@ 0x64
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	3332      	adds	r3, #50	@ 0x32
 8002b3e:	4a08      	ldr	r2, [pc, #32]	@ (8002b60 <UART_SetConfig+0x2d4>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	f003 0207 	and.w	r2, r3, #7
 8002b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4422      	add	r2, r4
 8002b52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b54:	e106      	b.n	8002d64 <UART_SetConfig+0x4d8>
 8002b56:	bf00      	nop
 8002b58:	40011000 	.word	0x40011000
 8002b5c:	40011400 	.word	0x40011400
 8002b60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b76:	4642      	mov	r2, r8
 8002b78:	464b      	mov	r3, r9
 8002b7a:	1891      	adds	r1, r2, r2
 8002b7c:	6239      	str	r1, [r7, #32]
 8002b7e:	415b      	adcs	r3, r3
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b86:	4641      	mov	r1, r8
 8002b88:	1854      	adds	r4, r2, r1
 8002b8a:	4649      	mov	r1, r9
 8002b8c:	eb43 0501 	adc.w	r5, r3, r1
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	00eb      	lsls	r3, r5, #3
 8002b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b9e:	00e2      	lsls	r2, r4, #3
 8002ba0:	4614      	mov	r4, r2
 8002ba2:	461d      	mov	r5, r3
 8002ba4:	4643      	mov	r3, r8
 8002ba6:	18e3      	adds	r3, r4, r3
 8002ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bac:	464b      	mov	r3, r9
 8002bae:	eb45 0303 	adc.w	r3, r5, r3
 8002bb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	008b      	lsls	r3, r1, #2
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bdc:	4621      	mov	r1, r4
 8002bde:	008a      	lsls	r2, r1, #2
 8002be0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002be4:	f7fd faf6 	bl	80001d4 <__aeabi_uldivmod>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4b60      	ldr	r3, [pc, #384]	@ (8002d70 <UART_SetConfig+0x4e4>)
 8002bee:	fba3 2302 	umull	r2, r3, r3, r2
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	011c      	lsls	r4, r3, #4
 8002bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c08:	4642      	mov	r2, r8
 8002c0a:	464b      	mov	r3, r9
 8002c0c:	1891      	adds	r1, r2, r2
 8002c0e:	61b9      	str	r1, [r7, #24]
 8002c10:	415b      	adcs	r3, r3
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c18:	4641      	mov	r1, r8
 8002c1a:	1851      	adds	r1, r2, r1
 8002c1c:	6139      	str	r1, [r7, #16]
 8002c1e:	4649      	mov	r1, r9
 8002c20:	414b      	adcs	r3, r1
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c30:	4659      	mov	r1, fp
 8002c32:	00cb      	lsls	r3, r1, #3
 8002c34:	4651      	mov	r1, sl
 8002c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c3a:	4651      	mov	r1, sl
 8002c3c:	00ca      	lsls	r2, r1, #3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	4619      	mov	r1, r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	4642      	mov	r2, r8
 8002c46:	189b      	adds	r3, r3, r2
 8002c48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c4c:	464b      	mov	r3, r9
 8002c4e:	460a      	mov	r2, r1
 8002c50:	eb42 0303 	adc.w	r3, r2, r3
 8002c54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c70:	4649      	mov	r1, r9
 8002c72:	008b      	lsls	r3, r1, #2
 8002c74:	4641      	mov	r1, r8
 8002c76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c7a:	4641      	mov	r1, r8
 8002c7c:	008a      	lsls	r2, r1, #2
 8002c7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c82:	f7fd faa7 	bl	80001d4 <__aeabi_uldivmod>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4b38      	ldr	r3, [pc, #224]	@ (8002d70 <UART_SetConfig+0x4e4>)
 8002c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	2264      	movs	r2, #100	@ 0x64
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	1acb      	subs	r3, r1, r3
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	3332      	adds	r3, #50	@ 0x32
 8002ca0:	4a33      	ldr	r2, [pc, #204]	@ (8002d70 <UART_SetConfig+0x4e4>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cac:	441c      	add	r4, r3
 8002cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002cbc:	4642      	mov	r2, r8
 8002cbe:	464b      	mov	r3, r9
 8002cc0:	1891      	adds	r1, r2, r2
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	415b      	adcs	r3, r3
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ccc:	4641      	mov	r1, r8
 8002cce:	1851      	adds	r1, r2, r1
 8002cd0:	6039      	str	r1, [r7, #0]
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	414b      	adcs	r3, r1
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ce4:	4659      	mov	r1, fp
 8002ce6:	00cb      	lsls	r3, r1, #3
 8002ce8:	4651      	mov	r1, sl
 8002cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cee:	4651      	mov	r1, sl
 8002cf0:	00ca      	lsls	r2, r1, #3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4642      	mov	r2, r8
 8002cfa:	189b      	adds	r3, r3, r2
 8002cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cfe:	464b      	mov	r3, r9
 8002d00:	460a      	mov	r2, r1
 8002d02:	eb42 0303 	adc.w	r3, r2, r3
 8002d06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d12:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d20:	4649      	mov	r1, r9
 8002d22:	008b      	lsls	r3, r1, #2
 8002d24:	4641      	mov	r1, r8
 8002d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d2a:	4641      	mov	r1, r8
 8002d2c:	008a      	lsls	r2, r1, #2
 8002d2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d32:	f7fd fa4f 	bl	80001d4 <__aeabi_uldivmod>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <UART_SetConfig+0x4e4>)
 8002d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	2164      	movs	r1, #100	@ 0x64
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	3332      	adds	r3, #50	@ 0x32
 8002d4e:	4a08      	ldr	r2, [pc, #32]	@ (8002d70 <UART_SetConfig+0x4e4>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	f003 020f 	and.w	r2, r3, #15
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4422      	add	r2, r4
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	bf00      	nop
 8002d66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d70:	51eb851f 	.word	0x51eb851f

08002d74 <memset>:
 8002d74:	4402      	add	r2, r0
 8002d76:	4603      	mov	r3, r0
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d100      	bne.n	8002d7e <memset+0xa>
 8002d7c:	4770      	bx	lr
 8002d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d82:	e7f9      	b.n	8002d78 <memset+0x4>

08002d84 <__libc_init_array>:
 8002d84:	b570      	push	{r4, r5, r6, lr}
 8002d86:	4d0d      	ldr	r5, [pc, #52]	@ (8002dbc <__libc_init_array+0x38>)
 8002d88:	4c0d      	ldr	r4, [pc, #52]	@ (8002dc0 <__libc_init_array+0x3c>)
 8002d8a:	1b64      	subs	r4, r4, r5
 8002d8c:	10a4      	asrs	r4, r4, #2
 8002d8e:	2600      	movs	r6, #0
 8002d90:	42a6      	cmp	r6, r4
 8002d92:	d109      	bne.n	8002da8 <__libc_init_array+0x24>
 8002d94:	4d0b      	ldr	r5, [pc, #44]	@ (8002dc4 <__libc_init_array+0x40>)
 8002d96:	4c0c      	ldr	r4, [pc, #48]	@ (8002dc8 <__libc_init_array+0x44>)
 8002d98:	f000 f818 	bl	8002dcc <_init>
 8002d9c:	1b64      	subs	r4, r4, r5
 8002d9e:	10a4      	asrs	r4, r4, #2
 8002da0:	2600      	movs	r6, #0
 8002da2:	42a6      	cmp	r6, r4
 8002da4:	d105      	bne.n	8002db2 <__libc_init_array+0x2e>
 8002da6:	bd70      	pop	{r4, r5, r6, pc}
 8002da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dac:	4798      	blx	r3
 8002dae:	3601      	adds	r6, #1
 8002db0:	e7ee      	b.n	8002d90 <__libc_init_array+0xc>
 8002db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db6:	4798      	blx	r3
 8002db8:	3601      	adds	r6, #1
 8002dba:	e7f2      	b.n	8002da2 <__libc_init_array+0x1e>
 8002dbc:	08002e04 	.word	0x08002e04
 8002dc0:	08002e04 	.word	0x08002e04
 8002dc4:	08002e04 	.word	0x08002e04
 8002dc8:	08002e08 	.word	0x08002e08

08002dcc <_init>:
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	bf00      	nop
 8002dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dd2:	bc08      	pop	{r3}
 8002dd4:	469e      	mov	lr, r3
 8002dd6:	4770      	bx	lr

08002dd8 <_fini>:
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dda:	bf00      	nop
 8002ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dde:	bc08      	pop	{r3}
 8002de0:	469e      	mov	lr, r3
 8002de2:	4770      	bx	lr
