
Pomodoro_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d84  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002f18  08002f18  00003f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f30  08002f30  0000402c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002f30  08002f30  00003f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f38  08002f38  0000402c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f38  08002f38  00003f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f3c  08002f3c  00003f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08002f40  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000002c  08002f6c  0000402c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002f6c  000040f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c868  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd4  00000000  00000000  000108c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00012498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000977  00000000  00000000  000130a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016498  00000000  00000000  00013a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3cf  00000000  00000000  00029eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dfbc  00000000  00000000  00037286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5242  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032ec  00000000  00000000  000c5288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000c8574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002f00 	.word	0x08002f00

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	08002f00 	.word	0x08002f00

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <Delay_us>:
									};

static uint8_t tm1637currentdisplayvalue[MAX_NO_OF_CHARACTERS] = { };

void Delay_us(int time)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < time; i++)
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	e00c      	b.n	8000528 <Delay_us+0x28>
		{
			for(int j = 0; j < 3; j++)
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	e003      	b.n	800051c <Delay_us+0x1c>
				__asm__("nop");
 8000514:	bf00      	nop
			for(int j = 0; j < 3; j++)
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	3301      	adds	r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	2b02      	cmp	r3, #2
 8000520:	ddf8      	ble.n	8000514 <Delay_us+0x14>
	for(int i = 0; i < time; i++)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	429a      	cmp	r2, r3
 800052e:	dbee      	blt.n	800050e <Delay_us+0xe>
		}
}
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
	...

08000540 <TM1637_Start>:
void TM1637_Start (void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0

	CLK_HIGH();
 8000544:	2201      	movs	r2, #1
 8000546:	2110      	movs	r1, #16
 8000548:	4808      	ldr	r0, [pc, #32]	@ (800056c <TM1637_Start+0x2c>)
 800054a:	f001 f8a1 	bl	8001690 <HAL_GPIO_WritePin>
	DATA_HIGH();
 800054e:	2201      	movs	r2, #1
 8000550:	2120      	movs	r1, #32
 8000552:	4806      	ldr	r0, [pc, #24]	@ (800056c <TM1637_Start+0x2c>)
 8000554:	f001 f89c 	bl	8001690 <HAL_GPIO_WritePin>
	Delay_us (2);
 8000558:	2002      	movs	r0, #2
 800055a:	f7ff ffd1 	bl	8000500 <Delay_us>
	DATA_LOW();
 800055e:	2200      	movs	r2, #0
 8000560:	2120      	movs	r1, #32
 8000562:	4802      	ldr	r0, [pc, #8]	@ (800056c <TM1637_Start+0x2c>)
 8000564:	f001 f894 	bl	8001690 <HAL_GPIO_WritePin>
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40020400 	.word	0x40020400

08000570 <TM1637_Stop>:

void TM1637_Stop (void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	CLK_LOW();
 8000574:	2200      	movs	r2, #0
 8000576:	2110      	movs	r1, #16
 8000578:	480e      	ldr	r0, [pc, #56]	@ (80005b4 <TM1637_Stop+0x44>)
 800057a:	f001 f889 	bl	8001690 <HAL_GPIO_WritePin>
	Delay_us (2);
 800057e:	2002      	movs	r0, #2
 8000580:	f7ff ffbe 	bl	8000500 <Delay_us>
	DATA_LOW();
 8000584:	2200      	movs	r2, #0
 8000586:	2120      	movs	r1, #32
 8000588:	480a      	ldr	r0, [pc, #40]	@ (80005b4 <TM1637_Stop+0x44>)
 800058a:	f001 f881 	bl	8001690 <HAL_GPIO_WritePin>
	Delay_us (2);
 800058e:	2002      	movs	r0, #2
 8000590:	f7ff ffb6 	bl	8000500 <Delay_us>
	CLK_HIGH();
 8000594:	2201      	movs	r2, #1
 8000596:	2110      	movs	r1, #16
 8000598:	4806      	ldr	r0, [pc, #24]	@ (80005b4 <TM1637_Stop+0x44>)
 800059a:	f001 f879 	bl	8001690 <HAL_GPIO_WritePin>
	Delay_us (2);
 800059e:	2002      	movs	r0, #2
 80005a0:	f7ff ffae 	bl	8000500 <Delay_us>
	DATA_HIGH();
 80005a4:	2201      	movs	r2, #1
 80005a6:	2120      	movs	r1, #32
 80005a8:	4802      	ldr	r0, [pc, #8]	@ (80005b4 <TM1637_Stop+0x44>)
 80005aa:	f001 f871 	bl	8001690 <HAL_GPIO_WritePin>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40020400 	.word	0x40020400

080005b8 <TM1637_WaitForAck>:

void TM1637_WaitForAck (void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	CLK_LOW();
 80005bc:	2200      	movs	r2, #0
 80005be:	2110      	movs	r1, #16
 80005c0:	480a      	ldr	r0, [pc, #40]	@ (80005ec <TM1637_WaitForAck+0x34>)
 80005c2:	f001 f865 	bl	8001690 <HAL_GPIO_WritePin>
	Delay_us (5); // After the falling edge of the eighth clock delay 5us
 80005c6:	2005      	movs	r0, #5
 80005c8:	f7ff ff9a 	bl	8000500 <Delay_us>
	              // ACK signals the beginning of judgment
	CLK_HIGH();
 80005cc:	2201      	movs	r2, #1
 80005ce:	2110      	movs	r1, #16
 80005d0:	4806      	ldr	r0, [pc, #24]	@ (80005ec <TM1637_WaitForAck+0x34>)
 80005d2:	f001 f85d 	bl	8001690 <HAL_GPIO_WritePin>
	Delay_us (2);
 80005d6:	2002      	movs	r0, #2
 80005d8:	f7ff ff92 	bl	8000500 <Delay_us>
	CLK_LOW();
 80005dc:	2200      	movs	r2, #0
 80005de:	2110      	movs	r1, #16
 80005e0:	4802      	ldr	r0, [pc, #8]	@ (80005ec <TM1637_WaitForAck+0x34>)
 80005e2:	f001 f855 	bl	8001690 <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40020400 	.word	0x40020400

080005f0 <TM1637_WriteByte>:

void TM1637_WriteByte (uint8_t byte)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	int i;
	for (i = 0; i<8; i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	e025      	b.n	800064c <TM1637_WriteByte+0x5c>
	{
		CLK_LOW();
 8000600:	2200      	movs	r2, #0
 8000602:	2110      	movs	r1, #16
 8000604:	4815      	ldr	r0, [pc, #84]	@ (800065c <TM1637_WriteByte+0x6c>)
 8000606:	f001 f843 	bl	8001690 <HAL_GPIO_WritePin>
		if (byte & 0x01) // low front
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	2b00      	cmp	r3, #0
 8000612:	d005      	beq.n	8000620 <TM1637_WriteByte+0x30>
		{
			DATA_HIGH();
 8000614:	2201      	movs	r2, #1
 8000616:	2120      	movs	r1, #32
 8000618:	4810      	ldr	r0, [pc, #64]	@ (800065c <TM1637_WriteByte+0x6c>)
 800061a:	f001 f839 	bl	8001690 <HAL_GPIO_WritePin>
 800061e:	e004      	b.n	800062a <TM1637_WriteByte+0x3a>
		}
		else
		{
			DATA_LOW();
 8000620:	2200      	movs	r2, #0
 8000622:	2120      	movs	r1, #32
 8000624:	480d      	ldr	r0, [pc, #52]	@ (800065c <TM1637_WriteByte+0x6c>)
 8000626:	f001 f833 	bl	8001690 <HAL_GPIO_WritePin>
		}
		Delay_us (3);
 800062a:	2003      	movs	r0, #3
 800062c:	f7ff ff68 	bl	8000500 <Delay_us>
		byte = byte >> 1;
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	085b      	lsrs	r3, r3, #1
 8000634:	71fb      	strb	r3, [r7, #7]
		CLK_HIGH();
 8000636:	2201      	movs	r2, #1
 8000638:	2110      	movs	r1, #16
 800063a:	4808      	ldr	r0, [pc, #32]	@ (800065c <TM1637_WriteByte+0x6c>)
 800063c:	f001 f828 	bl	8001690 <HAL_GPIO_WritePin>
		Delay_us (3);
 8000640:	2003      	movs	r0, #3
 8000642:	f7ff ff5d 	bl	8000500 <Delay_us>
	for (i = 0; i<8; i++)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	3301      	adds	r3, #1
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2b07      	cmp	r3, #7
 8000650:	ddd6      	ble.n	8000600 <TM1637_WriteByte+0x10>
	}
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020400 	.word	0x40020400

08000660 <TM1637_Write>:
	TM1637_WaitForAck();
	TM1637_Stop();
}

void TM1637_Write(uint8_t datacommand,uint8_t address,uint8_t *data,uint8_t displaycommand)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	603a      	str	r2, [r7, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	460b      	mov	r3, r1
 8000670:	71bb      	strb	r3, [r7, #6]
 8000672:	4613      	mov	r3, r2
 8000674:	717b      	strb	r3, [r7, #5]
		TM1637_Start();
 8000676:	f7ff ff63 	bl	8000540 <TM1637_Start>
		TM1637_WriteByte(datacommand);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ffb7 	bl	80005f0 <TM1637_WriteByte>
		TM1637_WaitForAck();
 8000682:	f7ff ff99 	bl	80005b8 <TM1637_WaitForAck>
		TM1637_Stop();
 8000686:	f7ff ff73 	bl	8000570 <TM1637_Stop>

		TM1637_Start();
 800068a:	f7ff ff59 	bl	8000540 <TM1637_Start>
		TM1637_WriteByte(address);
 800068e:	79bb      	ldrb	r3, [r7, #6]
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ffad 	bl	80005f0 <TM1637_WriteByte>
		TM1637_WaitForAck();
 8000696:	f7ff ff8f 	bl	80005b8 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e01a      	b.n	80006d6 <TM1637_Write+0x76>
		{
			tm1637currentdisplayvalue[i] = tm1637digitpattern[data[i]];
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <TM1637_Write+0x9c>)
 80006ac:	5c99      	ldrb	r1, [r3, r2]
 80006ae:	4a14      	ldr	r2, [pc, #80]	@ (8000700 <TM1637_Write+0xa0>)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	460a      	mov	r2, r1
 80006b6:	701a      	strb	r2, [r3, #0]
			TM1637_WriteByte(tm1637digitpattern[data[i]]);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <TM1637_Write+0x9c>)
 80006c4:	5c9b      	ldrb	r3, [r3, r2]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff92 	bl	80005f0 <TM1637_WriteByte>
			TM1637_WaitForAck();
 80006cc:	f7ff ff74 	bl	80005b8 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3301      	adds	r3, #1
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b05      	cmp	r3, #5
 80006da:	dde1      	ble.n	80006a0 <TM1637_Write+0x40>
		}
		TM1637_Stop();
 80006dc:	f7ff ff48 	bl	8000570 <TM1637_Stop>

		TM1637_Start();
 80006e0:	f7ff ff2e 	bl	8000540 <TM1637_Start>
		TM1637_WriteByte(displaycommand);
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff82 	bl	80005f0 <TM1637_WriteByte>
		TM1637_WaitForAck();
 80006ec:	f7ff ff64 	bl	80005b8 <TM1637_WaitForAck>
		TM1637_Stop();
 80006f0:	f7ff ff3e 	bl	8000570 <TM1637_Stop>
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000048 	.word	0x20000048

08000704 <TM1637_Update_Data_Dots>:
			tm1637currentdisplayvalue[i] = tm1637digitpattern[dataupdate[i]];
		}
}

void TM1637_Update_Data_Dots(uint8_t *displayvalue, uint8_t status)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
	TM1637_Start();
 8000710:	f7ff ff16 	bl	8000540 <TM1637_Start>
	TM1637_WriteByte((DATA_COMMAND|WRITE_DATA_TO_DISPLAY|AUTOMATIC_ADDRESS_ADD|NORMAL_MODE));
 8000714:	2040      	movs	r0, #64	@ 0x40
 8000716:	f7ff ff6b 	bl	80005f0 <TM1637_WriteByte>
	TM1637_WaitForAck();
 800071a:	f7ff ff4d 	bl	80005b8 <TM1637_WaitForAck>
	TM1637_Stop();
 800071e:	f7ff ff27 	bl	8000570 <TM1637_Stop>

	if(status)
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d022      	beq.n	800076e <TM1637_Update_Data_Dots+0x6a>
	{
		TM1637_Start();
 8000728:	f7ff ff0a 	bl	8000540 <TM1637_Start>
		TM1637_WriteByte(DISPLAY_1_REGISTER_ADDRESS);
 800072c:	20c0      	movs	r0, #192	@ 0xc0
 800072e:	f7ff ff5f 	bl	80005f0 <TM1637_WriteByte>
		TM1637_WaitForAck();
 8000732:	f7ff ff41 	bl	80005b8 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	e012      	b.n	8000762 <TM1637_Update_Data_Dots+0x5e>
		{
			TM1637_WriteByte((tm1637digitpattern[displayvalue[i]] | tm1637digitpattern[11]));
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <TM1637_Update_Data_Dots+0xc0>)
 8000748:	5c9a      	ldrb	r2, [r3, r2]
 800074a:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <TM1637_Update_Data_Dots+0xc0>)
 800074c:	7adb      	ldrb	r3, [r3, #11]
 800074e:	4313      	orrs	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff4c 	bl	80005f0 <TM1637_WriteByte>
			TM1637_WaitForAck();
 8000758:	f7ff ff2e 	bl	80005b8 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	3301      	adds	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	2b05      	cmp	r3, #5
 8000766:	dde9      	ble.n	800073c <TM1637_Update_Data_Dots+0x38>
		}
		TM1637_Stop();
 8000768:	f7ff ff02 	bl	8000570 <TM1637_Stop>
 800076c:	e01d      	b.n	80007aa <TM1637_Update_Data_Dots+0xa6>
	}
	else
	{
		TM1637_Start();
 800076e:	f7ff fee7 	bl	8000540 <TM1637_Start>
		TM1637_WriteByte(DISPLAY_1_REGISTER_ADDRESS);
 8000772:	20c0      	movs	r0, #192	@ 0xc0
 8000774:	f7ff ff3c 	bl	80005f0 <TM1637_WriteByte>
		TM1637_WaitForAck();
 8000778:	f7ff ff1e 	bl	80005b8 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	e00e      	b.n	80007a0 <TM1637_Update_Data_Dots+0x9c>
		{
			TM1637_WriteByte(tm1637digitpattern[displayvalue[i]]);
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	4413      	add	r3, r2
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	461a      	mov	r2, r3
 800078c:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <TM1637_Update_Data_Dots+0xc0>)
 800078e:	5c9b      	ldrb	r3, [r3, r2]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff2d 	bl	80005f0 <TM1637_WriteByte>
			TM1637_WaitForAck();
 8000796:	f7ff ff0f 	bl	80005b8 <TM1637_WaitForAck>
		for (int i = 0; i < MAX_NO_OF_CHARACTERS; i++)
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	3301      	adds	r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	2b05      	cmp	r3, #5
 80007a4:	dded      	ble.n	8000782 <TM1637_Update_Data_Dots+0x7e>
		}
		TM1637_Stop();
 80007a6:	f7ff fee3 	bl	8000570 <TM1637_Stop>
	}

	TM1637_Start();
 80007aa:	f7ff fec9 	bl	8000540 <TM1637_Start>
	TM1637_WriteByte((DISPLAY_COMMAND|PulSe_WIDTH_SET_04_16|DISPLAY_ON));
 80007ae:	208a      	movs	r0, #138	@ 0x8a
 80007b0:	f7ff ff1e 	bl	80005f0 <TM1637_WriteByte>
	TM1637_WaitForAck();
 80007b4:	f7ff ff00 	bl	80005b8 <TM1637_WaitForAck>
	TM1637_Stop();
 80007b8:	f7ff feda 	bl	8000570 <TM1637_Stop>
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000000 	.word	0x20000000

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ce:	f000 fc1b 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d2:	f000 f92f 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d6:	f000 fa0f 	bl	8000bf8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007da:	f000 f9e3 	bl	8000ba4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007de:	f000 f993 	bl	8000b08 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint8_t startvalue[] = {2,5,0,0};
 80007e2:	f240 5302 	movw	r3, #1282	@ 0x502
 80007e6:	607b      	str	r3, [r7, #4]
  TM1637_Write((DATA_COMMAND|WRITE_DATA_TO_DISPLAY|AUTOMATIC_ADDRESS_ADD|NORMAL_MODE),
 80007e8:	1d3a      	adds	r2, r7, #4
 80007ea:	238a      	movs	r3, #138	@ 0x8a
 80007ec:	21c0      	movs	r1, #192	@ 0xc0
 80007ee:	2040      	movs	r0, #64	@ 0x40
 80007f0:	f7ff ff36 	bl	8000660 <TM1637_Write>
		  DISPLAY_1_REGISTER_ADDRESS,
		  startvalue,
		  (DISPLAY_COMMAND|PulSe_WIDTH_SET_04_16|DISPLAY_ON));
  operationsmonitor = 0;
 80007f4:	4b82      	ldr	r3, [pc, #520]	@ (8000a00 <main+0x238>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 80007fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007fe:	f000 fc75 	bl	80010ec <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0 || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0)
 8000802:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000806:	487f      	ldr	r0, [pc, #508]	@ (8000a04 <main+0x23c>)
 8000808:	f000 ff2a 	bl	8001660 <HAL_GPIO_ReadPin>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d006      	beq.n	8000820 <main+0x58>
 8000812:	2108      	movs	r1, #8
 8000814:	487c      	ldr	r0, [pc, #496]	@ (8000a08 <main+0x240>)
 8000816:	f000 ff23 	bl	8001660 <HAL_GPIO_ReadPin>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d118      	bne.n	8000852 <main+0x8a>
	    {
	    	HAL_Delay(20);
 8000820:	2014      	movs	r0, #20
 8000822:	f000 fc63 	bl	80010ec <HAL_Delay>
	    	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)
 8000826:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800082a:	4876      	ldr	r0, [pc, #472]	@ (8000a04 <main+0x23c>)
 800082c:	f000 ff18 	bl	8001660 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d103      	bne.n	800083e <main+0x76>
	    	{
	    		HAL_TIM_Base_Start_IT(&htim3);
 8000836:	4875      	ldr	r0, [pc, #468]	@ (8000a0c <main+0x244>)
 8000838:	f001 fc50 	bl	80020dc <HAL_TIM_Base_Start_IT>
 800083c:	e009      	b.n	8000852 <main+0x8a>
	    	}
	    	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0)
 800083e:	2108      	movs	r1, #8
 8000840:	4871      	ldr	r0, [pc, #452]	@ (8000a08 <main+0x240>)
 8000842:	f000 ff0d 	bl	8001660 <HAL_GPIO_ReadPin>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d102      	bne.n	8000852 <main+0x8a>
	    	{
	    		HAL_TIM_Base_Stop_IT(&htim3);
 800084c:	486f      	ldr	r0, [pc, #444]	@ (8000a0c <main+0x244>)
 800084e:	f001 fca7 	bl	80021a0 <HAL_TIM_Base_Stop_IT>
	    	}
	    }

	if(updatestatus == 1)
 8000852:	4b6f      	ldr	r3, [pc, #444]	@ (8000a10 <main+0x248>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d15d      	bne.n	8000916 <main+0x14e>
	{
		updatestatus = 0;
 800085a:	4b6d      	ldr	r3, [pc, #436]	@ (8000a10 <main+0x248>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
		bitstatus ^= 1;
 8000860:	4b6c      	ldr	r3, [pc, #432]	@ (8000a14 <main+0x24c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	f083 0301 	eor.w	r3, r3, #1
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b6a      	ldr	r3, [pc, #424]	@ (8000a14 <main+0x24c>)
 800086c:	701a      	strb	r2, [r3, #0]
		displayvalue[0] = minutes / 10;
 800086e:	4b6a      	ldr	r3, [pc, #424]	@ (8000a18 <main+0x250>)
 8000870:	f993 3000 	ldrsb.w	r3, [r3]
 8000874:	4a69      	ldr	r2, [pc, #420]	@ (8000a1c <main+0x254>)
 8000876:	fb82 1203 	smull	r1, r2, r2, r3
 800087a:	1092      	asrs	r2, r2, #2
 800087c:	17db      	asrs	r3, r3, #31
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	b25b      	sxtb	r3, r3
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b66      	ldr	r3, [pc, #408]	@ (8000a20 <main+0x258>)
 8000886:	701a      	strb	r2, [r3, #0]
		displayvalue[1] = minutes - (minutes / 10) * 10;
 8000888:	4b63      	ldr	r3, [pc, #396]	@ (8000a18 <main+0x250>)
 800088a:	f993 3000 	ldrsb.w	r3, [r3]
 800088e:	4a63      	ldr	r2, [pc, #396]	@ (8000a1c <main+0x254>)
 8000890:	fb82 1203 	smull	r1, r2, r2, r3
 8000894:	1092      	asrs	r2, r2, #2
 8000896:	17db      	asrs	r3, r3, #31
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	b25b      	sxtb	r3, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	0152      	lsls	r2, r2, #5
 80008a2:	1ad2      	subs	r2, r2, r3
 80008a4:	0092      	lsls	r2, r2, #2
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b5a      	ldr	r3, [pc, #360]	@ (8000a18 <main+0x250>)
 80008ae:	f993 3000 	ldrsb.w	r3, [r3]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4413      	add	r3, r2
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b59      	ldr	r3, [pc, #356]	@ (8000a20 <main+0x258>)
 80008ba:	705a      	strb	r2, [r3, #1]
		displayvalue[2] = seconds / 10;
 80008bc:	4b59      	ldr	r3, [pc, #356]	@ (8000a24 <main+0x25c>)
 80008be:	f993 3000 	ldrsb.w	r3, [r3]
 80008c2:	4a56      	ldr	r2, [pc, #344]	@ (8000a1c <main+0x254>)
 80008c4:	fb82 1203 	smull	r1, r2, r2, r3
 80008c8:	1092      	asrs	r2, r2, #2
 80008ca:	17db      	asrs	r3, r3, #31
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	b25b      	sxtb	r3, r3
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b53      	ldr	r3, [pc, #332]	@ (8000a20 <main+0x258>)
 80008d4:	709a      	strb	r2, [r3, #2]
		displayvalue[3] = seconds - (seconds / 10) * 10;
 80008d6:	4b53      	ldr	r3, [pc, #332]	@ (8000a24 <main+0x25c>)
 80008d8:	f993 3000 	ldrsb.w	r3, [r3]
 80008dc:	4a4f      	ldr	r2, [pc, #316]	@ (8000a1c <main+0x254>)
 80008de:	fb82 1203 	smull	r1, r2, r2, r3
 80008e2:	1092      	asrs	r2, r2, #2
 80008e4:	17db      	asrs	r3, r3, #31
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	461a      	mov	r2, r3
 80008ee:	0152      	lsls	r2, r2, #5
 80008f0:	1ad2      	subs	r2, r2, r3
 80008f2:	0092      	lsls	r2, r2, #2
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b4a      	ldr	r3, [pc, #296]	@ (8000a24 <main+0x25c>)
 80008fc:	f993 3000 	ldrsb.w	r3, [r3]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4413      	add	r3, r2
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4b46      	ldr	r3, [pc, #280]	@ (8000a20 <main+0x258>)
 8000908:	70da      	strb	r2, [r3, #3]
		TM1637_Update_Data_Dots(displayvalue, bitstatus);
 800090a:	4b42      	ldr	r3, [pc, #264]	@ (8000a14 <main+0x24c>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	4619      	mov	r1, r3
 8000910:	4843      	ldr	r0, [pc, #268]	@ (8000a20 <main+0x258>)
 8000912:	f7ff fef7 	bl	8000704 <TM1637_Update_Data_Dots>
	}
	if(updatetimings == 1)
 8000916:	4b44      	ldr	r3, [pc, #272]	@ (8000a28 <main+0x260>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b01      	cmp	r3, #1
 800091c:	f47f af71 	bne.w	8000802 <main+0x3a>
	{
		updatetimings = 0;
 8000920:	4b41      	ldr	r3, [pc, #260]	@ (8000a28 <main+0x260>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
		bitstatus ^= 1;
 8000926:	4b3b      	ldr	r3, [pc, #236]	@ (8000a14 <main+0x24c>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	f083 0301 	eor.w	r3, r3, #1
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b38      	ldr	r3, [pc, #224]	@ (8000a14 <main+0x24c>)
 8000932:	701a      	strb	r2, [r3, #0]
		minutes = pomodorominutetimings[operationsmonitor];
 8000934:	4b32      	ldr	r3, [pc, #200]	@ (8000a00 <main+0x238>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a2c <main+0x264>)
 800093c:	5c9b      	ldrb	r3, [r3, r2]
 800093e:	b25a      	sxtb	r2, r3
 8000940:	4b35      	ldr	r3, [pc, #212]	@ (8000a18 <main+0x250>)
 8000942:	701a      	strb	r2, [r3, #0]
		seconds = pomodorosecondstimings[operationsmonitor];
 8000944:	4b2e      	ldr	r3, [pc, #184]	@ (8000a00 <main+0x238>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b39      	ldr	r3, [pc, #228]	@ (8000a30 <main+0x268>)
 800094c:	5c9b      	ldrb	r3, [r3, r2]
 800094e:	b25a      	sxtb	r2, r3
 8000950:	4b34      	ldr	r3, [pc, #208]	@ (8000a24 <main+0x25c>)
 8000952:	701a      	strb	r2, [r3, #0]
		displayvalue[0] = minutes / 10;
 8000954:	4b30      	ldr	r3, [pc, #192]	@ (8000a18 <main+0x250>)
 8000956:	f993 3000 	ldrsb.w	r3, [r3]
 800095a:	4a30      	ldr	r2, [pc, #192]	@ (8000a1c <main+0x254>)
 800095c:	fb82 1203 	smull	r1, r2, r2, r3
 8000960:	1092      	asrs	r2, r2, #2
 8000962:	17db      	asrs	r3, r3, #31
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	b25b      	sxtb	r3, r3
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a20 <main+0x258>)
 800096c:	701a      	strb	r2, [r3, #0]
		displayvalue[1] = minutes - (minutes / 10) * 10;
 800096e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a18 <main+0x250>)
 8000970:	f993 3000 	ldrsb.w	r3, [r3]
 8000974:	4a29      	ldr	r2, [pc, #164]	@ (8000a1c <main+0x254>)
 8000976:	fb82 1203 	smull	r1, r2, r2, r3
 800097a:	1092      	asrs	r2, r2, #2
 800097c:	17db      	asrs	r3, r3, #31
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	b25b      	sxtb	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	0152      	lsls	r2, r2, #5
 8000988:	1ad2      	subs	r2, r2, r3
 800098a:	0092      	lsls	r2, r2, #2
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b21      	ldr	r3, [pc, #132]	@ (8000a18 <main+0x250>)
 8000994:	f993 3000 	ldrsb.w	r3, [r3]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	4413      	add	r3, r2
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <main+0x258>)
 80009a0:	705a      	strb	r2, [r3, #1]
		displayvalue[2] = seconds / 10;
 80009a2:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <main+0x25c>)
 80009a4:	f993 3000 	ldrsb.w	r3, [r3]
 80009a8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a1c <main+0x254>)
 80009aa:	fb82 1203 	smull	r1, r2, r2, r3
 80009ae:	1092      	asrs	r2, r2, #2
 80009b0:	17db      	asrs	r3, r3, #31
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <main+0x258>)
 80009ba:	709a      	strb	r2, [r3, #2]
		displayvalue[3] = seconds - (seconds / 10) * 10;
 80009bc:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <main+0x25c>)
 80009be:	f993 3000 	ldrsb.w	r3, [r3]
 80009c2:	4a16      	ldr	r2, [pc, #88]	@ (8000a1c <main+0x254>)
 80009c4:	fb82 1203 	smull	r1, r2, r2, r3
 80009c8:	1092      	asrs	r2, r2, #2
 80009ca:	17db      	asrs	r3, r3, #31
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	0152      	lsls	r2, r2, #5
 80009d6:	1ad2      	subs	r2, r2, r3
 80009d8:	0092      	lsls	r2, r2, #2
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <main+0x25c>)
 80009e2:	f993 3000 	ldrsb.w	r3, [r3]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	4413      	add	r3, r2
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <main+0x258>)
 80009ee:	70da      	strb	r2, [r3, #3]
		TM1637_Update_Data_Dots(displayvalue, bitstatus);
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <main+0x24c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	480a      	ldr	r0, [pc, #40]	@ (8000a20 <main+0x258>)
 80009f8:	f7ff fe84 	bl	8000704 <TM1637_Update_Data_Dots>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0 || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0)
 80009fc:	e701      	b.n	8000802 <main+0x3a>
 80009fe:	bf00      	nop
 8000a00:	200000e4 	.word	0x200000e4
 8000a04:	40020000 	.word	0x40020000
 8000a08:	40020400 	.word	0x40020400
 8000a0c:	20000050 	.word	0x20000050
 8000a10:	200000e2 	.word	0x200000e2
 8000a14:	200000e1 	.word	0x200000e1
 8000a18:	2000000c 	.word	0x2000000c
 8000a1c:	66666667 	.word	0x66666667
 8000a20:	20000010 	.word	0x20000010
 8000a24:	200000e0 	.word	0x200000e0
 8000a28:	200000e3 	.word	0x200000e3
 8000a2c:	20000014 	.word	0x20000014
 8000a30:	200000e8 	.word	0x200000e8

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b094      	sub	sp, #80	@ 0x50
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	2230      	movs	r2, #48	@ 0x30
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fa30 	bl	8002ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	4b28      	ldr	r3, [pc, #160]	@ (8000b00 <SystemClock_Config+0xcc>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a60:	4a27      	ldr	r2, [pc, #156]	@ (8000b00 <SystemClock_Config+0xcc>)
 8000a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a68:	4b25      	ldr	r3, [pc, #148]	@ (8000b00 <SystemClock_Config+0xcc>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	4b22      	ldr	r3, [pc, #136]	@ (8000b04 <SystemClock_Config+0xd0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a80:	4a20      	ldr	r2, [pc, #128]	@ (8000b04 <SystemClock_Config+0xd0>)
 8000a82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <SystemClock_Config+0xd0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a94:	2302      	movs	r3, #2
 8000a96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000aac:	2340      	movs	r3, #64	@ 0x40
 8000aae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 fe25 	bl	800170c <HAL_RCC_OscConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ac8:	f000 f93a 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000acc:	230f      	movs	r3, #15
 8000ace:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000adc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 f887 	bl	8001bfc <HAL_RCC_ClockConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000af4:	f000 f924 	bl	8000d40 <Error_Handler>
  }
}
 8000af8:	bf00      	nop
 8000afa:	3750      	adds	r7, #80	@ 0x50
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40007000 	.word	0x40007000

08000b08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <MX_TIM3_Init+0x94>)
 8000b26:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba0 <MX_TIM3_Init+0x98>)
 8000b28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400 - 1;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <MX_TIM3_Init+0x94>)
 8000b2c:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000b30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <MX_TIM3_Init+0x94>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000 - 1;
 8000b38:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <MX_TIM3_Init+0x94>)
 8000b3a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000b3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <MX_TIM3_Init+0x94>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <MX_TIM3_Init+0x94>)
 8000b48:	2280      	movs	r2, #128	@ 0x80
 8000b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b4c:	4813      	ldr	r0, [pc, #76]	@ (8000b9c <MX_TIM3_Init+0x94>)
 8000b4e:	f001 fa75 	bl	800203c <HAL_TIM_Base_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b58:	f000 f8f2 	bl	8000d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	4619      	mov	r1, r3
 8000b68:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <MX_TIM3_Init+0x94>)
 8000b6a:	f001 fc38 	bl	80023de <HAL_TIM_ConfigClockSource>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b74:	f000 f8e4 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_TIM3_Init+0x94>)
 8000b86:	f001 fe49 	bl	800281c <HAL_TIMEx_MasterConfigSynchronization>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b90:	f000 f8d6 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000050 	.word	0x20000050
 8000ba0:	40000400 	.word	0x40000400

08000ba4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <MX_USART2_UART_Init+0x50>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bdc:	f001 fea0 	bl	8002920 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000be6:	f000 f8ab 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000098 	.word	0x20000098
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	@ 0x28
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b47      	ldr	r3, [pc, #284]	@ (8000d30 <MX_GPIO_Init+0x138>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a46      	ldr	r2, [pc, #280]	@ (8000d30 <MX_GPIO_Init+0x138>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b44      	ldr	r3, [pc, #272]	@ (8000d30 <MX_GPIO_Init+0x138>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b40      	ldr	r3, [pc, #256]	@ (8000d30 <MX_GPIO_Init+0x138>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a3f      	ldr	r2, [pc, #252]	@ (8000d30 <MX_GPIO_Init+0x138>)
 8000c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d30 <MX_GPIO_Init+0x138>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	4b39      	ldr	r3, [pc, #228]	@ (8000d30 <MX_GPIO_Init+0x138>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a38      	ldr	r2, [pc, #224]	@ (8000d30 <MX_GPIO_Init+0x138>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b36      	ldr	r3, [pc, #216]	@ (8000d30 <MX_GPIO_Init+0x138>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b32      	ldr	r3, [pc, #200]	@ (8000d30 <MX_GPIO_Init+0x138>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a31      	ldr	r2, [pc, #196]	@ (8000d30 <MX_GPIO_Init+0x138>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <MX_GPIO_Init+0x138>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2120      	movs	r1, #32
 8000c82:	482c      	ldr	r0, [pc, #176]	@ (8000d34 <MX_GPIO_Init+0x13c>)
 8000c84:	f000 fd04 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_Pin|DATA_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2130      	movs	r1, #48	@ 0x30
 8000c8c:	482a      	ldr	r0, [pc, #168]	@ (8000d38 <MX_GPIO_Init+0x140>)
 8000c8e:	f000 fcff 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c98:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4824      	ldr	r0, [pc, #144]	@ (8000d3c <MX_GPIO_Init+0x144>)
 8000caa:	f000 fb55 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	481b      	ldr	r0, [pc, #108]	@ (8000d34 <MX_GPIO_Init+0x13c>)
 8000cc6:	f000 fb47 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4815      	ldr	r0, [pc, #84]	@ (8000d34 <MX_GPIO_Init+0x13c>)
 8000ce0:	f000 fb3a 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4810      	ldr	r0, [pc, #64]	@ (8000d38 <MX_GPIO_Init+0x140>)
 8000cf8:	f000 fb2e 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DATA_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 8000cfc:	2330      	movs	r3, #48	@ 0x30
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4809      	ldr	r0, [pc, #36]	@ (8000d38 <MX_GPIO_Init+0x140>)
 8000d14:	f000 fb20 	bl	8001358 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2028      	movs	r0, #40	@ 0x28
 8000d1e:	f000 fae4 	bl	80012ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d22:	2028      	movs	r0, #40	@ 0x28
 8000d24:	f000 fafd 	bl	8001322 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	@ 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000
 8000d38:	40020400 	.word	0x40020400
 8000d3c:	40020800 	.word	0x40020800

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <Error_Handler+0x8>

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d62:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800

08000d9c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <HAL_TIM_Base_MspInit+0x48>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d115      	bne.n	8000dda <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <HAL_TIM_Base_MspInit+0x4c>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	4a0c      	ldr	r2, [pc, #48]	@ (8000de8 <HAL_TIM_Base_MspInit+0x4c>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_TIM_Base_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	201d      	movs	r0, #29
 8000dd0:	f000 fa8b 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dd4:	201d      	movs	r0, #29
 8000dd6:	f000 faa4 	bl	8001322 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40000400 	.word	0x40000400
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a19      	ldr	r2, [pc, #100]	@ (8000e70 <HAL_UART_MspInit+0x84>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d12b      	bne.n	8000e66 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	4a17      	ldr	r2, [pc, #92]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a10      	ldr	r2, [pc, #64]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e46:	230c      	movs	r3, #12
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e56:	2307      	movs	r3, #7
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <HAL_UART_MspInit+0x8c>)
 8000e62:	f000 fa79 	bl	8001358 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e66:	bf00      	nop
 8000e68:	3728      	adds	r7, #40	@ 0x28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40004400 	.word	0x40004400
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed2:	f000 f8eb 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	seconds--;
 8000ee0:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <TIM3_IRQHandler+0x8c>)
 8000ee2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	b25a      	sxtb	r2, r3
 8000eee:	4b1e      	ldr	r3, [pc, #120]	@ (8000f68 <TIM3_IRQHandler+0x8c>)
 8000ef0:	701a      	strb	r2, [r3, #0]
		if(seconds == -1)
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <TIM3_IRQHandler+0x8c>)
 8000ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d127      	bne.n	8000f4e <TIM3_IRQHandler+0x72>
		{
			minutes--;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <TIM3_IRQHandler+0x90>)
 8000f00:	f993 3000 	ldrsb.w	r3, [r3]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	3b01      	subs	r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	b25a      	sxtb	r2, r3
 8000f0c:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <TIM3_IRQHandler+0x90>)
 8000f0e:	701a      	strb	r2, [r3, #0]
			if(seconds == -1 && minutes == -1)
 8000f10:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <TIM3_IRQHandler+0x8c>)
 8000f12:	f993 3000 	ldrsb.w	r3, [r3]
 8000f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1a:	d115      	bne.n	8000f48 <TIM3_IRQHandler+0x6c>
 8000f1c:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <TIM3_IRQHandler+0x90>)
 8000f1e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f26:	d10f      	bne.n	8000f48 <TIM3_IRQHandler+0x6c>
			{
				  operationsmonitor++;
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <TIM3_IRQHandler+0x94>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <TIM3_IRQHandler+0x94>)
 8000f32:	701a      	strb	r2, [r3, #0]
				  updatetimings = 1;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <TIM3_IRQHandler+0x98>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
				  if(operationsmonitor == 9)
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <TIM3_IRQHandler+0x94>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b09      	cmp	r3, #9
 8000f40:	d102      	bne.n	8000f48 <TIM3_IRQHandler+0x6c>
				  {
					  operationsmonitor = 0;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	@ (8000f70 <TIM3_IRQHandler+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
				  }

			}
			seconds = 59;
 8000f48:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <TIM3_IRQHandler+0x8c>)
 8000f4a:	223b      	movs	r2, #59	@ 0x3b
 8000f4c:	701a      	strb	r2, [r3, #0]
		}

		if(updatetimings == 0)
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <TIM3_IRQHandler+0x98>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d102      	bne.n	8000f5c <TIM3_IRQHandler+0x80>
		{
			updatestatus = 1;
 8000f56:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <TIM3_IRQHandler+0x9c>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f5c:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <TIM3_IRQHandler+0xa0>)
 8000f5e:	f001 f94e 	bl	80021fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000e0 	.word	0x200000e0
 8000f6c:	2000000c 	.word	0x2000000c
 8000f70:	200000e4 	.word	0x200000e4
 8000f74:	200000e3 	.word	0x200000e3
 8000f78:	200000e2 	.word	0x200000e2
 8000f7c:	20000050 	.word	0x20000050

08000f80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f84:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f88:	f000 fb9c 	bl	80016c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	@ (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fb8:	f7ff ffea 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	@ (8000ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f001 ff69 	bl	8002eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fbef 	bl	80007c8 <main>
  bx  lr    
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000ff8:	08002f40 	.word	0x08002f40
  ldr r2, =_sbss
 8000ffc:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001000:	200000f8 	.word	0x200000f8

08001004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <HAL_Init+0x40>)
 8001012:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <HAL_Init+0x40>)
 800101e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <HAL_Init+0x40>)
 800102a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800102e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 f94f 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f808 	bl	800104c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103c:	f7ff fe86 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023c00 	.word	0x40023c00

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_InitTick+0x54>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <HAL_InitTick+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f967 	bl	800133e <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 f92f 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	@ (80010a8 <HAL_InitTick+0x5c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000020 	.word	0x20000020
 80010a4:	20000028 	.word	0x20000028
 80010a8:	20000024 	.word	0x20000024

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000028 	.word	0x20000028
 80010d0:	200000f4 	.word	0x200000f4

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	200000f4 	.word	0x200000f4

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000028 	.word	0x20000028

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800115c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	@ (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4907      	ldr	r1, [pc, #28]	@ (80011d0 <__NVIC_EnableIRQ+0x38>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	@ (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	@ (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	@ 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	@ 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	@ (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff29 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff3e 	bl	800117c <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff8e 	bl	8001228 <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5d 	bl	80011d4 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff31 	bl	8001198 <__NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffa2 	bl	8001290 <SysTick_Config>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	e159      	b.n	8001628 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	429a      	cmp	r2, r3
 800138e:	f040 8148 	bne.w	8001622 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b01      	cmp	r3, #1
 800139c:	d005      	beq.n	80013aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d130      	bne.n	800140c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e0:	2201      	movs	r2, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	f003 0201 	and.w	r2, r3, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b03      	cmp	r3, #3
 8001416:	d017      	beq.n	8001448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d123      	bne.n	800149c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	220f      	movs	r2, #15
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	08da      	lsrs	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3208      	adds	r2, #8
 8001496:	69b9      	ldr	r1, [r7, #24]
 8001498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80a2 	beq.w	8001622 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b57      	ldr	r3, [pc, #348]	@ (8001640 <HAL_GPIO_Init+0x2e8>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	4a56      	ldr	r2, [pc, #344]	@ (8001640 <HAL_GPIO_Init+0x2e8>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ee:	4b54      	ldr	r3, [pc, #336]	@ (8001640 <HAL_GPIO_Init+0x2e8>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014fa:	4a52      	ldr	r2, [pc, #328]	@ (8001644 <HAL_GPIO_Init+0x2ec>)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a49      	ldr	r2, [pc, #292]	@ (8001648 <HAL_GPIO_Init+0x2f0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d019      	beq.n	800155a <HAL_GPIO_Init+0x202>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a48      	ldr	r2, [pc, #288]	@ (800164c <HAL_GPIO_Init+0x2f4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d013      	beq.n	8001556 <HAL_GPIO_Init+0x1fe>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a47      	ldr	r2, [pc, #284]	@ (8001650 <HAL_GPIO_Init+0x2f8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d00d      	beq.n	8001552 <HAL_GPIO_Init+0x1fa>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a46      	ldr	r2, [pc, #280]	@ (8001654 <HAL_GPIO_Init+0x2fc>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d007      	beq.n	800154e <HAL_GPIO_Init+0x1f6>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a45      	ldr	r2, [pc, #276]	@ (8001658 <HAL_GPIO_Init+0x300>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d101      	bne.n	800154a <HAL_GPIO_Init+0x1f2>
 8001546:	2304      	movs	r3, #4
 8001548:	e008      	b.n	800155c <HAL_GPIO_Init+0x204>
 800154a:	2307      	movs	r3, #7
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x204>
 800154e:	2303      	movs	r3, #3
 8001550:	e004      	b.n	800155c <HAL_GPIO_Init+0x204>
 8001552:	2302      	movs	r3, #2
 8001554:	e002      	b.n	800155c <HAL_GPIO_Init+0x204>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_GPIO_Init+0x204>
 800155a:	2300      	movs	r3, #0
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	f002 0203 	and.w	r2, r2, #3
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	4093      	lsls	r3, r2
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800156c:	4935      	ldr	r1, [pc, #212]	@ (8001644 <HAL_GPIO_Init+0x2ec>)
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	3302      	adds	r3, #2
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800157a:	4b38      	ldr	r3, [pc, #224]	@ (800165c <HAL_GPIO_Init+0x304>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800159e:	4a2f      	ldr	r2, [pc, #188]	@ (800165c <HAL_GPIO_Init+0x304>)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a4:	4b2d      	ldr	r3, [pc, #180]	@ (800165c <HAL_GPIO_Init+0x304>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015c8:	4a24      	ldr	r2, [pc, #144]	@ (800165c <HAL_GPIO_Init+0x304>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ce:	4b23      	ldr	r3, [pc, #140]	@ (800165c <HAL_GPIO_Init+0x304>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015f2:	4a1a      	ldr	r2, [pc, #104]	@ (800165c <HAL_GPIO_Init+0x304>)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f8:	4b18      	ldr	r3, [pc, #96]	@ (800165c <HAL_GPIO_Init+0x304>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800161c:	4a0f      	ldr	r2, [pc, #60]	@ (800165c <HAL_GPIO_Init+0x304>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3301      	adds	r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	2b0f      	cmp	r3, #15
 800162c:	f67f aea2 	bls.w	8001374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3724      	adds	r7, #36	@ 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40013800 	.word	0x40013800
 8001648:	40020000 	.word	0x40020000
 800164c:	40020400 	.word	0x40020400
 8001650:	40020800 	.word	0x40020800
 8001654:	40020c00 	.word	0x40020c00
 8001658:	40021000 	.word	0x40021000
 800165c:	40013c00 	.word	0x40013c00

08001660 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	887b      	ldrh	r3, [r7, #2]
 8001672:	4013      	ands	r3, r2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001678:	2301      	movs	r3, #1
 800167a:	73fb      	strb	r3, [r7, #15]
 800167c:	e001      	b.n	8001682 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	807b      	strh	r3, [r7, #2]
 800169c:	4613      	mov	r3, r2
 800169e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016a0:	787b      	ldrb	r3, [r7, #1]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016ac:	e003      	b.n	80016b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ae:	887b      	ldrh	r3, [r7, #2]
 80016b0:	041a      	lsls	r2, r3, #16
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	619a      	str	r2, [r3, #24]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016da:	4a05      	ldr	r2, [pc, #20]	@ (80016f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f806 	bl	80016f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40013c00 	.word	0x40013c00

080016f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e267      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d075      	beq.n	8001816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800172a:	4b88      	ldr	r3, [pc, #544]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b04      	cmp	r3, #4
 8001734:	d00c      	beq.n	8001750 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001736:	4b85      	ldr	r3, [pc, #532]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800173e:	2b08      	cmp	r3, #8
 8001740:	d112      	bne.n	8001768 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001742:	4b82      	ldr	r3, [pc, #520]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800174e:	d10b      	bne.n	8001768 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	4b7e      	ldr	r3, [pc, #504]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d05b      	beq.n	8001814 <HAL_RCC_OscConfig+0x108>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d157      	bne.n	8001814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e242      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001770:	d106      	bne.n	8001780 <HAL_RCC_OscConfig+0x74>
 8001772:	4b76      	ldr	r3, [pc, #472]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a75      	ldr	r2, [pc, #468]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e01d      	b.n	80017bc <HAL_RCC_OscConfig+0xb0>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x98>
 800178a:	4b70      	ldr	r3, [pc, #448]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6f      	ldr	r2, [pc, #444]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	4b6d      	ldr	r3, [pc, #436]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6c      	ldr	r2, [pc, #432]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e00b      	b.n	80017bc <HAL_RCC_OscConfig+0xb0>
 80017a4:	4b69      	ldr	r3, [pc, #420]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a68      	ldr	r2, [pc, #416]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b66      	ldr	r3, [pc, #408]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a65      	ldr	r2, [pc, #404]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d013      	beq.n	80017ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fc86 	bl	80010d4 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fc82 	bl	80010d4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	@ 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e207      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b5b      	ldr	r3, [pc, #364]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0xc0>
 80017ea:	e014      	b.n	8001816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fc72 	bl	80010d4 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fc6e 	bl	80010d4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	@ 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e1f3      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	4b51      	ldr	r3, [pc, #324]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0xe8>
 8001812:	e000      	b.n	8001816 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d063      	beq.n	80018ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001822:	4b4a      	ldr	r3, [pc, #296]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00b      	beq.n	8001846 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182e:	4b47      	ldr	r3, [pc, #284]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001836:	2b08      	cmp	r3, #8
 8001838:	d11c      	bne.n	8001874 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183a:	4b44      	ldr	r3, [pc, #272]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d116      	bne.n	8001874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	4b41      	ldr	r3, [pc, #260]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_RCC_OscConfig+0x152>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d001      	beq.n	800185e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e1c7      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185e:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4937      	ldr	r1, [pc, #220]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	e03a      	b.n	80018ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d020      	beq.n	80018be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187c:	4b34      	ldr	r3, [pc, #208]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fc27 	bl	80010d4 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fc23 	bl	80010d4 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e1a8      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b28      	ldr	r3, [pc, #160]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4925      	ldr	r1, [pc, #148]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fc06 	bl	80010d4 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018cc:	f7ff fc02 	bl	80010d4 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e187      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d036      	beq.n	8001964 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d016      	beq.n	800192c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <HAL_RCC_OscConfig+0x248>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff fbe6 	bl	80010d4 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff fbe2 	bl	80010d4 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e167      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x200>
 800192a:	e01b      	b.n	8001964 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_RCC_OscConfig+0x248>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff fbcf 	bl	80010d4 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	e00e      	b.n	8001958 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff fbcb 	bl	80010d4 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d907      	bls.n	8001958 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e150      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
 800194c:	40023800 	.word	0x40023800
 8001950:	42470000 	.word	0x42470000
 8001954:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	4b88      	ldr	r3, [pc, #544]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 800195a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ea      	bne.n	800193a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 8097 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001976:	4b81      	ldr	r3, [pc, #516]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10f      	bne.n	80019a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b7d      	ldr	r3, [pc, #500]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4a7c      	ldr	r2, [pc, #496]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40
 8001992:	4b7a      	ldr	r3, [pc, #488]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	4b77      	ldr	r3, [pc, #476]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d118      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ae:	4b74      	ldr	r3, [pc, #464]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a73      	ldr	r2, [pc, #460]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fb8b 	bl	80010d4 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7ff fb87 	bl	80010d4 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e10c      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x2ea>
 80019e8:	4b64      	ldr	r3, [pc, #400]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ec:	4a63      	ldr	r2, [pc, #396]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f4:	e01c      	b.n	8001a30 <HAL_RCC_OscConfig+0x324>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b05      	cmp	r3, #5
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x30c>
 80019fe:	4b5f      	ldr	r3, [pc, #380]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a02:	4a5e      	ldr	r2, [pc, #376]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a0e:	4a5b      	ldr	r2, [pc, #364]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0x324>
 8001a18:	4b58      	ldr	r3, [pc, #352]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1c:	4a57      	ldr	r2, [pc, #348]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a24:	4b55      	ldr	r3, [pc, #340]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a28:	4a54      	ldr	r2, [pc, #336]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a2a:	f023 0304 	bic.w	r3, r3, #4
 8001a2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d015      	beq.n	8001a64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff fb4c 	bl	80010d4 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a40:	f7ff fb48 	bl	80010d4 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0cb      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a56:	4b49      	ldr	r3, [pc, #292]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0ee      	beq.n	8001a40 <HAL_RCC_OscConfig+0x334>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a64:	f7ff fb36 	bl	80010d4 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fb32 	bl	80010d4 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e0b5      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a82:	4b3e      	ldr	r3, [pc, #248]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1ee      	bne.n	8001a6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d105      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a94:	4b39      	ldr	r3, [pc, #228]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	4a38      	ldr	r2, [pc, #224]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a1 	beq.w	8001bec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aaa:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d05c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d141      	bne.n	8001b42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abe:	4b31      	ldr	r3, [pc, #196]	@ (8001b84 <HAL_RCC_OscConfig+0x478>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fb06 	bl	80010d4 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff fb02 	bl	80010d4 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e087      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	4b27      	ldr	r3, [pc, #156]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af8:	019b      	lsls	r3, r3, #6
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	3b01      	subs	r3, #1
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	491b      	ldr	r1, [pc, #108]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b14:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <HAL_RCC_OscConfig+0x478>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fadb 	bl	80010d4 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff fad7 	bl	80010d4 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e05c      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b34:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x416>
 8001b40:	e054      	b.n	8001bec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <HAL_RCC_OscConfig+0x478>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fac4 	bl	80010d4 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff fac0 	bl	80010d4 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e045      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x444>
 8001b6e:	e03d      	b.n	8001bec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e038      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40007000 	.word	0x40007000
 8001b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ec>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d028      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d121      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d11a      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bb8:	4013      	ands	r3, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d111      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bce:	085b      	lsrs	r3, r3, #1
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0cc      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b68      	ldr	r3, [pc, #416]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d90c      	bls.n	8001c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b65      	ldr	r3, [pc, #404]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b63      	ldr	r3, [pc, #396]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0b8      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c50:	4b59      	ldr	r3, [pc, #356]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4a58      	ldr	r2, [pc, #352]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c68:	4b53      	ldr	r3, [pc, #332]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a52      	ldr	r2, [pc, #328]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b50      	ldr	r3, [pc, #320]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	494d      	ldr	r1, [pc, #308]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d044      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b47      	ldr	r3, [pc, #284]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d119      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e07f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d003      	beq.n	8001cba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b3f      	ldr	r3, [pc, #252]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e06f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b3b      	ldr	r3, [pc, #236]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e067      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b37      	ldr	r3, [pc, #220]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4934      	ldr	r1, [pc, #208]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cec:	f7ff f9f2 	bl	80010d4 <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7ff f9ee 	bl	80010d4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e04f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d20c      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e032      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4916      	ldr	r1, [pc, #88]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6e:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	490e      	ldr	r1, [pc, #56]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d82:	f000 f821 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	490a      	ldr	r1, [pc, #40]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9a:	4a09      	ldr	r2, [pc, #36]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f952 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	08002f18 	.word	0x08002f18
 8001dc0:	20000020 	.word	0x20000020
 8001dc4:	20000024 	.word	0x20000024

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dcc:	b094      	sub	sp, #80	@ 0x50
 8001dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de0:	4b79      	ldr	r3, [pc, #484]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d00d      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x40>
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	f200 80e1 	bhi.w	8001fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x34>
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dfa:	e0db      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b73      	ldr	r3, [pc, #460]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e00:	e0db      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e02:	4b73      	ldr	r3, [pc, #460]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e06:	e0d8      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e08:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e12:	4b6d      	ldr	r3, [pc, #436]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d063      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	2200      	movs	r2, #0
 8001e26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e30:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e32:	2300      	movs	r3, #0
 8001e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e3a:	4622      	mov	r2, r4
 8001e3c:	462b      	mov	r3, r5
 8001e3e:	f04f 0000 	mov.w	r0, #0
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	0159      	lsls	r1, r3, #5
 8001e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e4c:	0150      	lsls	r0, r2, #5
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4621      	mov	r1, r4
 8001e54:	1a51      	subs	r1, r2, r1
 8001e56:	6139      	str	r1, [r7, #16]
 8001e58:	4629      	mov	r1, r5
 8001e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e6c:	4659      	mov	r1, fp
 8001e6e:	018b      	lsls	r3, r1, #6
 8001e70:	4651      	mov	r1, sl
 8001e72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e76:	4651      	mov	r1, sl
 8001e78:	018a      	lsls	r2, r1, #6
 8001e7a:	4651      	mov	r1, sl
 8001e7c:	ebb2 0801 	subs.w	r8, r2, r1
 8001e80:	4659      	mov	r1, fp
 8001e82:	eb63 0901 	sbc.w	r9, r3, r1
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e9a:	4690      	mov	r8, r2
 8001e9c:	4699      	mov	r9, r3
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	eb18 0303 	adds.w	r3, r8, r3
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	eb49 0303 	adc.w	r3, r9, r3
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eba:	4629      	mov	r1, r5
 8001ebc:	024b      	lsls	r3, r1, #9
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	024a      	lsls	r2, r1, #9
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ece:	2200      	movs	r2, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ed4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ed8:	f7fe f97c 	bl	80001d4 <__aeabi_uldivmod>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ee4:	e058      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee6:	4b38      	ldr	r3, [pc, #224]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	099b      	lsrs	r3, r3, #6
 8001eec:	2200      	movs	r2, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ef6:	623b      	str	r3, [r7, #32]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f00:	4642      	mov	r2, r8
 8001f02:	464b      	mov	r3, r9
 8001f04:	f04f 0000 	mov.w	r0, #0
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	0159      	lsls	r1, r3, #5
 8001f0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f12:	0150      	lsls	r0, r2, #5
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4641      	mov	r1, r8
 8001f1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f1e:	4649      	mov	r1, r9
 8001f20:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f38:	ebb2 040a 	subs.w	r4, r2, sl
 8001f3c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	00eb      	lsls	r3, r5, #3
 8001f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f4e:	00e2      	lsls	r2, r4, #3
 8001f50:	4614      	mov	r4, r2
 8001f52:	461d      	mov	r5, r3
 8001f54:	4643      	mov	r3, r8
 8001f56:	18e3      	adds	r3, r4, r3
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	eb45 0303 	adc.w	r3, r5, r3
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f6e:	4629      	mov	r1, r5
 8001f70:	028b      	lsls	r3, r1, #10
 8001f72:	4621      	mov	r1, r4
 8001f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f78:	4621      	mov	r1, r4
 8001f7a:	028a      	lsls	r2, r1, #10
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f82:	2200      	movs	r2, #0
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	61fa      	str	r2, [r7, #28]
 8001f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f8c:	f7fe f922 	bl	80001d4 <__aeabi_uldivmod>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4613      	mov	r3, r2
 8001f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f98:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001fa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb2:	e002      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3750      	adds	r7, #80	@ 0x50
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	00f42400 	.word	0x00f42400
 8001fd0:	007a1200 	.word	0x007a1200

08001fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	@ (8001fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000020 	.word	0x20000020

08001fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ff0:	f7ff fff0 	bl	8001fd4 <HAL_RCC_GetHCLKFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b05      	ldr	r3, [pc, #20]	@ (800200c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	0a9b      	lsrs	r3, r3, #10
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	4903      	ldr	r1, [pc, #12]	@ (8002010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40023800 	.word	0x40023800
 8002010:	08002f28 	.word	0x08002f28

08002014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002018:	f7ff ffdc 	bl	8001fd4 <HAL_RCC_GetHCLKFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	0b5b      	lsrs	r3, r3, #13
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	4903      	ldr	r1, [pc, #12]	@ (8002038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40023800 	.word	0x40023800
 8002038:	08002f28 	.word	0x08002f28

0800203c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e041      	b.n	80020d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe fe9a 	bl	8000d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3304      	adds	r3, #4
 8002078:	4619      	mov	r1, r3
 800207a:	4610      	mov	r0, r2
 800207c:	f000 faa8 	bl	80025d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d001      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e044      	b.n	800217e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1e      	ldr	r2, [pc, #120]	@ (800218c <HAL_TIM_Base_Start_IT+0xb0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d018      	beq.n	8002148 <HAL_TIM_Base_Start_IT+0x6c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800211e:	d013      	beq.n	8002148 <HAL_TIM_Base_Start_IT+0x6c>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1a      	ldr	r2, [pc, #104]	@ (8002190 <HAL_TIM_Base_Start_IT+0xb4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00e      	beq.n	8002148 <HAL_TIM_Base_Start_IT+0x6c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a19      	ldr	r2, [pc, #100]	@ (8002194 <HAL_TIM_Base_Start_IT+0xb8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d009      	beq.n	8002148 <HAL_TIM_Base_Start_IT+0x6c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a17      	ldr	r2, [pc, #92]	@ (8002198 <HAL_TIM_Base_Start_IT+0xbc>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d004      	beq.n	8002148 <HAL_TIM_Base_Start_IT+0x6c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a16      	ldr	r2, [pc, #88]	@ (800219c <HAL_TIM_Base_Start_IT+0xc0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d111      	bne.n	800216c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b06      	cmp	r3, #6
 8002158:	d010      	beq.n	800217c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0201 	orr.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800216a:	e007      	b.n	800217c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40010000 	.word	0x40010000
 8002190:	40000400 	.word	0x40000400
 8002194:	40000800 	.word	0x40000800
 8002198:	40000c00 	.word	0x40000c00
 800219c:	40014000 	.word	0x40014000

080021a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0201 	bic.w	r2, r2, #1
 80021b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6a1a      	ldr	r2, [r3, #32]
 80021be:	f241 1311 	movw	r3, #4369	@ 0x1111
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10f      	bne.n	80021e8 <HAL_TIM_Base_Stop_IT+0x48>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6a1a      	ldr	r2, [r3, #32]
 80021ce:	f240 4344 	movw	r3, #1092	@ 0x444
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d107      	bne.n	80021e8 <HAL_TIM_Base_Stop_IT+0x48>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d01b      	beq.n	8002262 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f06f 0202 	mvn.w	r2, #2
 8002232:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f9a3 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 800224e:	e005      	b.n	800225c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f995 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f9a6 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d020      	beq.n	80022ae <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d01b      	beq.n	80022ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f06f 0204 	mvn.w	r2, #4
 800227e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f97d 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 800229a:	e005      	b.n	80022a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f96f 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f980 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d020      	beq.n	80022fa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d01b      	beq.n	80022fa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f06f 0208 	mvn.w	r2, #8
 80022ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2204      	movs	r2, #4
 80022d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f957 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 80022e6:	e005      	b.n	80022f4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f949 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f95a 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	d01b      	beq.n	8002346 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f06f 0210 	mvn.w	r2, #16
 8002316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2208      	movs	r2, #8
 800231c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f931 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 8002332:	e005      	b.n	8002340 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f923 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f934 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00c      	beq.n	800236a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f06f 0201 	mvn.w	r2, #1
 8002362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f901 	bl	800256c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00c      	beq.n	800238e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 fabf 	bl	800290c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00c      	beq.n	80023b2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f905 	bl	80025bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00c      	beq.n	80023d6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0220 	mvn.w	r2, #32
 80023ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fa91 	bl	80028f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_TIM_ConfigClockSource+0x1c>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e0b4      	b.n	8002564 <HAL_TIM_ConfigClockSource+0x186>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2202      	movs	r2, #2
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002418:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002420:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002432:	d03e      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0xd4>
 8002434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002438:	f200 8087 	bhi.w	800254a <HAL_TIM_ConfigClockSource+0x16c>
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002440:	f000 8086 	beq.w	8002550 <HAL_TIM_ConfigClockSource+0x172>
 8002444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002448:	d87f      	bhi.n	800254a <HAL_TIM_ConfigClockSource+0x16c>
 800244a:	2b70      	cmp	r3, #112	@ 0x70
 800244c:	d01a      	beq.n	8002484 <HAL_TIM_ConfigClockSource+0xa6>
 800244e:	2b70      	cmp	r3, #112	@ 0x70
 8002450:	d87b      	bhi.n	800254a <HAL_TIM_ConfigClockSource+0x16c>
 8002452:	2b60      	cmp	r3, #96	@ 0x60
 8002454:	d050      	beq.n	80024f8 <HAL_TIM_ConfigClockSource+0x11a>
 8002456:	2b60      	cmp	r3, #96	@ 0x60
 8002458:	d877      	bhi.n	800254a <HAL_TIM_ConfigClockSource+0x16c>
 800245a:	2b50      	cmp	r3, #80	@ 0x50
 800245c:	d03c      	beq.n	80024d8 <HAL_TIM_ConfigClockSource+0xfa>
 800245e:	2b50      	cmp	r3, #80	@ 0x50
 8002460:	d873      	bhi.n	800254a <HAL_TIM_ConfigClockSource+0x16c>
 8002462:	2b40      	cmp	r3, #64	@ 0x40
 8002464:	d058      	beq.n	8002518 <HAL_TIM_ConfigClockSource+0x13a>
 8002466:	2b40      	cmp	r3, #64	@ 0x40
 8002468:	d86f      	bhi.n	800254a <HAL_TIM_ConfigClockSource+0x16c>
 800246a:	2b30      	cmp	r3, #48	@ 0x30
 800246c:	d064      	beq.n	8002538 <HAL_TIM_ConfigClockSource+0x15a>
 800246e:	2b30      	cmp	r3, #48	@ 0x30
 8002470:	d86b      	bhi.n	800254a <HAL_TIM_ConfigClockSource+0x16c>
 8002472:	2b20      	cmp	r3, #32
 8002474:	d060      	beq.n	8002538 <HAL_TIM_ConfigClockSource+0x15a>
 8002476:	2b20      	cmp	r3, #32
 8002478:	d867      	bhi.n	800254a <HAL_TIM_ConfigClockSource+0x16c>
 800247a:	2b00      	cmp	r3, #0
 800247c:	d05c      	beq.n	8002538 <HAL_TIM_ConfigClockSource+0x15a>
 800247e:	2b10      	cmp	r3, #16
 8002480:	d05a      	beq.n	8002538 <HAL_TIM_ConfigClockSource+0x15a>
 8002482:	e062      	b.n	800254a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002494:	f000 f9a2 	bl	80027dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024a6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	609a      	str	r2, [r3, #8]
      break;
 80024b0:	e04f      	b.n	8002552 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024c2:	f000 f98b 	bl	80027dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024d4:	609a      	str	r2, [r3, #8]
      break;
 80024d6:	e03c      	b.n	8002552 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e4:	461a      	mov	r2, r3
 80024e6:	f000 f8ff 	bl	80026e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2150      	movs	r1, #80	@ 0x50
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 f958 	bl	80027a6 <TIM_ITRx_SetConfig>
      break;
 80024f6:	e02c      	b.n	8002552 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002504:	461a      	mov	r2, r3
 8002506:	f000 f91e 	bl	8002746 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2160      	movs	r1, #96	@ 0x60
 8002510:	4618      	mov	r0, r3
 8002512:	f000 f948 	bl	80027a6 <TIM_ITRx_SetConfig>
      break;
 8002516:	e01c      	b.n	8002552 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002524:	461a      	mov	r2, r3
 8002526:	f000 f8df 	bl	80026e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2140      	movs	r1, #64	@ 0x40
 8002530:	4618      	mov	r0, r3
 8002532:	f000 f938 	bl	80027a6 <TIM_ITRx_SetConfig>
      break;
 8002536:	e00c      	b.n	8002552 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4619      	mov	r1, r3
 8002542:	4610      	mov	r0, r2
 8002544:	f000 f92f 	bl	80027a6 <TIM_ITRx_SetConfig>
      break;
 8002548:	e003      	b.n	8002552 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
      break;
 800254e:	e000      	b.n	8002552 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002550:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a3a      	ldr	r2, [pc, #232]	@ (80026cc <TIM_Base_SetConfig+0xfc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00f      	beq.n	8002608 <TIM_Base_SetConfig+0x38>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ee:	d00b      	beq.n	8002608 <TIM_Base_SetConfig+0x38>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a37      	ldr	r2, [pc, #220]	@ (80026d0 <TIM_Base_SetConfig+0x100>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d007      	beq.n	8002608 <TIM_Base_SetConfig+0x38>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a36      	ldr	r2, [pc, #216]	@ (80026d4 <TIM_Base_SetConfig+0x104>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d003      	beq.n	8002608 <TIM_Base_SetConfig+0x38>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a35      	ldr	r2, [pc, #212]	@ (80026d8 <TIM_Base_SetConfig+0x108>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d108      	bne.n	800261a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800260e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a2b      	ldr	r2, [pc, #172]	@ (80026cc <TIM_Base_SetConfig+0xfc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01b      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002628:	d017      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a28      	ldr	r2, [pc, #160]	@ (80026d0 <TIM_Base_SetConfig+0x100>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a27      	ldr	r2, [pc, #156]	@ (80026d4 <TIM_Base_SetConfig+0x104>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00f      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a26      	ldr	r2, [pc, #152]	@ (80026d8 <TIM_Base_SetConfig+0x108>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00b      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a25      	ldr	r2, [pc, #148]	@ (80026dc <TIM_Base_SetConfig+0x10c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a24      	ldr	r2, [pc, #144]	@ (80026e0 <TIM_Base_SetConfig+0x110>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d003      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a23      	ldr	r2, [pc, #140]	@ (80026e4 <TIM_Base_SetConfig+0x114>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d108      	bne.n	800266c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a0e      	ldr	r2, [pc, #56]	@ (80026cc <TIM_Base_SetConfig+0xfc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d103      	bne.n	80026a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d105      	bne.n	80026be <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f023 0201 	bic.w	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]
  }
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40010000 	.word	0x40010000
 80026d0:	40000400 	.word	0x40000400
 80026d4:	40000800 	.word	0x40000800
 80026d8:	40000c00 	.word	0x40000c00
 80026dc:	40014000 	.word	0x40014000
 80026e0:	40014400 	.word	0x40014400
 80026e4:	40014800 	.word	0x40014800

080026e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	f023 0201 	bic.w	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f023 030a 	bic.w	r3, r3, #10
 8002724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	621a      	str	r2, [r3, #32]
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002746:	b480      	push	{r7}
 8002748:	b087      	sub	sp, #28
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f023 0210 	bic.w	r2, r3, #16
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	031b      	lsls	r3, r3, #12
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002782:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	621a      	str	r2, [r3, #32]
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f043 0307 	orr.w	r3, r3, #7
 80027c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	021a      	lsls	r2, r3, #8
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	431a      	orrs	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4313      	orrs	r3, r2
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	609a      	str	r2, [r3, #8]
}
 8002810:	bf00      	nop
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002830:	2302      	movs	r3, #2
 8002832:	e050      	b.n	80028d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800285a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1c      	ldr	r2, [pc, #112]	@ (80028e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d018      	beq.n	80028aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002880:	d013      	beq.n	80028aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a18      	ldr	r2, [pc, #96]	@ (80028e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00e      	beq.n	80028aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a16      	ldr	r2, [pc, #88]	@ (80028ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d009      	beq.n	80028aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a15      	ldr	r2, [pc, #84]	@ (80028f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d004      	beq.n	80028aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a13      	ldr	r2, [pc, #76]	@ (80028f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d10c      	bne.n	80028c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40010000 	.word	0x40010000
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40000800 	.word	0x40000800
 80028f0:	40000c00 	.word	0x40000c00
 80028f4:	40014000 	.word	0x40014000

080028f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e042      	b.n	80029b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe fa50 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	@ 0x24
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f82b 	bl	80029c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c4:	b0c0      	sub	sp, #256	@ 0x100
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029dc:	68d9      	ldr	r1, [r3, #12]
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	ea40 0301 	orr.w	r3, r0, r1
 80029e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a18:	f021 010c 	bic.w	r1, r1, #12
 8002a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a26:	430b      	orrs	r3, r1
 8002a28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3a:	6999      	ldr	r1, [r3, #24]
 8002a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	ea40 0301 	orr.w	r3, r0, r1
 8002a46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4b8f      	ldr	r3, [pc, #572]	@ (8002c8c <UART_SetConfig+0x2cc>)
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d005      	beq.n	8002a60 <UART_SetConfig+0xa0>
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4b8d      	ldr	r3, [pc, #564]	@ (8002c90 <UART_SetConfig+0x2d0>)
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d104      	bne.n	8002a6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a60:	f7ff fad8 	bl	8002014 <HAL_RCC_GetPCLK2Freq>
 8002a64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a68:	e003      	b.n	8002a72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a6a:	f7ff fabf 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8002a6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a7c:	f040 810c 	bne.w	8002c98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a84:	2200      	movs	r2, #0
 8002a86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a92:	4622      	mov	r2, r4
 8002a94:	462b      	mov	r3, r5
 8002a96:	1891      	adds	r1, r2, r2
 8002a98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a9a:	415b      	adcs	r3, r3
 8002a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	eb12 0801 	adds.w	r8, r2, r1
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	eb43 0901 	adc.w	r9, r3, r1
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ac2:	4690      	mov	r8, r2
 8002ac4:	4699      	mov	r9, r3
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	eb18 0303 	adds.w	r3, r8, r3
 8002acc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ad0:	462b      	mov	r3, r5
 8002ad2:	eb49 0303 	adc.w	r3, r9, r3
 8002ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ae6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002aea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002aee:	460b      	mov	r3, r1
 8002af0:	18db      	adds	r3, r3, r3
 8002af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002af4:	4613      	mov	r3, r2
 8002af6:	eb42 0303 	adc.w	r3, r2, r3
 8002afa:	657b      	str	r3, [r7, #84]	@ 0x54
 8002afc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b04:	f7fd fb66 	bl	80001d4 <__aeabi_uldivmod>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4b61      	ldr	r3, [pc, #388]	@ (8002c94 <UART_SetConfig+0x2d4>)
 8002b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	011c      	lsls	r4, r3, #4
 8002b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b28:	4642      	mov	r2, r8
 8002b2a:	464b      	mov	r3, r9
 8002b2c:	1891      	adds	r1, r2, r2
 8002b2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b30:	415b      	adcs	r3, r3
 8002b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b38:	4641      	mov	r1, r8
 8002b3a:	eb12 0a01 	adds.w	sl, r2, r1
 8002b3e:	4649      	mov	r1, r9
 8002b40:	eb43 0b01 	adc.w	fp, r3, r1
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b58:	4692      	mov	sl, r2
 8002b5a:	469b      	mov	fp, r3
 8002b5c:	4643      	mov	r3, r8
 8002b5e:	eb1a 0303 	adds.w	r3, sl, r3
 8002b62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b66:	464b      	mov	r3, r9
 8002b68:	eb4b 0303 	adc.w	r3, fp, r3
 8002b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b84:	460b      	mov	r3, r1
 8002b86:	18db      	adds	r3, r3, r3
 8002b88:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	eb42 0303 	adc.w	r3, r2, r3
 8002b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b9a:	f7fd fb1b 	bl	80001d4 <__aeabi_uldivmod>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8002c94 <UART_SetConfig+0x2d4>)
 8002ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	2264      	movs	r2, #100	@ 0x64
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	1acb      	subs	r3, r1, r3
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002bba:	4b36      	ldr	r3, [pc, #216]	@ (8002c94 <UART_SetConfig+0x2d4>)
 8002bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002bc8:	441c      	add	r4, r3
 8002bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002bd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002bdc:	4642      	mov	r2, r8
 8002bde:	464b      	mov	r3, r9
 8002be0:	1891      	adds	r1, r2, r2
 8002be2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002be4:	415b      	adcs	r3, r3
 8002be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002bec:	4641      	mov	r1, r8
 8002bee:	1851      	adds	r1, r2, r1
 8002bf0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	414b      	adcs	r3, r1
 8002bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c04:	4659      	mov	r1, fp
 8002c06:	00cb      	lsls	r3, r1, #3
 8002c08:	4651      	mov	r1, sl
 8002c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c0e:	4651      	mov	r1, sl
 8002c10:	00ca      	lsls	r2, r1, #3
 8002c12:	4610      	mov	r0, r2
 8002c14:	4619      	mov	r1, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	4642      	mov	r2, r8
 8002c1a:	189b      	adds	r3, r3, r2
 8002c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c20:	464b      	mov	r3, r9
 8002c22:	460a      	mov	r2, r1
 8002c24:	eb42 0303 	adc.w	r3, r2, r3
 8002c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c40:	460b      	mov	r3, r1
 8002c42:	18db      	adds	r3, r3, r3
 8002c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c46:	4613      	mov	r3, r2
 8002c48:	eb42 0303 	adc.w	r3, r2, r3
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c56:	f7fd fabd 	bl	80001d4 <__aeabi_uldivmod>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c94 <UART_SetConfig+0x2d4>)
 8002c60:	fba3 1302 	umull	r1, r3, r3, r2
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	2164      	movs	r1, #100	@ 0x64
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	3332      	adds	r3, #50	@ 0x32
 8002c72:	4a08      	ldr	r2, [pc, #32]	@ (8002c94 <UART_SetConfig+0x2d4>)
 8002c74:	fba2 2303 	umull	r2, r3, r2, r3
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	f003 0207 	and.w	r2, r3, #7
 8002c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4422      	add	r2, r4
 8002c86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c88:	e106      	b.n	8002e98 <UART_SetConfig+0x4d8>
 8002c8a:	bf00      	nop
 8002c8c:	40011000 	.word	0x40011000
 8002c90:	40011400 	.word	0x40011400
 8002c94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ca2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ca6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002caa:	4642      	mov	r2, r8
 8002cac:	464b      	mov	r3, r9
 8002cae:	1891      	adds	r1, r2, r2
 8002cb0:	6239      	str	r1, [r7, #32]
 8002cb2:	415b      	adcs	r3, r3
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cba:	4641      	mov	r1, r8
 8002cbc:	1854      	adds	r4, r2, r1
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	eb43 0501 	adc.w	r5, r3, r1
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	00eb      	lsls	r3, r5, #3
 8002cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cd2:	00e2      	lsls	r2, r4, #3
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	461d      	mov	r5, r3
 8002cd8:	4643      	mov	r3, r8
 8002cda:	18e3      	adds	r3, r4, r3
 8002cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ce0:	464b      	mov	r3, r9
 8002ce2:	eb45 0303 	adc.w	r3, r5, r3
 8002ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cf6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d06:	4629      	mov	r1, r5
 8002d08:	008b      	lsls	r3, r1, #2
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d10:	4621      	mov	r1, r4
 8002d12:	008a      	lsls	r2, r1, #2
 8002d14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d18:	f7fd fa5c 	bl	80001d4 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4b60      	ldr	r3, [pc, #384]	@ (8002ea4 <UART_SetConfig+0x4e4>)
 8002d22:	fba3 2302 	umull	r2, r3, r3, r2
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	011c      	lsls	r4, r3, #4
 8002d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d3c:	4642      	mov	r2, r8
 8002d3e:	464b      	mov	r3, r9
 8002d40:	1891      	adds	r1, r2, r2
 8002d42:	61b9      	str	r1, [r7, #24]
 8002d44:	415b      	adcs	r3, r3
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d4c:	4641      	mov	r1, r8
 8002d4e:	1851      	adds	r1, r2, r1
 8002d50:	6139      	str	r1, [r7, #16]
 8002d52:	4649      	mov	r1, r9
 8002d54:	414b      	adcs	r3, r1
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d64:	4659      	mov	r1, fp
 8002d66:	00cb      	lsls	r3, r1, #3
 8002d68:	4651      	mov	r1, sl
 8002d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d6e:	4651      	mov	r1, sl
 8002d70:	00ca      	lsls	r2, r1, #3
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	4642      	mov	r2, r8
 8002d7a:	189b      	adds	r3, r3, r2
 8002d7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d80:	464b      	mov	r3, r9
 8002d82:	460a      	mov	r2, r1
 8002d84:	eb42 0303 	adc.w	r3, r2, r3
 8002d88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002da4:	4649      	mov	r1, r9
 8002da6:	008b      	lsls	r3, r1, #2
 8002da8:	4641      	mov	r1, r8
 8002daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dae:	4641      	mov	r1, r8
 8002db0:	008a      	lsls	r2, r1, #2
 8002db2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002db6:	f7fd fa0d 	bl	80001d4 <__aeabi_uldivmod>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4b38      	ldr	r3, [pc, #224]	@ (8002ea4 <UART_SetConfig+0x4e4>)
 8002dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2264      	movs	r2, #100	@ 0x64
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	1acb      	subs	r3, r1, r3
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	3332      	adds	r3, #50	@ 0x32
 8002dd4:	4a33      	ldr	r2, [pc, #204]	@ (8002ea4 <UART_SetConfig+0x4e4>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002de0:	441c      	add	r4, r3
 8002de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002de6:	2200      	movs	r2, #0
 8002de8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002dea:	677a      	str	r2, [r7, #116]	@ 0x74
 8002dec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002df0:	4642      	mov	r2, r8
 8002df2:	464b      	mov	r3, r9
 8002df4:	1891      	adds	r1, r2, r2
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	415b      	adcs	r3, r3
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e00:	4641      	mov	r1, r8
 8002e02:	1851      	adds	r1, r2, r1
 8002e04:	6039      	str	r1, [r7, #0]
 8002e06:	4649      	mov	r1, r9
 8002e08:	414b      	adcs	r3, r1
 8002e0a:	607b      	str	r3, [r7, #4]
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e18:	4659      	mov	r1, fp
 8002e1a:	00cb      	lsls	r3, r1, #3
 8002e1c:	4651      	mov	r1, sl
 8002e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e22:	4651      	mov	r1, sl
 8002e24:	00ca      	lsls	r2, r1, #3
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4642      	mov	r2, r8
 8002e2e:	189b      	adds	r3, r3, r2
 8002e30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e32:	464b      	mov	r3, r9
 8002e34:	460a      	mov	r2, r1
 8002e36:	eb42 0303 	adc.w	r3, r2, r3
 8002e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e46:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e54:	4649      	mov	r1, r9
 8002e56:	008b      	lsls	r3, r1, #2
 8002e58:	4641      	mov	r1, r8
 8002e5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e5e:	4641      	mov	r1, r8
 8002e60:	008a      	lsls	r2, r1, #2
 8002e62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e66:	f7fd f9b5 	bl	80001d4 <__aeabi_uldivmod>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea4 <UART_SetConfig+0x4e4>)
 8002e70:	fba3 1302 	umull	r1, r3, r3, r2
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	2164      	movs	r1, #100	@ 0x64
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	3332      	adds	r3, #50	@ 0x32
 8002e82:	4a08      	ldr	r2, [pc, #32]	@ (8002ea4 <UART_SetConfig+0x4e4>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	f003 020f 	and.w	r2, r3, #15
 8002e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4422      	add	r2, r4
 8002e96:	609a      	str	r2, [r3, #8]
}
 8002e98:	bf00      	nop
 8002e9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea4:	51eb851f 	.word	0x51eb851f

08002ea8 <memset>:
 8002ea8:	4402      	add	r2, r0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d100      	bne.n	8002eb2 <memset+0xa>
 8002eb0:	4770      	bx	lr
 8002eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002eb6:	e7f9      	b.n	8002eac <memset+0x4>

08002eb8 <__libc_init_array>:
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	4d0d      	ldr	r5, [pc, #52]	@ (8002ef0 <__libc_init_array+0x38>)
 8002ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8002ef4 <__libc_init_array+0x3c>)
 8002ebe:	1b64      	subs	r4, r4, r5
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	2600      	movs	r6, #0
 8002ec4:	42a6      	cmp	r6, r4
 8002ec6:	d109      	bne.n	8002edc <__libc_init_array+0x24>
 8002ec8:	4d0b      	ldr	r5, [pc, #44]	@ (8002ef8 <__libc_init_array+0x40>)
 8002eca:	4c0c      	ldr	r4, [pc, #48]	@ (8002efc <__libc_init_array+0x44>)
 8002ecc:	f000 f818 	bl	8002f00 <_init>
 8002ed0:	1b64      	subs	r4, r4, r5
 8002ed2:	10a4      	asrs	r4, r4, #2
 8002ed4:	2600      	movs	r6, #0
 8002ed6:	42a6      	cmp	r6, r4
 8002ed8:	d105      	bne.n	8002ee6 <__libc_init_array+0x2e>
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee0:	4798      	blx	r3
 8002ee2:	3601      	adds	r6, #1
 8002ee4:	e7ee      	b.n	8002ec4 <__libc_init_array+0xc>
 8002ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eea:	4798      	blx	r3
 8002eec:	3601      	adds	r6, #1
 8002eee:	e7f2      	b.n	8002ed6 <__libc_init_array+0x1e>
 8002ef0:	08002f38 	.word	0x08002f38
 8002ef4:	08002f38 	.word	0x08002f38
 8002ef8:	08002f38 	.word	0x08002f38
 8002efc:	08002f3c 	.word	0x08002f3c

08002f00 <_init>:
 8002f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f02:	bf00      	nop
 8002f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f06:	bc08      	pop	{r3}
 8002f08:	469e      	mov	lr, r3
 8002f0a:	4770      	bx	lr

08002f0c <_fini>:
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	bf00      	nop
 8002f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f12:	bc08      	pop	{r3}
 8002f14:	469e      	mov	lr, r3
 8002f16:	4770      	bx	lr
